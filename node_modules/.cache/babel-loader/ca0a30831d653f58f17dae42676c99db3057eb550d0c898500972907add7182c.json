{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cubeRef = useRef(null);\n  const cameraRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n\n    // Add HDRI environment map for realistic lighting\n    const loader = new RGBELoader();\n    loader.load('path_to_your_hdri_image.hdr', texture => {\n      texture.mapping = THREE.EquirectangularRefractionMapping;\n      scene.background = texture;\n      scene.environment = texture;\n    });\n\n    // Create cube geometry with metallic material\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshStandardMaterial({\n      color: 0x00ff00,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    cube.position.set(0, 0, 0); // Center the cube\n    scene.add(cube);\n    cubeRef.current = cube;\n\n    // Set up camera position\n    camera.position.z = 5;\n\n    // Add ambient and directional lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 1); // Soft ambient light\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(1, 1, 1).normalize();\n    scene.add(directionalLight);\n\n    // Set up post-processing with bloom effect\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5,\n    // Strength of bloom\n    0.4,\n    // Radius of bloom\n    0.85 // Threshold for bloom\n    );\n    composer.addPass(bloomPass);\n    composerRef.current = composer;\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      composer.setSize(window.innerWidth, window.innerHeight);\n    });\n\n    // Animation loop\n    const animate = () => {\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.01;\n        cubeRef.current.rotation.y += 0.01;\n      }\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      geometry.dispose();\n      material.dispose();\n      scene.remove(cubeRef.current);\n      cubeRef.current = null;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TitleBG, \"OhhzQRwcuistTnhT4Z3OXPq2Axo=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","EffectComposer","RenderPass","UnrealBloomPass","RGBELoader","Fragment","_Fragment","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cubeRef","cameraRef","composerRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","getElementById","appendChild","domElement","current","loader","load","texture","mapping","EquirectangularRefractionMapping","background","environment","geometry","BoxGeometry","material","MeshStandardMaterial","color","metalness","roughness","cube","Mesh","position","set","add","z","ambientLight","AmbientLight","directionalLight","DirectionalLight","normalize","composer","addPass","bloomPass","Vector2","addEventListener","aspect","updateProjectionMatrix","animate","rotation","x","y","render","requestAnimationFrame","dispose","remove","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cubeRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    // Add HDRI environment map for realistic lighting\r\n    const loader = new RGBELoader();\r\n    loader.load('path_to_your_hdri_image.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularRefractionMapping;\r\n      scene.background = texture;\r\n      scene.environment = texture;\r\n    });\r\n\r\n    // Create cube geometry with metallic material\r\n    const geometry = new THREE.BoxGeometry();\r\n    const material = new THREE.MeshStandardMaterial({\r\n      color: 0x00ff00,\r\n      metalness: 0.8,\r\n      roughness: 0.2,\r\n    });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    cube.position.set(0, 0, 0); // Center the cube\r\n    scene.add(cube);\r\n    cubeRef.current = cube;\r\n\r\n    // Set up camera position\r\n    camera.position.z = 5;\r\n\r\n    // Add ambient and directional lighting\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 1); // Soft ambient light\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    directionalLight.position.set(1, 1, 1).normalize();\r\n    scene.add(directionalLight);\r\n\r\n    // Set up post-processing with bloom effect\r\n    const composer = new EffectComposer(renderer);\r\n    composer.addPass(new RenderPass(scene, camera));\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n      1.5, // Strength of bloom\r\n      0.4, // Radius of bloom\r\n      0.85  // Threshold for bloom\r\n    );\r\n    composer.addPass(bloomPass);\r\n    composerRef.current = composer;\r\n\r\n    // Resize handling\r\n    window.addEventListener('resize', () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      composer.setSize(window.innerWidth, window.innerHeight);\r\n    });\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      if (cubeRef.current) {\r\n        cubeRef.current.rotation.x += 0.01;\r\n        cubeRef.current.rotation.y += 0.01;\r\n      }\r\n      composer.render();\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      geometry.dispose();\r\n      material.dispose();\r\n      scene.remove(cubeRef.current);\r\n      cubeRef.current = null;\r\n    };\r\n  }, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}