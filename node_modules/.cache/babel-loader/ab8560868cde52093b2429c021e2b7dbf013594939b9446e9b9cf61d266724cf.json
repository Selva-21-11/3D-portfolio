{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null); // Define composer reference\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect,\n    // left\n    2 * aspect,\n    // right\n    2,\n    // top\n    -2,\n    // bottom\n    0.1,\n    // near\n    1000 // far\n    );\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for lighting\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Big Sphere (Stationary) with Matte Material and Subtle Shine\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0x000000,\n      metalness: 0.0,\n      // Non-metallic\n      roughness: 0.8,\n      // Matte finish\n      clearcoat: 0.2,\n      // Subtle shine effect\n      clearcoatRoughness: 0.1\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    bigSphereRef.current = bigSphere;\n\n    // Small Sphere (Will rotate around Z-axis) with Matte Material and Subtle Shine\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xff0000,\n      metalness: 0.0,\n      // Non-metallic\n      roughness: 0.8,\n      // Matte finish\n      clearcoat: 0.2,\n      // Subtle shine effect\n      clearcoatRoughness: 0.1\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\n    scene.add(smallSphere);\n    smallSphereRef.current = smallSphere;\n    const handleMouseMove = event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1; // Normalized X-axis (-1 to 1)\n\n      // GSAP animation for smooth movement\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\n\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\n      const radius = 1; // New smaller radius for the small sphere's orbit\n\n      // Calculate the new position based on the reduced radius\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\n\n      // Move the small sphere backwards in the Z-axis (negative Z value)\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\n\n      // Using GSAP to animate the small sphere's movement in a smooth manner\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        // Move in Z-axis to make it go backwards\n        duration: 0.5,\n        // Smooth transition duration\n        ease: 'power3.out' // Easing for smoothness\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n\n    // Bloom effect (for realism)\n    const bloomPass = new BloomPass(1.25, 25, 4.0, 256);\n    composer.addPass(bloomPass);\n\n    // Film effect (for added texture and realism)\n    const filmPass = new FilmPass(0.35, 0.025, 648, false);\n    composer.addPass(filmPass);\n    composerRef.current = composer;\n\n    // Animation Loop\n    const animate = () => {\n      if (bigSphereRef.current) {\n        // The big sphere stays stationary, but you can rotate it if needed\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere (optional)\n      }\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"PQQqMr0DFQTW5vKSRBQfYl+2+4U=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","gsap","EffectComposer","RenderPass","BloomPass","FilmPass","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshPhysicalMaterial","color","metalness","roughness","clearcoat","clearcoatRoughness","bigSphere","Mesh","add","smallSphereGeometry","smallSphereMaterial","smallSphere","set","handleMouseMove","event","mouseXPosition","clientX","angle","Math","PI","radius","targetX","cos","targetY","sin","targetZ","to","x","y","duration","ease","addEventListener","composer","renderPass","addPass","bloomPass","filmPass","animate","rotation","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\nimport { gsap } from 'gsap';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';\r\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const composerRef = useRef(null);  // Define composer reference\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, // left\r\n      2 * aspect,  // right\r\n      2,           // top\r\n      -2,          // bottom\r\n      0.1,          // near\r\n      1000          // far\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture;\r\n      scene.background = new THREE.Color(0x000000);\r\n    });\r\n\r\n    // Big Sphere (Stationary) with Matte Material and Subtle Shine\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0x000000,\r\n      metalness: 0.0,  // Non-metallic\r\n      roughness: 0.8,  // Matte finish\r\n      clearcoat: 0.2,  // Subtle shine effect\r\n      clearcoatRoughness: 0.1,\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n    bigSphereRef.current = bigSphere;\r\n\r\n    // Small Sphere (Will rotate around Z-axis) with Matte Material and Subtle Shine\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xff0000,\r\n      metalness: 0.0,  // Non-metallic\r\n      roughness: 0.8,  // Matte finish\r\n      clearcoat: 0.2,  // Subtle shine effect\r\n      clearcoatRoughness: 0.1,\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\r\n    scene.add(smallSphere);\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    const handleMouseMove = (event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1; // Normalized X-axis (-1 to 1)\r\n      \r\n      // GSAP animation for smooth movement\r\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\r\n      \r\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\r\n      const radius = 1; // New smaller radius for the small sphere's orbit\r\n      \r\n      // Calculate the new position based on the reduced radius\r\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\r\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\r\n      \r\n      // Move the small sphere backwards in the Z-axis (negative Z value)\r\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\r\n      \r\n      // Using GSAP to animate the small sphere's movement in a smooth manner\r\n      gsap.to(smallSphere.position, {\r\n        x: targetX,\r\n        y: targetY,\r\n        z: targetZ, // Move in Z-axis to make it go backwards\r\n        duration: 0.5, // Smooth transition duration\r\n        ease: 'power3.out', // Easing for smoothness\r\n      });\r\n    };\r\n    \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Post-processing setup\r\n    const composer = new EffectComposer(renderer);\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    // Bloom effect (for realism)\r\n    const bloomPass = new BloomPass(1.25, 25, 4.0, 256);\r\n    composer.addPass(bloomPass);\r\n\r\n    // Film effect (for added texture and realism)\r\n    const filmPass = new FilmPass(0.35, 0.025, 648, false);\r\n    composer.addPass(filmPass);\r\n\r\n    composerRef.current = composer;\r\n\r\n    // Animation Loop\r\n    const animate = () => {\r\n      if (bigSphereRef.current) {\r\n        // The big sphere stays stationary, but you can rotate it if needed\r\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere (optional)\r\n      }\r\n      composer.render();\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize Event Listener\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}