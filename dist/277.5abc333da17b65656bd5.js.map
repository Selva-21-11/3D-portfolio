{"version":3,"file":"277.5abc333da17b65656bd5.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/BMWScene.js","webpack://my-3d-portfolio/./src/components/BikeScene.js","webpack://my-3d-portfolio/./src/components/ModelViewer.js","webpack://my-3d-portfolio/./src/components/ModelsSection.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useGLTF, OrbitControls } from '@react-three/drei';\r\nimport { useThree } from '@react-three/fiber';\r\n\r\nconst BMWScene = () => {\r\n  const { scene, cameras } = useGLTF('./assets/BMW.glb');\r\n  const { set, camera } = useThree();\r\n\r\n  useEffect(() => {\r\n    if (cameras.length > 0) {\r\n      camera.position.copy(cameras[0].position);\r\n      camera.fov = cameras[0].fov;\r\n      camera.near = cameras[0].near;\r\n      camera.far = cameras[0].far;\r\n      camera.updateProjectionMatrix();\r\n      set({ camera });\r\n      console.log(\"üöÄ Using GLB Camera for BMW:\", camera);\r\n    } else {\r\n      camera.position.set(4, 3, 6);\r\n      camera.lookAt(0, 0, 0);\r\n      console.log(\"‚ö†Ô∏è No GLB Camera found! Using fallback.\");\r\n    }\r\n  }, [cameras, set, camera]);\r\n\r\n  return (\r\n    <>\r\n      <primitive object={scene} />\r\n      <OrbitControls enableZoom={true} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BMWScene;\r\n","import React, { useEffect } from 'react';\r\nimport { useGLTF, OrbitControls } from '@react-three/drei';\r\nimport { useThree } from '@react-three/fiber';\r\n\r\nconst BikeScene = () => {\r\n  const { scene, cameras, lights, environment } = useGLTF('./assets/Bike.glb');\r\n  const { set, camera, gl } = useThree();\r\n\r\n  useEffect(() => {\r\n    // Use the camera from the GLB model if available\r\n    if (cameras.length > 0) {\r\n      set({ camera: cameras[0] });\r\n      console.log(\"üöÄ Using GLB Camera for Bike:\", {\r\n        fov: cameras[0].fov,\r\n        position: cameras[0].position.toArray(),\r\n        near: cameras[0].near,\r\n        far: cameras[0].far\r\n      });\r\n    } else {\r\n      // Fallback to a default camera if no camera is found in the GLB model\r\n      camera.position.set(3, 2, 5);\r\n      camera.lookAt(0, 0, 0);\r\n      console.log(\"‚ö†Ô∏è No GLB Camera found! Using fallback camera:\", {\r\n        fov: camera.fov,\r\n        position: camera.position.toArray(),\r\n        near: camera.near,\r\n        far: camera.far\r\n      });\r\n    }\r\n\r\n    // Traverse through the scene and add punctual lights from GLB model\r\n    scene.traverse((child) => {\r\n      if (child.isLight) {\r\n        // Check if the light is punctual (e.g., point, spot, or directional light)\r\n        if (child.isPointLight || child.isSpotLight || child.isDirectionalLight) {\r\n          // Adjust intensity (you can customize the intensity control here)\r\n          child.intensity = 1.5; // Set the intensity to a desired level (you can change this value)\r\n          console.log(`üí° Adjusted light intensity: ${child.intensity}`);\r\n        }\r\n        scene.add(child); // Add the light to the scene as it is in the GLB\r\n      }\r\n    });\r\n\r\n    // Apply environment map if available in the GLB\r\n    if (environment) {\r\n      scene.environment = environment;\r\n      gl.setEnvironmentMap(scene.environment);\r\n      console.log(\"üåç Environment Map Applied from GLB!\");\r\n    }\r\n\r\n  }, [cameras, set, camera, scene, lights, environment, gl]);\r\n\r\n  return (\r\n    <>\r\n      <primitive object={scene} />\r\n      <OrbitControls enableZoom={true} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BikeScene;\r\n","import React from 'react';\r\nimport BMWScene from './BMWScene';\r\nimport BikeScene from './BikeScene';\r\n\r\nconst ModelViewer = ({ modelName }) => {\r\n  return (\r\n    <>\r\n      {modelName === 'bmw' && <BMWScene />}\r\n      {modelName === 'bike' && <BikeScene />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModelViewer;\r\n","import React, { Suspense, useState, useEffect, useRef } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport gsap from \"gsap\";\r\n\r\nconst models = [\r\n    {\r\n        name: \"BMW Car\",\r\n        thumbnail: \"./assets/BMW_thumbnail.png\",\r\n        modelName: \"bmw\",\r\n        metadata: \"Modeled in Blender | 2024\",\r\n    },\r\n    {\r\n        name: \"Sport Bike\",\r\n        thumbnail: \"./assets/Bike_thumbnail.png\",\r\n        modelName: \"bike\",\r\n        metadata: \"Modeled in Blender | 2023\",\r\n    },\r\n    {\r\n        name: \"Sport Bike\",\r\n        thumbnail: \"./assets/Bike_thumbnail.png\",\r\n        modelName: \"bike\",\r\n        metadata: \"Modeled in Blender | 2023\",\r\n    },\r\n];\r\n\r\nconst ModelsSection = () => {\r\n    const [selectedModel, setSelectedModel] = useState(null);\r\n    const [centeredModelIndex, setCenteredModelIndex] = useState(0);\r\n    const popupRef = useRef(null);\r\n    const canvasContainerRef = useRef(null);\r\n\r\n    const settings = {\r\n        centerMode: true,\r\n        centerPadding: \"0px\",\r\n        slidesToShow: 1,\r\n        infinite: true,\r\n        speed: 500,\r\n        arrows: true,\r\n        focusOnSelect: true,\r\n        beforeChange: (_, next) => setCenteredModelIndex(next),\r\n    };\r\n\r\n    const handleModelClick = (index) => {\r\n        if (index === centeredModelIndex) {\r\n            setSelectedModel(models[index]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedModel && popupRef.current) {\r\n            gsap.fromTo(\r\n                popupRef.current,\r\n                { opacity: 0, scale: 0.8 },\r\n                { opacity: 1, scale: 1, duration: 0.5, ease: \"power2.out\" }\r\n            );\r\n        }\r\n    }, [selectedModel]);\r\n\r\n    const handleClose = () => {\r\n        gsap.to(popupRef.current, {\r\n            opacity: 0,\r\n            scale: 0.8,\r\n            duration: 0.4,\r\n            ease: \"power2.in\",\r\n            onComplete: () => setSelectedModel(null),\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"models-section\">\r\n            <h2 className=\"section-title\">3D Models Showcase</h2>\r\n            \r\n            <Slider {...settings}>\r\n                {models.map((model, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"model-card\"\r\n                        onClick={() => handleModelClick(index)}\r\n                        style={{ pointerEvents: index === centeredModelIndex ? \"auto\" : \"none\" }}\r\n                    >\r\n                        <img src={model.thumbnail} alt={model.name} className=\"thumbnail\" />\r\n                        <div className=\"model-info\">\r\n                            <h3>{model.name}</h3>\r\n                            <p>{model.metadata}</p>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </Slider>\r\n\r\n            {/* Modal */}\r\n            <div\r\n                className=\"popup-overlay\"\r\n                style={{ display: selectedModel ? \"block\" : \"none\" }}\r\n                onClick={handleClose}\r\n            ></div>\r\n            <div\r\n                className=\"model-popup\"\r\n                ref={popupRef}\r\n                style={{ display: selectedModel ? \"flex\" : \"none\" }}\r\n            >\r\n                <button className=\"close-btn\" onClick={handleClose}>‚úñ</button>\r\n                <div className=\"canvas-box\" ref={canvasContainerRef}>\r\n                    <Suspense fallback={<div>Loading 3D Model...</div>}>\r\n                        <Canvas camera={{ position: [0, 1, 5] }}>\r\n                            {selectedModel && <ModelViewer modelName={selectedModel.modelName} />}\r\n                        </Canvas>\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModelsSection;\r\n"],"names":["BMWScene","scene","cameras","useGLTF","set","camera","useThree","useEffect","length","position","copy","fov","near","far","updateProjectionMatrix","console","log","lookAt","React","object","OrbitControls","enableZoom","BikeScene","lights","environment","gl","toArray","traverse","child","isLight","isPointLight","isSpotLight","isDirectionalLight","intensity","concat","add","setEnvironmentMap","_ref","modelName","models","name","thumbnail","metadata","ModelsSection","selectedModel","setSelectedModel","useState","centeredModelIndex","setCenteredModelIndex","popupRef","useRef","canvasContainerRef","settings","centerMode","centerPadding","slidesToShow","infinite","speed","arrows","focusOnSelect","beforeChange","_","next","current","gsap","fromTo","opacity","scale","duration","ease","handleClose","to","onComplete","className","Slider","map","model","index","key","onClick","handleModelClick","style","pointerEvents","src","alt","display","ref","Suspense","fallback","Canvas","ModelViewer"],"sourceRoot":""}