{"version":3,"file":"309.7c4a584cef4419fb5fd1.js","mappings":"oMAKA,MAAMA,EAAS,CACX,CACIC,KAAM,iBACNC,UAAW,4BACXC,SAAU,yBACVC,SAAU,8BAEd,CACIH,KAAM,eACNC,UAAW,8BACXC,SAAU,oBACVC,SAAU,oCAEd,CACIH,KAAM,eACNC,UAAW,4BACXC,SAAU,kBACVC,SAAU,+BAuGlB,EAnG4BC,KACxB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,OAC5CC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,IACtDG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,GACjCO,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAaD,EAAAA,EAAAA,QAAO,MAEpBE,EAAW,CACbC,YAAY,EACZC,cAAe,MACfC,aAAc,EACdC,UAAU,EACVC,MAAO,IACPC,QAAQ,EACRC,eAAe,EACfC,aAAcA,CAACC,EAASC,IAASlB,EAAsBkB,IA8B3D,OACIC,EAAAA,cAAA,OAAKC,IAAKb,EAAYc,UAAU,iBAC5BF,EAAAA,cAAA,MAAIE,UAAU,iBAAgB,iBAE9BF,EAAAA,cAACG,EAAAA,EAAWd,EACPlB,EAAOiC,KAAI,CAACC,EAAOC,IAChBN,EAAAA,cAAA,OACIO,IAAKD,EACLJ,UAAU,aACVM,QAASA,IApCHF,KAClBA,IAAU1B,GACVF,EAAiBP,EAAOmC,GAC5B,EAiC+BG,CAAiBH,GAChCI,MAAO,CACHC,cAAeL,IAAU1B,EAAqB,OAAS,SAG3DoB,EAAAA,cAAA,OAAKY,IAAKP,EAAMhC,UAAWwC,IAAKR,EAAMjC,KAAM8B,UAAU,cACtDF,EAAAA,cAAA,OAAKE,UAAU,cACXF,EAAAA,cAAA,UAAKK,EAAMjC,MACX4B,EAAAA,cAAA,SAAIK,EAAM9B,eAMzBE,GACGuB,EAAAA,cAAA,OAAKE,UAAU,iBACXF,EAAAA,cAAA,OAAKE,UAAU,eACXF,EAAAA,cAAA,OAAKE,UAAU,mBACXF,EAAAA,cAACc,IAAW,CACRb,IAAKf,EACL6B,IAAKtC,EAAcH,SACnB0C,QAASlC,EACTmC,MAAOjC,EACPkC,UAAU,EACVC,MAAM,OACNC,OAAO,OACPC,QAxDLC,KACnB5C,EAAiB,KAAK,IA2DFsB,EAAAA,cAAA,OAAKE,UAAU,qBACXF,EAAAA,cAAA,UAAQQ,QAzDjBe,KACfxC,GAAcD,EAAU,GAwD8BA,EAAYkB,EAAAA,cAACwB,EAAAA,IAAO,MAAMxB,EAAAA,cAACyB,EAAAA,IAAM,OAC/DzB,EAAAA,cAAA,UAAQQ,QAtDjBkB,KACfzC,GAAYD,EAAQ,GAqDkCA,EAAUgB,EAAAA,cAAC2B,EAAAA,IAAY,MAAM3B,EAAAA,cAAC4B,EAAAA,IAAU,OACtE5B,EAAAA,cAAA,UAAQQ,QAnDXqB,KACrB,GAAI3C,EAAUY,QAAS,CACnB,MAAMgC,EAAgB5C,EAAUY,QAAQiC,oBACpCD,EAAcE,mBACdF,EAAcE,mBAEtB,IA6C2DhC,EAAAA,cAACiC,EAAAA,IAAQ,SAGpDjC,EAAAA,cAAA,UAAQE,UAAU,YAAYM,QAASA,IAAM9B,EAAiB,OAAO,OAI/E,C","sources":["webpack://my-3d-portfolio/./src/components/VideoRender.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { FaPlay, FaPause, FaVolumeMute, FaVolumeUp, FaExpand } from \"react-icons/fa\"; \r\n\r\nconst videos = [\r\n    {\r\n        name: \"Animation Reel\",\r\n        thumbnail: \"./assets/Imagerender1.png\",\r\n        videoSrc: \"./assets/Car_chase.mp4\",\r\n        metadata: \"Rendered in Blender | 2024\",\r\n    },\r\n    {\r\n        name: \"Sci-Fi Short\",\r\n        thumbnail: \"/assets/scifi_thumbnail.png\",\r\n        videoSrc: \"/assets/scifi.mp4\",\r\n        metadata: \"Rendered in Unreal Engine | 2023\",\r\n    },\r\n    {\r\n        name: \"Car Showcase\",\r\n        thumbnail: \"/assets/car_thumbnail.png\",\r\n        videoSrc: \"/assets/car.mp4\",\r\n        metadata: \"Rendered in Blender | 2023\",\r\n    },\r\n];\r\n\r\nconst VideoRendersSection = () => {\r\n    const [selectedVideo, setSelectedVideo] = useState(null);\r\n    const [centeredVideoIndex, setCenteredVideoIndex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(true);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n    const playerRef = useRef(null);\r\n    const sectionRef = useRef(null); // Reference for the Video Renders section\r\n\r\n    const settings = {\r\n        centerMode: true,\r\n        centerPadding: \"0px\",\r\n        slidesToShow: 1,\r\n        infinite: true,\r\n        speed: 500,\r\n        arrows: true,\r\n        focusOnSelect: true,\r\n        beforeChange: (current, next) => setCenteredVideoIndex(next),\r\n    };\r\n\r\n    const handleVideoClick = (index) => {\r\n        if (index === centeredVideoIndex) {\r\n            setSelectedVideo(videos[index]);\r\n        }\r\n    };\r\n\r\n    const handleVideoEnd = () => {\r\n        setSelectedVideo(null);\r\n    };\r\n\r\n    const togglePlay = () => {\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n\r\n    const toggleMute = () => {\r\n        setIsMuted(!isMuted);\r\n    };\r\n\r\n    const handleFullscreen = () => {\r\n        if (playerRef.current) {\r\n            const playerElement = playerRef.current.getInternalPlayer();\r\n            if (playerElement.requestFullscreen) {\r\n                playerElement.requestFullscreen();\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div ref={sectionRef} className=\"video-section\">\r\n            <h2 className=\"section-title\">Video Renders</h2>\r\n\r\n            <Slider {...settings}>\r\n                {videos.map((video, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className=\"video-card\"\r\n                        onClick={() => handleVideoClick(index)}\r\n                        style={{\r\n                            pointerEvents: index === centeredVideoIndex ? \"auto\" : \"none\",\r\n                        }}\r\n                    >\r\n                        <img src={video.thumbnail} alt={video.name} className=\"thumbnail\" />\r\n                        <div className=\"video-info\">\r\n                            <h3>{video.name}</h3>\r\n                            <p>{video.metadata}</p>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </Slider>\r\n\r\n            {selectedVideo && (\r\n                <div className=\"popup-wrapper\">\r\n                    <div className=\"video-popup\">\r\n                        <div className=\"video-container\">\r\n                            <ReactPlayer\r\n                                ref={playerRef}\r\n                                url={selectedVideo.videoSrc}\r\n                                playing={isPlaying}\r\n                                muted={isMuted}\r\n                                controls={false}\r\n                                width=\"100%\"\r\n                                height=\"100%\"\r\n                                onEnded={handleVideoEnd}\r\n                            />\r\n\r\n                            {/* Floating Controls */}\r\n                            <div className=\"floating-controls\">\r\n                                <button onClick={togglePlay}>{isPlaying ? <FaPause /> : <FaPlay />}</button>\r\n                                <button onClick={toggleMute}>{isMuted ? <FaVolumeMute /> : <FaVolumeUp />}</button>\r\n                                <button onClick={handleFullscreen}><FaExpand /></button>\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"close-btn\" onClick={() => setSelectedVideo(null)}>âœ–</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoRendersSection;\r\n"],"names":["videos","name","thumbnail","videoSrc","metadata","VideoRendersSection","selectedVideo","setSelectedVideo","useState","centeredVideoIndex","setCenteredVideoIndex","isPlaying","setIsPlaying","isMuted","setIsMuted","playerRef","useRef","sectionRef","settings","centerMode","centerPadding","slidesToShow","infinite","speed","arrows","focusOnSelect","beforeChange","current","next","React","ref","className","Slider","map","video","index","key","onClick","handleVideoClick","style","pointerEvents","src","alt","ReactPlayer","url","playing","muted","controls","width","height","onEnded","handleVideoEnd","togglePlay","FaPause","FaPlay","toggleMute","FaVolumeMute","FaVolumeUp","handleFullscreen","playerElement","getInternalPlayer","requestFullscreen","FaExpand"],"sourceRoot":""}