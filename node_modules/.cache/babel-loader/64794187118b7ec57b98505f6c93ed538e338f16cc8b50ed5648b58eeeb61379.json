{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash'; // Throttling library\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for the background (optional, can be omitted if not needed)\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Matcap Textures\n    const textureLoader = new THREE.TextureLoader();\n    const matcapBigSphere = textureLoader.load('/assets/matcap1.png'); // Replace with your matcap image\n    const matcapSmallSphere = textureLoader.load('/assets/matcap2.png'); // Replace with your matcap image\n\n    // Matcap Materials\n    const bigSphereMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matcapBigSphere\n    });\n    const smallSphereMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matcapSmallSphere\n    });\n\n    // Sphere Geometries\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Lower segments\n\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1, 0, 0);\n    scene.add(bigSphere, smallSphere);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Handle Mouse Move with Throttle\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = event.clientY / window.innerHeight * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 20); // Throttle to 20ms\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\n    composerRef.current = composer;\n\n    // Animation Loop\n    const animate = () => {\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"PQQqMr0DFQTW5vKSRBQfYl+2+4U=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","gsap","throttle","EffectComposer","RenderPass","FilmPass","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","textureLoader","TextureLoader","matcapBigSphere","matcapSmallSphere","bigSphereMaterial","MeshMatcapMaterial","matcap","smallSphereMaterial","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","set","add","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","angleX","Math","PI","angleY","radius","targetX","cos","targetY","sin","targetZ","to","x","y","duration","ease","addEventListener","composer","addPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash'; // Throttling library\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\n\nconst TitleBG = () => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect,\n      2 * aspect,\n      2,\n      -2,\n      0.1,\n      1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for the background (optional, can be omitted if not needed)\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Matcap Textures\n    const textureLoader = new THREE.TextureLoader();\n    const matcapBigSphere = textureLoader.load('/assets/matcap1.png'); // Replace with your matcap image\n    const matcapSmallSphere = textureLoader.load('/assets/matcap2.png'); // Replace with your matcap image\n\n    // Matcap Materials\n    const bigSphereMaterial = new THREE.MeshMatcapMaterial({ matcap: matcapBigSphere });\n    const smallSphereMaterial = new THREE.MeshMatcapMaterial({ matcap: matcapSmallSphere });\n\n    // Sphere Geometries\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Lower segments\n\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1, 0, 0);\n    scene.add(bigSphere, smallSphere);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Handle Mouse Move with Throttle\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out',\n      });\n    }, 20); // Throttle to 20ms\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\n    composerRef.current = composer;\n\n    // Animation Loop\n    const animate = () => {\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n\n  return null;\n};\n\nexport default TitleBG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}