"use strict";(self.webpackChunkmy_3d_portfolio=self.webpackChunkmy_3d_portfolio||[]).push([[267],{5267:(e,n,o)=>{o.r(n),o.d(n,{default:()=>l});var t=o(6540),i=o(4922),r=o(9437),a=o(5880),s=o(2543);const l=()=>{const e=(0,t.useRef)(null),n=(0,t.useRef)(null),o=(0,t.useRef)(null),l=(0,t.useRef)(null),d=(0,t.useRef)(null),[c,m]=(0,t.useState)(!0);return(0,t.useEffect)((()=>{const t=new i.Z58,v=window.innerWidth/window.innerHeight,p=new i.qUd(-2*v,2*v,2,-2,.1,1e3),u=new r.WebGLRenderer({antialias:!0,preserveDrawingBuffer:!0});u.setSize(window.innerWidth,window.innerHeight),u.outputEncoding=i.Zr2,u.physicallyCorrectLights=!0,document.getElementById("hero").appendChild(u.domElement),n.current=u,o.current=p,e.current=t,p.position.z=5;const w=new i.KPJ;w.onStart=()=>console.log("Loading started..."),w.onLoad=()=>{console.log("Loading complete!"),m(!1),a.os.fromTo(l.current.scale,{x:0,y:0,z:0},{x:1,y:1,z:1,duration:1,ease:"power3.out"}),a.os.fromTo(d.current.scale,{x:0,y:0,z:0},{x:1,y:1,z:1,duration:1,ease:"power3.out"})};const g=new i.Tap(w),h=g.load("/assets/mattext.png"),f=g.load("/assets/mattext.png");h.wrapS=h.wrapT=i.ghU,f.wrapS=f.wrapT=i.ghU;const y=new i.BKk({uniforms:{tMatCap:{type:"t",value:h}},vertexShader:"\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vNormal = normalize(normalMatrix * normal);\n          vPosition = position;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform sampler2D tMatCap;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\n          gl_FragColor = vec4(matCapColor, 1.0);\n        }\n      "}),x=new i.BKk({uniforms:{tMatCap:{type:"t",value:f}},vertexShader:"\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vNormal = normalize(normalMatrix * normal);\n          vPosition = position;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform sampler2D tMatCap;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\n          gl_FragColor = vec4(matCapColor, 1.0);\n        }\n      "}),C=new i.Gu$(1.5,32,32),M=new i.Gu$(.5,32,32),z=new i.eaF(C,y),P=new i.eaF(M,x),E=new i.YJl;E.add(z),E.add(P),t.add(E),l.current=z,d.current=P;const N=(0,s.throttle)((e=>{const n=e.clientX/window.innerWidth*2-1,o=e.clientY/window.innerHeight*2-1,t=.1*n,i=.1*o;a.os.to(p.position,{x:t,y:i,z:5,duration:.6,ease:"power3.out"});const r=1.5*Math.cos(n*Math.PI),s=1.5*Math.sin(o*Math.PI);a.os.to(P.position,{x:r,y:s,z:-1,duration:.5,ease:"power3.out"})}),100);window.addEventListener("mousemove",N);const L=()=>{c||u.render(t,p),requestAnimationFrame(L)};L();const S=()=>{const e=window.innerWidth/window.innerHeight;p.left=-2*e,p.right=2*e,p.top=2,p.bottom=-2,p.updateProjectionMatrix(),u.setSize(window.innerWidth,window.innerHeight)};window.addEventListener("resize",S);return()=>{window.removeEventListener("resize",S),window.removeEventListener("mousemove",N),h.dispose(),f.dispose(),C.dispose(),M.dispose(),z.material.dispose(),P.material.dispose(),t.clear(),u.dispose()}}),[c]),t.createElement("div",null,c&&t.createElement("div",{className:"loading-screen"},t.createElement("h3",null,"Loading...")))}}}]);