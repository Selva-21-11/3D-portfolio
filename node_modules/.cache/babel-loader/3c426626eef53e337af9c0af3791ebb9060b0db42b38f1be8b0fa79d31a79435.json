{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding; // Optimize color output\n    renderer.physicallyCorrectLights = true; // Enable realistic lighting calculations\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Load HDR for lighting only\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture; // Use HDR for lighting\n      scene.background = new THREE.Color(0x000000); // Black background\n    });\n\n    // Create the big sphere\n    const bigSphereGeometry = new THREE.SphereGeometry(2.5, 32, 32);\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0x000000,\n      // White color\n      metalness: 0.2,\n      // Low metalness for a matte-like look\n      roughness: 0.8,\n      // High roughness for a matte surface\n      clearcoat: 0.1,\n      // Subtle clearcoat for a light reflection layer\n      clearcoatRoughness: 0.5 // Smooth clearcoat reflection\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    bigSphereRef.current = bigSphere;\n\n    // Create the small sphere\n    const smallSphereGeometry = new THREE.SphereGeometry(2, 32, 32);\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xff0000,\n      // Red color\n      metalness: 0.3,\n      // Slightly more metallic for contrast\n      roughness: 0.7,\n      // Moderate roughness for a softer matte look\n      clearcoat: 0.15,\n      // Subtle clearcoat for light interaction\n      clearcoatRoughness: 0.5 // Smooth clearcoat reflection\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1.5, 0, 0); // Place it next to the big sphere\n    scene.add(smallSphere);\n    smallSphereRef.current = smallSphere;\n\n    // Animation loop\n    const animate = () => {\n      if (bigSphereRef.current && smallSphereRef.current) {\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere\n        smallSphereRef.current.rotation.y -= 0.02; // Rotate small sphere\n        smallSphereRef.current.position.x = 1.5 * Math.cos(Date.now() * 0.001); // Orbit small sphere\n        smallSphereRef.current.position.z = 1.5 * Math.sin(Date.now() * 0.001);\n      }\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize listener for responsive rendering\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Clean up on unmount\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"P6dwjIPfWdVV0LEP/LCVnx1KMPk=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshPhysicalMaterial","color","metalness","roughness","clearcoat","clearcoatRoughness","bigSphere","Mesh","add","smallSphereGeometry","smallSphereMaterial","smallSphere","set","animate","rotation","y","x","Math","cos","Date","now","sin","render","requestAnimationFrame","onWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding; // Optimize color output\r\n    renderer.physicallyCorrectLights = true; // Enable realistic lighting calculations\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    // Set camera position\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting only\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture; // Use HDR for lighting\r\n      scene.background = new THREE.Color(0x000000); // Black background\r\n    });\r\n\r\n    // Create the big sphere\r\n    const bigSphereGeometry = new THREE.SphereGeometry(2.5, 32, 32);\r\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n        color: 0x000000, // White color\r\n        metalness: 0.2,  // Low metalness for a matte-like look\r\n        roughness: 0.8,  // High roughness for a matte surface\r\n        clearcoat: 0.1,  // Subtle clearcoat for a light reflection layer\r\n        clearcoatRoughness: 0.5, // Smooth clearcoat reflection\r\n      });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n    bigSphereRef.current = bigSphere;\r\n\r\n    // Create the small sphere\r\n    const smallSphereGeometry = new THREE.SphereGeometry(2, 32, 32);\r\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n        color: 0xff0000, // Red color\r\n        metalness: 0.3,  // Slightly more metallic for contrast\r\n        roughness: 0.7,  // Moderate roughness for a softer matte look\r\n        clearcoat: 0.15, // Subtle clearcoat for light interaction\r\n        clearcoatRoughness: 0.5, // Smooth clearcoat reflection\r\n      });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(1.5, 0, 0); // Place it next to the big sphere\r\n    scene.add(smallSphere);\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      if (bigSphereRef.current && smallSphereRef.current) {\r\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere\r\n        smallSphereRef.current.rotation.y -= 0.02; // Rotate small sphere\r\n        smallSphereRef.current.position.x = 1.5 * Math.cos(Date.now() * 0.001); // Orbit small sphere\r\n        smallSphereRef.current.position.z = 1.5 * Math.sin(Date.now() * 0.001);\r\n      }\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize listener for responsive rendering\r\n    const onWindowResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,uCAAuC;AAElE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMO,WAAW,GAAGP,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMQ,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMS,YAAY,GAAGT,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMU,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,KAAK,GAAG,IAAIT,KAAK,CAACU,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;IACjG,MAAMC,QAAQ,GAAG,IAAIhB,KAAK,CAACiB,aAAa,CAAC;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IAC7DF,QAAQ,CAACG,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDC,QAAQ,CAACI,cAAc,GAAGpB,KAAK,CAACqB,YAAY,CAAC,CAAC;IAC9CL,QAAQ,CAACM,uBAAuB,GAAG,IAAI,CAAC,CAAC;IACzCC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,WAAW,CAACT,QAAQ,CAACU,UAAU,CAAC;IAChErB,WAAW,CAACsB,OAAO,GAAGX,QAAQ;IAC9BV,SAAS,CAACqB,OAAO,GAAGhB,MAAM;IAC1BP,QAAQ,CAACuB,OAAO,GAAGlB,KAAK;;IAExB;IACAE,MAAM,CAACiB,QAAQ,CAACC,CAAC,GAAG,CAAC;;IAErB;IACA,MAAMC,UAAU,GAAG,IAAI7B,UAAU,CAAC,CAAC;IACnC6B,UAAU,CAACC,IAAI,CAAC,qCAAqC,EAAGC,OAAO,IAAK;MAClEA,OAAO,CAACC,OAAO,GAAGjC,KAAK,CAACkC,gCAAgC;MACxDzB,KAAK,CAAC0B,WAAW,GAAGH,OAAO,CAAC,CAAC;MAC7BvB,KAAK,CAAC2B,UAAU,GAAG,IAAIpC,KAAK,CAACqC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;;IAEF;IACA,MAAMC,iBAAiB,GAAG,IAAItC,KAAK,CAACuC,cAAc,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;IAC/D,MAAMC,iBAAiB,GAAG,IAAIxC,KAAK,CAACyC,oBAAoB,CAAC;MACrDC,KAAK,EAAE,QAAQ;MAAE;MACjBC,SAAS,EAAE,GAAG;MAAG;MACjBC,SAAS,EAAE,GAAG;MAAG;MACjBC,SAAS,EAAE,GAAG;MAAG;MACjBC,kBAAkB,EAAE,GAAG,CAAE;IAC3B,CAAC,CAAC;IACJ,MAAMC,SAAS,GAAG,IAAI/C,KAAK,CAACgD,IAAI,CAACV,iBAAiB,EAAEE,iBAAiB,CAAC;IACtE/B,KAAK,CAACwC,GAAG,CAACF,SAAS,CAAC;IACpBxC,YAAY,CAACoB,OAAO,GAAGoB,SAAS;;IAEhC;IACA,MAAMG,mBAAmB,GAAG,IAAIlD,KAAK,CAACuC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAC/D,MAAMY,mBAAmB,GAAG,IAAInD,KAAK,CAACyC,oBAAoB,CAAC;MACvDC,KAAK,EAAE,QAAQ;MAAE;MACjBC,SAAS,EAAE,GAAG;MAAG;MACjBC,SAAS,EAAE,GAAG;MAAG;MACjBC,SAAS,EAAE,IAAI;MAAE;MACjBC,kBAAkB,EAAE,GAAG,CAAE;IAC3B,CAAC,CAAC;IACJ,MAAMM,WAAW,GAAG,IAAIpD,KAAK,CAACgD,IAAI,CAACE,mBAAmB,EAAEC,mBAAmB,CAAC;IAC5EC,WAAW,CAACxB,QAAQ,CAACyB,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACrC5C,KAAK,CAACwC,GAAG,CAACG,WAAW,CAAC;IACtB5C,cAAc,CAACmB,OAAO,GAAGyB,WAAW;;IAEpC;IACA,MAAME,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAI/C,YAAY,CAACoB,OAAO,IAAInB,cAAc,CAACmB,OAAO,EAAE;QAClDpB,YAAY,CAACoB,OAAO,CAAC4B,QAAQ,CAACC,CAAC,IAAI,IAAI,CAAC,CAAC;QACzChD,cAAc,CAACmB,OAAO,CAAC4B,QAAQ,CAACC,CAAC,IAAI,IAAI,CAAC,CAAC;QAC3ChD,cAAc,CAACmB,OAAO,CAACC,QAAQ,CAAC6B,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QACxErD,cAAc,CAACmB,OAAO,CAACC,QAAQ,CAACC,CAAC,GAAG,GAAG,GAAG6B,IAAI,CAACI,GAAG,CAACF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;MACxE;MACA7C,QAAQ,CAAC+C,MAAM,CAACtD,KAAK,EAAEE,MAAM,CAAC;MAC9BqD,qBAAqB,CAACV,OAAO,CAAC;IAChC,CAAC;IACDA,OAAO,CAAC,CAAC;;IAET;IACA,MAAMW,cAAc,GAAGA,CAAA,KAAM;MAC3BtD,MAAM,CAACuD,MAAM,GAAGrD,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW;MACtDJ,MAAM,CAACwD,sBAAsB,CAAC,CAAC;MAC/BnD,QAAQ,CAACG,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACzD,CAAC;IACDF,MAAM,CAACuD,gBAAgB,CAAC,QAAQ,EAAEH,cAAc,CAAC;;IAEjD;IACA,OAAO,MAAM;MACXpD,MAAM,CAACwD,mBAAmB,CAAC,QAAQ,EAAEJ,cAAc,CAAC;MACpDjD,QAAQ,CAACsD,OAAO,CAAC,CAAC;MAClBhC,iBAAiB,CAACgC,OAAO,CAAC,CAAC;MAC3B9B,iBAAiB,CAAC8B,OAAO,CAAC,CAAC;MAC3BpB,mBAAmB,CAACoB,OAAO,CAAC,CAAC;MAC7BnB,mBAAmB,CAACmB,OAAO,CAAC,CAAC;MAC7B7D,KAAK,CAAC8D,KAAK,CAAC,CAAC;IACf,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACb,CAAC;AAACpE,EAAA,CA5FID,OAAO;AAAAsE,EAAA,GAAPtE,OAAO;AA8Fb,eAAeA,OAAO;AAAC,IAAAsE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}