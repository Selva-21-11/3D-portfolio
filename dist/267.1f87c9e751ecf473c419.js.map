{"version":3,"file":"267.1f87c9e751ecf473c419.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { gsap } from 'gsap';\r\nimport { throttle } from 'lodash';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({\r\n      antialias: true,\r\n      preserveDrawingBuffer: true,\r\n      alpha: true,\r\n    });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setClearColor(0x000000, 0);\r\n    renderer.outputEncoding = THREE.LinearSRGBColorSpace;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n    camera.position.z = 5;\r\n\r\n    // Load manager\r\n    const loadingManager = new THREE.LoadingManager();\r\n\r\n    // Load textures\r\n    const textureLoader = new THREE.TextureLoader(loadingManager);\r\n    const matCapTextureBig = textureLoader.load('./assets/mattext.webp');\r\n    const matCapTextureSmall = textureLoader.load('./assets/mattext.webp');\r\n    matCapTextureBig.wrapS = matCapTextureBig.wrapT = THREE.ClampToEdgeWrapping;\r\n    matCapTextureSmall.wrapS = matCapTextureSmall.wrapT = THREE.ClampToEdgeWrapping;\r\n\r\n    // Shader Materials\r\n    const shaderMaterialBig = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        tMatCap: { type: 't', value: matCapTextureBig },\r\n      },\r\n      vertexShader: `\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n\r\n        void main() {\r\n          vNormal = normalize(normalMatrix * normal);\r\n          vPosition = position;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D tMatCap;\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n\r\n        void main() {\r\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\r\n          gl_FragColor = vec4(matCapColor, 1.0);\r\n        }\r\n      `,\r\n    });\r\n\r\n    const shaderMaterialSmall = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        tMatCap: { type: 't', value: matCapTextureSmall },\r\n      },\r\n      vertexShader: shaderMaterialBig.vertexShader,\r\n      fragmentShader: shaderMaterialBig.fragmentShader,\r\n    });\r\n\r\n    // Sphere geometry\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\r\n\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, shaderMaterialBig);\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, shaderMaterialSmall);\r\n    const sphereGroup = new THREE.Group();\r\n    sphereGroup.add(bigSphere);\r\n    sphereGroup.add(smallSphere);\r\n    scene.add(sphereGroup);\r\n\r\n    bigSphereRef.current = bigSphere;\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    const handleMouseMove = throttle((event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\r\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\r\n      const radius = 1.6;\r\n      const angle = Math.atan2(mouseYPosition, mouseXPosition);\r\n      const targetX = radius * Math.cos(angle);\r\n      const targetY = radius * Math.sin(angle);\r\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: -1, duration: 0.5, ease: 'power3.out' });\r\n      gsap.to(camera.position, { x: mouseXPosition * 0.1, y: mouseYPosition * 0.1, z: 5, duration: 0.6, ease: 'power3.out' });\r\n    }, 60);\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    // ✅ Move animate inside onLoad\r\n    const animate = () => {\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    loadingManager.onLoad = () => {\r\n      console.log(\"Loading complete!\");\r\n      setIsLoading(false);\r\n\r\n      // Animate scale pop-in\r\n      gsap.fromTo(bigSphere.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\r\n      gsap.fromTo(smallSphere.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\r\n\r\n      // ✅ Start rendering only after loading\r\n      animate();\r\n    };\r\n\r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      matCapTextureBig.dispose();\r\n      matCapTextureSmall.dispose();\r\n      bigSphereGeometry.dispose();\r\n      smallSphereGeometry.dispose();\r\n      bigSphere.material.dispose();\r\n      smallSphere.material.dispose();\r\n      scene.clear();\r\n      renderer.dispose();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {isLoading && (\r\n        <div className=\"loading-screen\">\r\n          <h3>Loading...</h3>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBG;\r\n"],"names":["TitleBG","sceneRef","useRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","isLoading","setIsLoading","useState","useEffect","scene","THREE","aspect","window","innerWidth","innerHeight","camera","renderer","antialias","preserveDrawingBuffer","alpha","setSize","setClearColor","outputEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","textureLoader","matCapTextureBig","load","matCapTextureSmall","wrapS","wrapT","shaderMaterialBig","uniforms","tMatCap","type","value","vertexShader","fragmentShader","shaderMaterialSmall","bigSphereGeometry","smallSphereGeometry","bigSphere","smallSphere","sphereGroup","add","handleMouseMove","throttle","event","mouseXPosition","clientX","mouseYPosition","clientY","angle","Math","atan2","targetX","cos","targetY","sin","gsap","to","x","y","duration","ease","addEventListener","onWindowResize","left","right","top","bottom","updateProjectionMatrix","animate","render","requestAnimationFrame","onLoad","console","log","fromTo","scale","removeEventListener","dispose","material","clear","React","className"],"sourceRoot":""}