{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash'; // Throttling library\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for lighting\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Textures and Materials (with lower segment counts for performance)\n    const textureLoader = new THREE.TextureLoader();\n    const bigSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\n    const smallSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\n      map: bigSphereTexture,\n      metalness: 0.1,\n      roughness: 0.85,\n      envMapIntensity: 0.4\n    });\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0xFF5349,\n      // Orange color\n      emissive: 0xFF6A00,\n      // Glow color (same as the material color)\n      emissiveIntensity: 0.8,\n      // Adjust the intensity of the glow\n      metalness: 0.1,\n      // Set metalness to 0.1 for a slightly matte finish\n      roughness: 0.85,\n      // Roughness for a non-shiny surface\n      envMapIntensity: 0.4 // For environment map reflection\n    });\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Lower segments\n\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1, 0, 0);\n    scene.add(bigSphere, smallSphere);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Additional layers (for parallax effect)\n    const farLayer = new THREE.Mesh(new THREE.BoxGeometry(10, 10, 10), new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    }));\n    farLayer.position.z = -15;\n    scene.add(farLayer);\n    const midLayer = new THREE.Mesh(new THREE.BoxGeometry(5, 5, 5), new THREE.MeshBasicMaterial({\n      color: 0xff0000\n    }));\n    midLayer.position.z = -10;\n    scene.add(midLayer);\n    const nearLayer = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2), new THREE.MeshBasicMaterial({\n      color: 0x0000ff\n    }));\n    nearLayer.position.z = -5;\n    scene.add(nearLayer);\n\n    // Lights (Reduce intensity or remove shadows if not needed)\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.1);\n    directionalLight1.position.set(3, 3, 3);\n    directionalLight1.target.position.set(0, 0, 0);\n    scene.add(directionalLight1, directionalLight1.target);\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight2.position.set(-3, -3, 3);\n    directionalLight2.target.position.set(0, 0, 0);\n    scene.add(directionalLight2, directionalLight2.target);\n\n    // Handle Mouse Move with Throttle (Advanced Parallax Effect)\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = -(event.clientY / window.innerHeight) * 2 + 1; // Inverted Y for correct direction\n\n      const radius = 1; // You can adjust this for a bigger or smaller movement range\n\n      // Calculate the target position for the small sphere (for the cursor interaction)\n      const targetX = radius * Math.cos(mouseXPosition * Math.PI);\n      const targetY = radius * Math.sin(mouseYPosition * Math.PI);\n      const targetZ = -1;\n\n      // Animate the small sphere position based on the cursor position\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n\n      // Apply parallax to layers\n      const farLayerSpeed = 0.3;\n      const midLayerSpeed = 0.6;\n      const nearLayerSpeed = 1;\n\n      // Adjust layer positions with different speeds for parallax effect\n      gsap.to(farLayer.position, {\n        x: mouseXPosition * farLayerSpeed,\n        y: mouseYPosition * farLayerSpeed,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n      gsap.to(midLayer.position, {\n        x: mouseXPosition * midLayerSpeed,\n        y: mouseYPosition * midLayerSpeed,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n      gsap.to(nearLayer.position, {\n        x: mouseXPosition * nearLayerSpeed,\n        y: mouseYPosition * nearLayerSpeed,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n\n      // Apply a tilt effect to the camera with varying intensity\n      const tiltX = mouseYPosition * 0.1;\n      const tiltY = mouseXPosition * 0.1;\n      gsap.to(camera.rotation, {\n        x: tiltX,\n        y: tiltY,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 20); // Throttle to 20ms\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\n    composerRef.current = composer;\n\n    // Animation Loop\n    const animate = () => {\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"PQQqMr0DFQTW5vKSRBQfYl+2+4U=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","gsap","throttle","EffectComposer","RenderPass","FilmPass","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","textureLoader","TextureLoader","bigSphereTexture","smallSphereTexture","bigSphereMaterial","MeshStandardMaterial","map","metalness","roughness","envMapIntensity","smallSphereMaterial","color","emissive","emissiveIntensity","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","set","add","farLayer","BoxGeometry","MeshBasicMaterial","midLayer","nearLayer","directionalLight1","DirectionalLight","target","directionalLight2","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","radius","targetX","Math","cos","PI","targetY","sin","targetZ","to","x","y","duration","ease","farLayerSpeed","midLayerSpeed","nearLayerSpeed","tiltX","tiltY","rotation","addEventListener","composer","addPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\nimport { gsap } from 'gsap';\r\nimport { throttle } from 'lodash';  // Throttling library\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture;\r\n      scene.background = new THREE.Color(0x000000);\r\n    });\r\n\r\n    // Textures and Materials (with lower segment counts for performance)\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const bigSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\r\n    const smallSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\r\n\r\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\r\n      map: bigSphereTexture, metalness: 0.1, roughness: 0.85, envMapIntensity: 0.4\r\n    });\r\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0xFF5349, // Orange color\r\n      emissive: 0xFF6A00, // Glow color (same as the material color)\r\n      emissiveIntensity: 0.8, // Adjust the intensity of the glow\r\n      metalness: 0.1, // Set metalness to 0.1 for a slightly matte finish\r\n      roughness: 0.85, // Roughness for a non-shiny surface\r\n      envMapIntensity: 0.4 // For environment map reflection\r\n    });\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Lower segments\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Lower segments\r\n\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(1, 0, 0);\r\n    scene.add(bigSphere, smallSphere);\r\n    bigSphereRef.current = bigSphere;\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Additional layers (for parallax effect)\r\n    const farLayer = new THREE.Mesh(new THREE.BoxGeometry(10, 10, 10), new THREE.MeshBasicMaterial({ color: 0x00ff00 }));\r\n    farLayer.position.z = -15;\r\n    scene.add(farLayer);\r\n\r\n    const midLayer = new THREE.Mesh(new THREE.BoxGeometry(5, 5, 5), new THREE.MeshBasicMaterial({ color: 0xff0000 }));\r\n    midLayer.position.z = -10;\r\n    scene.add(midLayer);\r\n\r\n    const nearLayer = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2), new THREE.MeshBasicMaterial({ color: 0x0000ff }));\r\n    nearLayer.position.z = -5;\r\n    scene.add(nearLayer);\r\n\r\n    // Lights (Reduce intensity or remove shadows if not needed)\r\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.1);\r\n    directionalLight1.position.set(3, 3, 3);\r\n    directionalLight1.target.position.set(0, 0, 0);\r\n    scene.add(directionalLight1, directionalLight1.target);\r\n\r\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    directionalLight2.position.set(-3, -3, 3);\r\n    directionalLight2.target.position.set(0, 0, 0);\r\n    scene.add(directionalLight2, directionalLight2.target);\r\n\r\n    // Handle Mouse Move with Throttle (Advanced Parallax Effect)\r\n    const handleMouseMove = throttle((event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\r\n      const mouseYPosition = -(event.clientY / window.innerHeight) * 2 + 1; // Inverted Y for correct direction\r\n\r\n      const radius = 1; // You can adjust this for a bigger or smaller movement range\r\n\r\n      // Calculate the target position for the small sphere (for the cursor interaction)\r\n      const targetX = radius * Math.cos(mouseXPosition * Math.PI);\r\n      const targetY = radius * Math.sin(mouseYPosition * Math.PI);\r\n      const targetZ = -1;\r\n\r\n      // Animate the small sphere position based on the cursor position\r\n      gsap.to(smallSphere.position, {\r\n        x: targetX,\r\n        y: targetY,\r\n        z: targetZ,\r\n        duration: 0.5,\r\n        ease: 'power3.out',\r\n      });\r\n\r\n      // Apply parallax to layers\r\n      const farLayerSpeed = 0.3;\r\n      const midLayerSpeed = 0.6;\r\n      const nearLayerSpeed = 1;\r\n\r\n      // Adjust layer positions with different speeds for parallax effect\r\n      gsap.to(farLayer.position, {\r\n        x: mouseXPosition * farLayerSpeed,\r\n        y: mouseYPosition * farLayerSpeed,\r\n        duration: 0.5,\r\n        ease: 'power3.out',\r\n      });\r\n\r\n      gsap.to(midLayer.position, {\r\n        x: mouseXPosition * midLayerSpeed,\r\n        y: mouseYPosition * midLayerSpeed,\r\n        duration: 0.5,\r\n        ease: 'power3.out',\r\n      });\r\n\r\n      gsap.to(nearLayer.position, {\r\n        x: mouseXPosition * nearLayerSpeed,\r\n        y: mouseYPosition * nearLayerSpeed,\r\n        duration: 0.5,\r\n        ease: 'power3.out',\r\n      });\r\n\r\n      // Apply a tilt effect to the camera with varying intensity\r\n      const tiltX = mouseYPosition * 0.1;\r\n      const tiltY = mouseXPosition * 0.1;\r\n\r\n      gsap.to(camera.rotation, {\r\n        x: tiltX,\r\n        y: tiltY,\r\n        duration: 0.5,\r\n        ease: 'power3.out',\r\n      });\r\n    }, 20); // Throttle to 20ms\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Post-processing setup\r\n    const composer = new EffectComposer(renderer);\r\n    composer.addPass(new RenderPass(scene, camera));\r\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\r\n    composerRef.current = composer;\r\n\r\n    // Animation Loop\r\n    const animate = () => {\r\n      composer.render();\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize Event Listener\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}