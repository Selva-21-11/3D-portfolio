{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { DepthOfFieldPass } from 'three/examples/jsm/postprocessing/DepthOfFieldPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect,\n    // left\n    2 * aspect,\n    // right\n    2,\n    // top\n    -2,\n    // bottom\n    0.1,\n    // near\n    1000 // far\n    );\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for lighting\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Big Sphere (Stationary) with more realistic material\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0x111111,\n      metalness: 0.3,\n      // Slightly more reflective\n      roughness: 0.6,\n      // Matte but reflective\n      clearcoat: 0.4,\n      // Polished effect\n      clearcoatRoughness: 0.2,\n      emissive: 0x111111 // Slight emissive glow to make it stand out\n    });\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    bigSphereRef.current = bigSphere;\n\n    // Small Sphere (Will rotate around Z-axis) with more realistic material\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0xff0000,\n      // Red color\n      metalness: 0.5,\n      // Some shininess\n      roughness: 0.4,\n      // Slightly less rough for a shiny effect\n      clearcoat: 0.8,\n      // Extra gloss for a polished finish\n      clearcoatRoughness: 0.2,\n      emissive: 0xff0000 // Glowing red effect\n    });\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\n    scene.add(smallSphere);\n    smallSphereRef.current = smallSphere;\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n\n    // Bloom Pass for enhanced glow effect\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5,\n    // Strength of the bloom effect\n    0.4,\n    // Radius of the bloom effect\n    0.85 // Threshold for bloom effect\n    );\n    composer.addPass(bloomPass);\n\n    // Depth of Field pass for a blurred background effect\n    const dofPass = new DepthOfFieldPass(camera, {\n      focus: 1.0,\n      // Focus point (1.0 = in-focus center)\n      aperture: 0.025,\n      // Aperture size, adjust for blur amount\n      maxBlur: 0.015 // Maximum blur radius\n    });\n    composer.addPass(dofPass);\n\n    // Film Pass for a cinematic, film-like effect\n    const filmPass = new FilmPass(0.35, 0.75, 2048, false);\n    composer.addPass(filmPass);\n\n    // FXAA Shader for smoother edges (anti-aliasing)\n    const fxaaPass = new ShaderPass(FXAAShader);\n    fxaaPass.uniforms['resolution'].value.set(1 / window.innerWidth, 1 / window.innerHeight);\n    composer.addPass(fxaaPass);\n    const handleMouseMove = event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1; // Normalized X-axis (-1 to 1)\n\n      // GSAP animation for smooth movement\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\n\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\n      const radius = 1; // New smaller radius for the small sphere's orbit\n\n      // Calculate the new position based on the reduced radius\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\n\n      // Move the small sphere backwards in the Z-axis (negative Z value)\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\n\n      // Using GSAP to animate the small sphere's movement in a smooth manner\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        // Move in Z-axis to make it go backwards\n        duration: 0.5,\n        // Smooth transition duration\n        ease: 'power3.out' // Easing for smoothness\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation Loop\n    const animate = () => {\n      if (bigSphereRef.current) {\n        // The big sphere stays stationary, but you can rotate it if needed\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere (optional)\n      }\n\n      // Update the composer (post-processing effects)\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      composer.setSize(window.innerWidth, window.innerHeight); // Adjust for post-processing\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"PQQqMr0DFQTW5vKSRBQfYl+2+4U=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","gsap","EffectComposer","RenderPass","UnrealBloomPass","DepthOfFieldPass","FilmPass","ShaderPass","FXAAShader","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","bigSphereMaterial","MeshStandardMaterial","color","metalness","roughness","clearcoat","clearcoatRoughness","emissive","bigSphereGeometry","SphereGeometry","bigSphere","Mesh","add","smallSphereMaterial","smallSphereGeometry","smallSphere","set","composer","renderPass","addPass","bloomPass","Vector2","dofPass","focus","aperture","maxBlur","filmPass","fxaaPass","uniforms","value","handleMouseMove","event","mouseXPosition","clientX","angle","Math","PI","radius","targetX","cos","targetY","sin","targetZ","to","x","y","duration","ease","addEventListener","animate","rotation","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\nimport { gsap } from 'gsap';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\r\nimport { DepthOfFieldPass } from 'three/examples/jsm/postprocessing/DepthOfFieldPass';\r\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, // left\r\n      2 * aspect,  // right\r\n      2,           // top\r\n      -2,          // bottom\r\n      0.1,          // near\r\n      1000          // far\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture;\r\n      scene.background = new THREE.Color(0x000000);\r\n    });\r\n\r\n    // Big Sphere (Stationary) with more realistic material\r\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x111111, \r\n      metalness: 0.3,   // Slightly more reflective\r\n      roughness: 0.6,   // Matte but reflective\r\n      clearcoat: 0.4,   // Polished effect\r\n      clearcoatRoughness: 0.2,\r\n      emissive: 0x111111,  // Slight emissive glow to make it stand out\r\n    });\r\n\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n    bigSphereRef.current = bigSphere;\r\n\r\n    // Small Sphere (Will rotate around Z-axis) with more realistic material\r\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0xff0000,   // Red color\r\n      metalness: 0.5,    // Some shininess\r\n      roughness: 0.4,    // Slightly less rough for a shiny effect\r\n      clearcoat: 0.8,    // Extra gloss for a polished finish\r\n      clearcoatRoughness: 0.2,\r\n      emissive: 0xff0000, // Glowing red effect\r\n    });\r\n\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\r\n    scene.add(smallSphere);\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Post-processing setup\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    // Bloom Pass for enhanced glow effect\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n      1.5, // Strength of the bloom effect\r\n      0.4, // Radius of the bloom effect\r\n      0.85 // Threshold for bloom effect\r\n    );\r\n    composer.addPass(bloomPass);\r\n\r\n    // Depth of Field pass for a blurred background effect\r\n    const dofPass = new DepthOfFieldPass(camera, {\r\n      focus: 1.0,     // Focus point (1.0 = in-focus center)\r\n      aperture: 0.025, // Aperture size, adjust for blur amount\r\n      maxBlur: 0.015   // Maximum blur radius\r\n    });\r\n    composer.addPass(dofPass);\r\n\r\n    // Film Pass for a cinematic, film-like effect\r\n    const filmPass = new FilmPass(0.35, 0.75, 2048, false);\r\n    composer.addPass(filmPass);\r\n\r\n    // FXAA Shader for smoother edges (anti-aliasing)\r\n    const fxaaPass = new ShaderPass(FXAAShader);\r\n    fxaaPass.uniforms['resolution'].value.set(1 / window.innerWidth, 1 / window.innerHeight);\r\n    composer.addPass(fxaaPass);\r\n\r\n    const handleMouseMove = (event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1; // Normalized X-axis (-1 to 1)\r\n    \r\n      // GSAP animation for smooth movement\r\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\r\n    \r\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\r\n      const radius = 1; // New smaller radius for the small sphere's orbit\r\n    \r\n      // Calculate the new position based on the reduced radius\r\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\r\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\r\n    \r\n      // Move the small sphere backwards in the Z-axis (negative Z value)\r\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\r\n    \r\n      // Using GSAP to animate the small sphere's movement in a smooth manner\r\n      gsap.to(smallSphere.position, {\r\n        x: targetX,\r\n        y: targetY,\r\n        z: targetZ, // Move in Z-axis to make it go backwards\r\n        duration: 0.5, // Smooth transition duration\r\n        ease: 'power3.out', // Easing for smoothness\r\n      });\r\n    };\r\n    \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Animation Loop\r\n    const animate = () => {\r\n      if (bigSphereRef.current) {\r\n        // The big sphere stays stationary, but you can rotate it if needed\r\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere (optional)\r\n      }\r\n\r\n      // Update the composer (post-processing effects)\r\n      composer.render();\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize Event Listener\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      composer.setSize(window.innerWidth, window.innerHeight); // Adjust for post-processing\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}