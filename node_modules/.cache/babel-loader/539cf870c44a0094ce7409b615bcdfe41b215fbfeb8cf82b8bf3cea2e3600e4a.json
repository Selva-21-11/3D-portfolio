{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Create MatCap texture and materials\n    const textureLoader = new THREE.TextureLoader();\n    const matCapTexture = textureLoader.load('/assets/mattext.png');\n    const matCapMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matCapTexture\n    });\n\n    // Create spheres\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Throttle mouse events\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = event.clientY / window.innerHeight * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 20);\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Set up post-processing effects\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false));\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Handle window resizing\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Once everything is set up, mark as rendered\n    setIsRendered(true);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      scene.clear();\n    };\n  }, []); // Empty dependency array ensures this runs once after initial mount\n};\n_s(TitleBG, \"PQQqMr0DFQTW5vKSRBQfYl+2+4U=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","gsap","throttle","EffectComposer","RenderPass","FilmPass","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","textureLoader","TextureLoader","matCapTexture","load","matCapMaterial","MeshMatcapMaterial","matcap","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","sphereGroup","Group","add","ambientLight","AmbientLight","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","angleX","Math","PI","angleY","radius","targetX","cos","targetY","sin","targetZ","to","x","y","duration","ease","addEventListener","composer","addPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","setIsRendered","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\n\nconst TitleBG = () => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n  \n    // Create MatCap texture and materials\n    const textureLoader = new THREE.TextureLoader();\n    const matCapTexture = textureLoader.load('/assets/mattext.png');\n    const matCapMaterial = new THREE.MeshMatcapMaterial({ matcap: matCapTexture });\n  \n    // Create spheres\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n  \n    // Group the spheres\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n  \n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n  \n    // Add ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n  \n    // Throttle mouse events\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n  \n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n  \n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: targetZ, duration: 0.5, ease: 'power3.out' });\n    }, 20);\n  \n    window.addEventListener('mousemove', handleMouseMove);\n  \n    // Set up post-processing effects\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false));\n    composerRef.current = composer;\n  \n    // Animation loop\n    const animate = () => {\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n  \n    // Handle window resizing\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n  \n    // Once everything is set up, mark as rendered\n    setIsRendered(true);\n  \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      scene.clear();\n    };\n  }, []);  // Empty dependency array ensures this runs once after initial mount\n  \n};\n\nexport default TitleBG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}