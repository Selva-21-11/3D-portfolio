{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { DepthOfFieldPass } from 'three/examples/jsm/postprocessing/DepthOfFieldPass';\nimport { VignettePass } from 'three/examples/jsm/postprocessing/VignettePass';\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect,\n    // left\n    2 * aspect,\n    // right\n    2,\n    // top\n    -2,\n    // bottom\n    0.1,\n    // near\n    1000 // far\n    );\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for lighting\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Big Sphere (Stationary) with Shiny Matte Material\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0x000000,\n      metalness: 0.1,\n      roughness: 0.7 // Matte look\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    bigSphereRef.current = bigSphere;\n\n    // Small Sphere (Will rotate around Z-axis) with Shiny Matte Material\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0xff0000,\n      metalness: 0.1,\n      roughness: 0.7,\n      // Matte look\n      clearcoat: 0.35,\n      clearcoatRoughness: 0.3\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\n    scene.add(smallSphere);\n    smallSphereRef.current = smallSphere;\n\n    // Set up post-processing\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n\n    // Add BloomPass for bloom effect\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5,\n    // Strength of the bloom effect\n    0.4,\n    // Radius of the bloom effect\n    0.85 // Threshold for bloom\n    );\n    composer.addPass(bloomPass);\n\n    // Add DepthOfField for realistic focus and blur\n    const dofPass = new DepthOfFieldPass();\n    composer.addPass(dofPass);\n\n    // Add Vignette for a subtle focus effect\n    const vignettePass = new VignettePass();\n    composer.addPass(vignettePass);\n\n    // Add SSAO (Screen Space Ambient Occlusion) for enhanced shadows and depth\n    const ssaoPass = new SSAOPass(scene, camera);\n    composer.addPass(ssaoPass);\n    const handleMouseMove = event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1; // Normalized X-axis (-1 to 1)\n\n      // GSAP animation for smooth movement\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\n\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\n      const radius = 1; // New smaller radius for the small sphere's orbit\n\n      // Calculate the new position based on the reduced radius\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\n\n      // Move the small sphere backwards in the Z-axis (negative Z value)\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\n\n      // Using GSAP to animate the small sphere's movement in a smooth manner\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        // Move in Z-axis to make it go backwards\n        duration: 0.5,\n        // Smooth transition duration\n        ease: 'power3.out' // Easing for smoothness\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation Loop\n    const animate = () => {\n      if (bigSphereRef.current) {\n        // The big sphere stays stationary, but you can rotate it if needed\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere (optional)\n      }\n      composerRef.current.render(); // Use composerRef for rendering with post-processing\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"PQQqMr0DFQTW5vKSRBQfYl+2+4U=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","gsap","EffectComposer","RenderPass","UnrealBloomPass","DepthOfFieldPass","VignettePass","SSAOPass","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshStandardMaterial","color","metalness","roughness","bigSphere","Mesh","add","smallSphereGeometry","smallSphereMaterial","clearcoat","clearcoatRoughness","smallSphere","set","composer","renderPass","addPass","bloomPass","Vector2","dofPass","vignettePass","ssaoPass","handleMouseMove","event","mouseXPosition","clientX","angle","Math","PI","radius","targetX","cos","targetY","sin","targetZ","to","x","y","duration","ease","addEventListener","animate","rotation","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\nimport { gsap } from 'gsap';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\r\nimport { DepthOfFieldPass } from 'three/examples/jsm/postprocessing/DepthOfFieldPass';\r\nimport { VignettePass } from 'three/examples/jsm/postprocessing/VignettePass';\r\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, // left\r\n      2 * aspect,  // right\r\n      2,           // top\r\n      -2,          // bottom\r\n      0.1,         // near\r\n      1000         // far\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture;\r\n      scene.background = new THREE.Color(0x000000);\r\n    });\r\n\r\n    // Big Sphere (Stationary) with Shiny Matte Material\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x000000,\r\n      metalness: 0.1,\r\n      roughness: 0.7, // Matte look\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n    bigSphereRef.current = bigSphere;\r\n\r\n    // Small Sphere (Will rotate around Z-axis) with Shiny Matte Material\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0xff0000,\r\n      metalness: 0.1,\r\n      roughness: 0.7, // Matte look\r\n      clearcoat: 0.35,\r\n      clearcoatRoughness: 0.3,\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\r\n    scene.add(smallSphere);\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Set up post-processing\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    // Add BloomPass for bloom effect\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n      1.5, // Strength of the bloom effect\r\n      0.4, // Radius of the bloom effect\r\n      0.85 // Threshold for bloom\r\n    );\r\n    composer.addPass(bloomPass);\r\n\r\n    // Add DepthOfField for realistic focus and blur\r\n    const dofPass = new DepthOfFieldPass();\r\n    composer.addPass(dofPass);\r\n\r\n    // Add Vignette for a subtle focus effect\r\n    const vignettePass = new VignettePass();\r\n    composer.addPass(vignettePass);\r\n\r\n    // Add SSAO (Screen Space Ambient Occlusion) for enhanced shadows and depth\r\n    const ssaoPass = new SSAOPass(scene, camera);\r\n    composer.addPass(ssaoPass);\r\n\r\n    const handleMouseMove = (event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1; // Normalized X-axis (-1 to 1)\r\n\r\n      // GSAP animation for smooth movement\r\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\r\n\r\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\r\n      const radius = 1; // New smaller radius for the small sphere's orbit\r\n\r\n      // Calculate the new position based on the reduced radius\r\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\r\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\r\n\r\n      // Move the small sphere backwards in the Z-axis (negative Z value)\r\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\r\n\r\n      // Using GSAP to animate the small sphere's movement in a smooth manner\r\n      gsap.to(smallSphere.position, {\r\n        x: targetX,\r\n        y: targetY,\r\n        z: targetZ, // Move in Z-axis to make it go backwards\r\n        duration: 0.5, // Smooth transition duration\r\n        ease: 'power3.out', // Easing for smoothness\r\n      });\r\n    };\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Animation Loop\r\n    const animate = () => {\r\n      if (bigSphereRef.current) {\r\n        // The big sphere stays stationary, but you can rotate it if needed\r\n        bigSphereRef.current.rotation.y += 0.01; // Rotate big sphere (optional)\r\n      }\r\n      composerRef.current.render(); // Use composerRef for rendering with post-processing\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize Event Listener\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}