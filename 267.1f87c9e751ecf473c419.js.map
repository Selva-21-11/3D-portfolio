{"version":3,"file":"267.1f87c9e751ecf473c419.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\n\nconst TitleBG = () => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\n    );\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true,\n      alpha: true,\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.outputEncoding = THREE.LinearSRGBColorSpace;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load manager\n    const loadingManager = new THREE.LoadingManager();\n\n    // Load textures\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTextureBig = textureLoader.load('./assets/mattext.webp');\n    const matCapTextureSmall = textureLoader.load('./assets/mattext.webp');\n    matCapTextureBig.wrapS = matCapTextureBig.wrapT = THREE.ClampToEdgeWrapping;\n    matCapTextureSmall.wrapS = matCapTextureSmall.wrapT = THREE.ClampToEdgeWrapping;\n\n    // Shader Materials\n    const shaderMaterialBig = new THREE.ShaderMaterial({\n      uniforms: {\n        tMatCap: { type: 't', value: matCapTextureBig },\n      },\n      vertexShader: `\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n\n        void main() {\n          vNormal = normalize(normalMatrix * normal);\n          vPosition = position;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform sampler2D tMatCap;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n\n        void main() {\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\n          gl_FragColor = vec4(matCapColor, 1.0);\n        }\n      `,\n    });\n\n    const shaderMaterialSmall = new THREE.ShaderMaterial({\n      uniforms: {\n        tMatCap: { type: 't', value: matCapTextureSmall },\n      },\n      vertexShader: shaderMaterialBig.vertexShader,\n      fragmentShader: shaderMaterialBig.fragmentShader,\n    });\n\n    // Sphere geometry\n    const bigSphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, shaderMaterialBig);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, shaderMaterialSmall);\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n      const radius = 1.6;\n      const angle = Math.atan2(mouseYPosition, mouseXPosition);\n      const targetX = radius * Math.cos(angle);\n      const targetY = radius * Math.sin(angle);\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: -1, duration: 0.5, ease: 'power3.out' });\n      gsap.to(camera.position, { x: mouseXPosition * 0.1, y: mouseYPosition * 0.1, z: 5, duration: 0.6, ease: 'power3.out' });\n    }, 60);\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // ✅ Move animate inside onLoad\n    const animate = () => {\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Animate scale pop-in\n      gsap.fromTo(bigSphere.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      gsap.fromTo(smallSphere.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n\n      // ✅ Start rendering only after loading\n      animate();\n    };\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      matCapTextureBig.dispose();\n      matCapTextureSmall.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n      scene.clear();\n      renderer.dispose();\n    };\n  }, []);\n\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"loading-screen\">\n          <h3>Loading...</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitleBG;\n"],"names":["TitleBG","sceneRef","useRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","isLoading","setIsLoading","useState","useEffect","scene","THREE","aspect","window","innerWidth","innerHeight","camera","renderer","antialias","preserveDrawingBuffer","alpha","setSize","setClearColor","outputEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","textureLoader","matCapTextureBig","load","matCapTextureSmall","wrapS","wrapT","shaderMaterialBig","uniforms","tMatCap","type","value","vertexShader","fragmentShader","shaderMaterialSmall","bigSphereGeometry","smallSphereGeometry","bigSphere","smallSphere","sphereGroup","add","handleMouseMove","throttle","event","mouseXPosition","clientX","mouseYPosition","clientY","angle","Math","atan2","targetX","cos","targetY","sin","gsap","to","x","y","duration","ease","addEventListener","onWindowResize","left","right","top","bottom","updateProjectionMatrix","animate","render","requestAnimationFrame","onLoad","console","log","fromTo","scale","removeEventListener","dispose","material","clear","React","className"],"sourceRoot":""}