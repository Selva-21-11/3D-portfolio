{"version":3,"file":"bundle.cf01d26e60bb2e7f643c.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\n\nconst TitleBG = () => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.LinearSRGBColorSpace;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Set up the loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n    };\n\n    // Load MatCap textures\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTextureBig = textureLoader.load('/assets/mattext.png'); // Replace with your matcap texture\n    const matCapTextureSmall = textureLoader.load('/assets/mattext.png'); // Replace with your matcap texture\n\n    // Set texture wrapping\n    matCapTextureBig.wrapS = matCapTextureBig.wrapT = THREE.ClampToEdgeWrapping;\n    matCapTextureSmall.wrapS = matCapTextureSmall.wrapT = THREE.ClampToEdgeWrapping;\n\n    const shaderMaterialBig = new THREE.ShaderMaterial({\n      uniforms: {\n        tMatCap: { type: 't', value: matCapTextureBig },\n      },\n      vertexShader: `\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vNormal = normalize(normalMatrix * normal);\n          vPosition = position;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform sampler2D tMatCap;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\n          gl_FragColor = vec4(matCapColor, 1.0);\n        }\n      `,\n    });\n    \n    // Same change for the small sphere material:\n    const shaderMaterialSmall = new THREE.ShaderMaterial({\n      uniforms: {\n        tMatCap: { type: 't', value: matCapTextureSmall },\n      },\n      vertexShader: `\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vNormal = normalize(normalMatrix * normal);\n          vPosition = position;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      `,\n      fragmentShader: `\n        uniform sampler2D tMatCap;\n        varying vec3 vNormal;\n        varying vec3 vPosition;\n    \n        void main() {\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\n          gl_FragColor = vec4(matCapColor, 1.0);\n        }\n      `,\n    });\n\n    // Create sphere geometries\n    const bigSphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n\n    // Create meshes with ShaderMaterial\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, shaderMaterialBig);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, shaderMaterialSmall);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Adjusted throttle for mouse events to reduce frequency\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n\n      // Reduced movement intensity for the parallax effect\n      const parallaxX = mouseXPosition * 0.1;  // Reduced intensity\n      const parallaxY = mouseYPosition * 0.1;  // Reduced intensity\n\n      // Move the camera or background more subtly based on mouse position\n      gsap.to(camera.position, { x: parallaxX, y: parallaxY, z: 5, duration: 0.6, ease: 'power3.out' });\n\n      const radius = 1.5;\n      const targetX = radius * Math.cos(mouseXPosition * Math.PI);\n      const targetY = radius * Math.sin(mouseYPosition * Math.PI);\n\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: -1, duration: 0.5, ease: 'power3.out' });\n    }, 100);\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation loop\n    const animate = () => {\n      if (!isLoading) {\n        renderer.render(scene, camera);\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup function (unload)\n    const unload = () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Dispose of materials, geometries, and textures\n      matCapTextureBig.dispose();\n      matCapTextureSmall.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n\n      // Clear scene\n      scene.clear();\n      renderer.dispose();\n    };\n\n    // Call unload function on component unmount\n    return () => {\n      unload();\n    };\n  }, [isLoading]);\n\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"loading-screen\">\n          <h3>Loading...</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitleBG;\n"],"names":["TitleBG","sceneRef","useRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","isLoading","setIsLoading","useState","useEffect","scene","THREE","aspect","window","innerWidth","innerHeight","camera","renderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","onStart","console","log","onLoad","gsap","fromTo","scale","x","y","duration","ease","textureLoader","matCapTextureBig","load","matCapTextureSmall","wrapS","wrapT","shaderMaterialBig","uniforms","tMatCap","type","value","vertexShader","fragmentShader","shaderMaterialSmall","bigSphereGeometry","smallSphereGeometry","bigSphere","smallSphere","sphereGroup","add","handleMouseMove","throttle","event","mouseXPosition","clientX","mouseYPosition","clientY","parallaxX","parallaxY","to","targetX","Math","cos","PI","targetY","sin","addEventListener","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","material","clear","React","className"],"sourceRoot":""}