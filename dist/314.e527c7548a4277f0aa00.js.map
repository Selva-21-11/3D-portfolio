{"version":3,"file":"314.e527c7548a4277f0aa00.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/BackgroundLight.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport gsap from \"gsap\";\r\n\r\nconst BackgroundLight = ({\r\n  initialX = 1.4,\r\n  color = { r: 1.0, g: 0.8, b: 0.4 },\r\n  glowRadiusX = 0.35, // Horizontal glow radius\r\n  glowRadiusY = 0.2, // Vertical glow radius (smaller for elliptical shape)\r\n  intensity = 2.0,\r\n  opacity = 0,\r\n  wiggleAmount = 70,\r\n  verticalWiggleAmount = 30,\r\n  fadeDuration = 3,\r\n  wiggleSpeed = 5,\r\n  lightDirection = 1.1,\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const gl = canvas.getContext(\"webgl\");\r\n\r\n    if (!gl) {\r\n      console.error(\"WebGL not supported\");\r\n      return;\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      gl.viewport(0, 0, canvas.width, canvas.height);\r\n    };\r\n\r\n    resizeCanvas();\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n\r\n    // Vertex Shader\r\n    const vertexShaderSource = `\r\n      attribute vec2 position;\r\n      void main() {\r\n        gl_Position = vec4(position, 0.0, 1.0);\r\n      }\r\n    `;\r\n\r\n    // Fragment Shader - Elliptical Light with Soft Diffusion\r\n    const fragmentShaderSource = `\r\n      precision mediump float;\r\n      uniform vec2 u_resolution;\r\n      uniform vec2 u_lightPos;\r\n      uniform float u_glowRadiusX;\r\n      uniform float u_glowRadiusY;\r\n      uniform float u_intensity;\r\n      uniform float u_opacity;\r\n      \r\n      void main() {\r\n        vec2 uv = gl_FragCoord.xy / u_resolution;\r\n        vec2 lightDir = (gl_FragCoord.xy - u_lightPos) / vec2(u_glowRadiusX, u_glowRadiusY); // Normalize ellipse shape\r\n        float dist = length(lightDir); \r\n\r\n        // Soft Glow Effect\r\n        float glow = smoothstep(0.9, 0.2, dist);\r\n        glow *= exp(-dist) * u_intensity;\r\n\r\n        // Elliptical Glow Spread\r\n        float spread = exp(-pow(dist, 2.0));\r\n        float finalGlow = mix(spread, glow, 0.7); \r\n\r\n        // Apply Color and Opacity\r\n        vec3 color = vec3(${color.r}, ${color.g}, ${color.b}) * finalGlow;\r\n        gl_FragColor = vec4(color, finalGlow * u_opacity);\r\n      }\r\n    `;\r\n\r\n    // Compile Shaders\r\n    const compileShader = (type, source) => {\r\n      const shader = gl.createShader(type);\r\n      gl.shaderSource(shader, source);\r\n      gl.compileShader(shader);\r\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.error(gl.getShaderInfoLog(shader));\r\n        return null;\r\n      }\r\n      return shader;\r\n    };\r\n\r\n    const vertexShader = compileShader(gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = compileShader(gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    // Create Shader Program\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      console.error(gl.getProgramInfoLog(program));\r\n      return;\r\n    }\r\n\r\n    gl.useProgram(program);\r\n\r\n    // Fullscreen Quad\r\n    const vertices = new Float32Array([\r\n      -1, -1,   1, -1,   -1, 1,\r\n      -1, 1,    1, -1,    1, 1,\r\n    ]);\r\n\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\r\n\r\n    const position = gl.getAttribLocation(program, \"position\");\r\n    gl.enableVertexAttribArray(position);\r\n    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);\r\n\r\n    // Get Uniform Locations\r\n    const resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\r\n    const lightPosLocation = gl.getUniformLocation(program, \"u_lightPos\");\r\n    const glowRadiusXLocation = gl.getUniformLocation(program, \"u_glowRadiusX\");\r\n    const glowRadiusYLocation = gl.getUniformLocation(program, \"u_glowRadiusY\");\r\n    const intensityLocation = gl.getUniformLocation(program, \"u_intensity\");\r\n    const opacityLocation = gl.getUniformLocation(program, \"u_opacity\");\r\n\r\n    // Light properties\r\n    const lightProps = {\r\n      x: window.innerWidth * initialX,\r\n      y: window.innerHeight *0.55,\r\n      radiusX: window.innerWidth * glowRadiusX,\r\n      radiusY: window.innerHeight * glowRadiusY,\r\n      intensity: intensity,\r\n      opacity: opacity,\r\n    };\r\n\r\n    // GSAP Animation\r\n    const tl = gsap.timeline({ repeat: -1, yoyo: true });\r\n    tl.to(lightProps, {\r\n      x: window.innerWidth * lightDirection,\r\n      duration: 4.5,\r\n      ease: \"power2.out\",\r\n    });\r\n\r\n    tl.to(lightProps, {\r\n      opacity: 1,\r\n      duration: fadeDuration,\r\n      ease: \"power2.out\",\r\n    });\r\n\r\n    // Render Loop\r\n    const render = () => {\r\n      gl.uniform2f(resolutionLocation, canvas.width, canvas.height);\r\n      gl.uniform2f(lightPosLocation, lightProps.x, lightProps.y);\r\n      gl.uniform1f(glowRadiusXLocation, lightProps.radiusX);\r\n      gl.uniform1f(glowRadiusYLocation, lightProps.radiusY);\r\n      gl.uniform1f(intensityLocation, lightProps.intensity);\r\n      gl.uniform1f(opacityLocation, lightProps.opacity);\r\n\r\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n      requestAnimationFrame(render);\r\n    };\r\n\r\n    setTimeout(() => {\r\n      render();\r\n    }, 500);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeCanvas);\r\n      gl.deleteProgram(program);\r\n    };\r\n  }, [\r\n    initialX,\r\n    color,\r\n    glowRadiusX,\r\n    glowRadiusY,\r\n    intensity,\r\n    opacity,\r\n    wiggleAmount,\r\n    verticalWiggleAmount,\r\n    fadeDuration,\r\n    wiggleSpeed,\r\n    lightDirection,\r\n  ]);\r\n\r\n  return <canvas ref={canvasRef} className=\"shader-background\"></canvas>;\r\n};\r\n\r\nexport default BackgroundLight;\r\n"],"names":["_ref","initialX","color","r","g","b","glowRadiusX","glowRadiusY","intensity","opacity","wiggleAmount","verticalWiggleAmount","fadeDuration","wiggleSpeed","lightDirection","canvasRef","useRef","useEffect","canvas","current","gl","getContext","console","error","resizeCanvas","width","window","innerWidth","height","innerHeight","viewport","addEventListener","fragmentShaderSource","concat","compileShader","type","source","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","vertices","Float32Array","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","position","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","resolutionLocation","getUniformLocation","lightPosLocation","glowRadiusXLocation","glowRadiusYLocation","intensityLocation","opacityLocation","lightProps","x","y","radiusX","radiusY","tl","gsap","timeline","repeat","yoyo","to","duration","ease","render","uniform2f","uniform1f","drawArrays","TRIANGLES","requestAnimationFrame","setTimeout","removeEventListener","deleteProgram","React","ref","className"],"sourceRoot":""}