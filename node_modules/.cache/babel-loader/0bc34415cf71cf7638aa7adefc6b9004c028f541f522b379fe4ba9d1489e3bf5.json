{"ast":null,"code":"var _jsxFileName = \"F:\\\\Portfolio\\\\3D-portfolio\\\\src\\\\components\\\\TitleBG.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Set up the loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n      gsap.fromTo(smallSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n    };\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matCapTexture\n    });\n\n    // Create sphere geometries with lower detail (to optimize)\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Lower segments\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Add the GridHelper for the background/depth effect\n    const gridSize = 10; // Size of the grid\n    const divisions = 20; // Number of divisions in the grid\n    const gridHelper = new THREE.GridHelper(gridSize, divisions, 0x0000ff, 0x444444); // Color for the grid lines\n    scene.add(gridHelper);\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Adjusted throttle for mouse events to reduce frequency\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = event.clientY / window.innerHeight * 2 - 1;\n\n      // Reduced movement intensity for the parallax effect\n      const parallaxX = mouseXPosition * 0.1; // Reduced intensity\n      const parallaxY = mouseYPosition * 0.1; // Reduced intensity\n\n      // Move the camera or background more subtly based on mouse position\n      gsap.to(camera.position, {\n        x: parallaxX,\n        y: parallaxY,\n        z: 5,\n        duration: 0.6,\n        ease: 'power3.out'\n      });\n\n      // Optional: you can also move other elements for the parallax effect\n      const radius = 1;\n      const targetX = radius * Math.cos(mouseXPosition * Math.PI);\n      const targetY = radius * Math.sin(mouseYPosition * Math.PI);\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: -1,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 100); // Increased throttle for less frequent updates\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup (optimized FilmPass)\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.05, 648, false)); // Adjusted strength for less computation\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (!isLoading) {\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup function (unload)\n    const unload = () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Dispose of materials, geometries, and textures\n      matCapTexture.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n\n      // Dispose of post-processing composer\n      composerRef.current && composerRef.current.dispose();\n\n      // Clear scene\n      scene.clear();\n      renderer.dispose();\n    };\n\n    // Call unload function on component unmount\n    return () => {\n      unload();\n    };\n  }, [isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(TitleBG, \"bhGcFzZqcdM/+x5OKU2uwn5Q7fM=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","gsap","throttle","EffectComposer","RenderPass","FilmPass","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","isLoading","setIsLoading","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","LoadingManager","onStart","console","log","onLoad","fromTo","scale","x","y","duration","ease","textureLoader","TextureLoader","matCapTexture","load","matCapMaterial","MeshMatcapMaterial","matcap","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","sphereGroup","Group","add","gridSize","divisions","gridHelper","GridHelper","ambientLight","AmbientLight","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","parallaxX","parallaxY","to","radius","targetX","Math","cos","PI","targetY","sin","addEventListener","composer","addPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","unload","removeEventListener","dispose","material","clear","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\n\nconst TitleBG = () => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Set up the loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n    };\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({ matcap: matCapTexture });\n\n    // Create sphere geometries with lower detail (to optimize)\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);  // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);  // Lower segments\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Add the GridHelper for the background/depth effect\n    const gridSize = 10; // Size of the grid\n    const divisions = 20; // Number of divisions in the grid\n    const gridHelper = new THREE.GridHelper(gridSize, divisions, 0x0000ff, 0x444444); // Color for the grid lines\n    scene.add(gridHelper);\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Adjusted throttle for mouse events to reduce frequency\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n\n      // Reduced movement intensity for the parallax effect\n      const parallaxX = mouseXPosition * 0.1;  // Reduced intensity\n      const parallaxY = mouseYPosition * 0.1;  // Reduced intensity\n\n      // Move the camera or background more subtly based on mouse position\n      gsap.to(camera.position, { x: parallaxX, y: parallaxY, z: 5, duration: 0.6, ease: 'power3.out' });\n\n      // Optional: you can also move other elements for the parallax effect\n      const radius = 1;\n      const targetX = radius * Math.cos(mouseXPosition * Math.PI);\n      const targetY = radius * Math.sin(mouseYPosition * Math.PI);\n\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: -1, duration: 0.5, ease: 'power3.out' });\n    }, 100);  // Increased throttle for less frequent updates\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup (optimized FilmPass)\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.05, 648, false));  // Adjusted strength for less computation\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (!isLoading) {\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup function (unload)\n    const unload = () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Dispose of materials, geometries, and textures\n      matCapTexture.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n\n      // Dispose of post-processing composer\n      composerRef.current && composerRef.current.dispose();\n\n      // Clear scene\n      scene.clear();\n      renderer.dispose();\n    };\n\n    // Call unload function on component unmount\n    return () => {\n      unload();\n    };\n  }, [isLoading]);\n\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"loading-screen\">\n          <h3>Loading...</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitleBG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}