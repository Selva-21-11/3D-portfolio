{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'postprocessing';\nimport { RenderPass } from 'postprocessing';\nimport { UnrealBloomPass } from 'postprocessing';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const composerRef = useRef(null); // EffectComposer for post-processing\n\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n\n    // Create the big sphere (central sphere)\n    const bigGeometry = new THREE.SphereGeometry(2, 32, 32);\n    const bigMaterial = new THREE.MeshStandardMaterial({\n      color: 0x00ff00,\n      roughness: 0.5,\n      // Matte texture with smooth reflection\n      metalness: 0.5 // A little bit of reflectivity\n    });\n    const bigSphere = new THREE.Mesh(bigGeometry, bigMaterial);\n    scene.add(bigSphere);\n\n    // Create the small sphere (smaller, rotating behind the big sphere)\n    const smallGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n    const smallMaterial = new THREE.MeshStandardMaterial({\n      color: 0x0000ff,\n      roughness: 0.7,\n      metalness: 0.2\n    });\n    const smallSphere = new THREE.Mesh(smallGeometry, smallMaterial);\n    scene.add(smallSphere);\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Add lighting\n    const light = new THREE.AmbientLight(0x404040); // Ambient light\n    scene.add(light);\n\n    // Set up post-processing\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n\n    // Render pass\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n\n    // UnrealBloomPass for bloom effect (enhances lighting)\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5,\n    // Strength of the bloom\n    0.4,\n    // Radius of bloom\n    0.85 // Threshold for bloom\n    );\n    composer.addPass(bloomPass);\n\n    // Animation loop\n    const animate = () => {\n      smallSphere.rotation.y += 0.01;\n      composer.render(); // Use composer for post-processing\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      scene.remove(bigSphere, smallSphere);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TitleBG, \"w0SYJzZvUoBElA5+HhwO5CsX2LE=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","EffectComposer","RenderPass","UnrealBloomPass","Fragment","_Fragment","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cameraRef","composerRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","getElementById","appendChild","domElement","current","bigGeometry","SphereGeometry","bigMaterial","MeshStandardMaterial","color","roughness","metalness","bigSphere","Mesh","add","smallGeometry","smallMaterial","smallSphere","position","z","light","AmbientLight","composer","renderPass","addPass","bloomPass","Vector2","animate","rotation","y","render","requestAnimationFrame","dispose","remove","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { EffectComposer } from 'postprocessing';\r\nimport { RenderPass } from 'postprocessing';\r\nimport { UnrealBloomPass } from 'postprocessing';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const composerRef = useRef(null); // EffectComposer for post-processing\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    // Create the big sphere (central sphere)\r\n    const bigGeometry = new THREE.SphereGeometry(2, 32, 32);\r\n    const bigMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x00ff00,\r\n      roughness: 0.5,  // Matte texture with smooth reflection\r\n      metalness: 0.5,  // A little bit of reflectivity\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigGeometry, bigMaterial);\r\n    scene.add(bigSphere);\r\n\r\n    // Create the small sphere (smaller, rotating behind the big sphere)\r\n    const smallGeometry = new THREE.SphereGeometry(0.5, 32, 32);\r\n    const smallMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x0000ff,\r\n      roughness: 0.7,\r\n      metalness: 0.2,\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallGeometry, smallMaterial);\r\n    scene.add(smallSphere);\r\n\r\n    // Set camera position\r\n    camera.position.z = 5;\r\n\r\n    // Add lighting\r\n    const light = new THREE.AmbientLight(0x404040); // Ambient light\r\n    scene.add(light);\r\n\r\n    // Set up post-processing\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n\r\n    // Render pass\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    // UnrealBloomPass for bloom effect (enhances lighting)\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n      1.5,  // Strength of the bloom\r\n      0.4,  // Radius of bloom\r\n      0.85  // Threshold for bloom\r\n    );\r\n    composer.addPass(bloomPass);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      smallSphere.rotation.y += 0.01;\r\n      composer.render(); // Use composer for post-processing\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      scene.remove(bigSphere, smallSphere);\r\n    };\r\n  }, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}