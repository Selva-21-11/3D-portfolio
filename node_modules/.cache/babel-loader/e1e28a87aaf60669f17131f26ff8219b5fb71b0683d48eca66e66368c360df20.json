{"ast":null,"code":"import { Vector2 } from 'three';\n\n/**\r\n * Convolution shader\r\n * ported from o3d sample to WebGL / GLSL\r\n */\n\nconst ConvolutionShader = {\n  defines: {\n    'KERNEL_SIZE_FLOAT': '25.0',\n    'KERNEL_SIZE_INT': '25'\n  },\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'uImageIncrement': {\n      value: new Vector2(0.001953125, 0.0)\n    },\n    'cKernel': {\n      value: []\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform float cKernel[ KERNEL_SIZE_INT ];\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 imageCoord = vUv;\n\t\t\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\n\n\t\t\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\n\n\t\t\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\n\t\t\t\timageCoord += uImageIncrement;\n\n\t\t\t}\n\n\t\t\tgl_FragColor = sum;\n\n\t\t}`,\n  buildKernel: function (sigma) {\n    // We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n    const kMaxKernelSize = 25;\n    let kernelSize = 2 * Math.ceil(sigma * 3.0) + 1;\n    if (kernelSize > kMaxKernelSize) kernelSize = kMaxKernelSize;\n    const halfWidth = (kernelSize - 1) * 0.5;\n    const values = new Array(kernelSize);\n    let sum = 0.0;\n    for (let i = 0; i < kernelSize; ++i) {\n      values[i] = gauss(i - halfWidth, sigma);\n      sum += values[i];\n    }\n\n    // normalize the kernel\n\n    for (let i = 0; i < kernelSize; ++i) values[i] /= sum;\n    return values;\n  }\n};\nfunction gauss(x, sigma) {\n  return Math.exp(-(x * x) / (2.0 * sigma * sigma));\n}\nexport { ConvolutionShader };","map":{"version":3,"names":["Vector2","ConvolutionShader","defines","uniforms","value","vertexShader","fragmentShader","buildKernel","sigma","kMaxKernelSize","kernelSize","Math","ceil","halfWidth","values","Array","sum","i","gauss","x","exp"],"sources":["F:/Portfolio/3D-portfolio/node_modules/three/examples/jsm/shaders/ConvolutionShader.js"],"sourcesContent":["import {\r\n\tVector2\r\n} from 'three';\r\n\r\n/**\r\n * Convolution shader\r\n * ported from o3d sample to WebGL / GLSL\r\n */\r\n\r\nconst ConvolutionShader = {\r\n\r\n\tdefines: {\r\n\r\n\t\t'KERNEL_SIZE_FLOAT': '25.0',\r\n\t\t'KERNEL_SIZE_INT': '25'\r\n\r\n\t},\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'uImageIncrement': { value: new Vector2( 0.001953125, 0.0 ) },\r\n\t\t'cKernel': { value: [] }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tuniform vec2 uImageIncrement;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform float cKernel[ KERNEL_SIZE_INT ];\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tuniform vec2 uImageIncrement;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec2 imageCoord = vUv;\r\n\t\t\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\r\n\r\n\t\t\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\r\n\r\n\t\t\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\r\n\t\t\t\timageCoord += uImageIncrement;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl_FragColor = sum;\r\n\r\n\t\t}`,\r\n\r\n\tbuildKernel: function ( sigma ) {\r\n\r\n\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\r\n\r\n\t\tconst kMaxKernelSize = 25;\r\n\t\tlet kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\r\n\r\n\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\r\n\r\n\t\tconst halfWidth = ( kernelSize - 1 ) * 0.5;\r\n\r\n\t\tconst values = new Array( kernelSize );\r\n\t\tlet sum = 0.0;\r\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) {\r\n\r\n\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\r\n\t\t\tsum += values[ i ];\r\n\r\n\t\t}\r\n\r\n\t\t// normalize the kernel\r\n\r\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\r\n\r\n\t\treturn values;\r\n\r\n\t}\r\n\r\n};\r\n\r\nfunction gauss( x, sigma ) {\r\n\r\n\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\r\n\r\n}\r\n\r\nexport { ConvolutionShader };\r\n"],"mappings":"AAAA,SACCA,OAAO,QACD,OAAO;;AAEd;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAG;EAEzBC,OAAO,EAAE;IAER,mBAAmB,EAAE,MAAM;IAC3B,iBAAiB,EAAE;EAEpB,CAAC;EAEDC,QAAQ,EAAE;IAET,UAAU,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IAC3B,iBAAiB,EAAE;MAAEA,KAAK,EAAE,IAAIJ,OAAO,CAAE,WAAW,EAAE,GAAI;IAAE,CAAC;IAC7D,SAAS,EAAE;MAAEI,KAAK,EAAE;IAAG;EAExB,CAAC;EAEDC,YAAY,EAAE,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EAEHC,cAAc,EAAE,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;EAEHC,WAAW,EAAE,SAAAA,CAAWC,KAAK,EAAG;IAE/B;;IAEA,MAAMC,cAAc,GAAG,EAAE;IACzB,IAAIC,UAAU,GAAG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAAEJ,KAAK,GAAG,GAAI,CAAC,GAAG,CAAC;IAEjD,IAAKE,UAAU,GAAGD,cAAc,EAAGC,UAAU,GAAGD,cAAc;IAE9D,MAAMI,SAAS,GAAG,CAAEH,UAAU,GAAG,CAAC,IAAK,GAAG;IAE1C,MAAMI,MAAM,GAAG,IAAIC,KAAK,CAAEL,UAAW,CAAC;IACtC,IAAIM,GAAG,GAAG,GAAG;IACb,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,EAAE,EAAGO,CAAC,EAAG;MAEvCH,MAAM,CAAEG,CAAC,CAAE,GAAGC,KAAK,CAAED,CAAC,GAAGJ,SAAS,EAAEL,KAAM,CAAC;MAC3CQ,GAAG,IAAIF,MAAM,CAAEG,CAAC,CAAE;IAEnB;;IAEA;;IAEA,KAAM,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,EAAE,EAAGO,CAAC,EAAGH,MAAM,CAAEG,CAAC,CAAE,IAAID,GAAG;IAE1D,OAAOF,MAAM;EAEd;AAED,CAAC;AAED,SAASI,KAAKA,CAAEC,CAAC,EAAEX,KAAK,EAAG;EAE1B,OAAOG,IAAI,CAACS,GAAG,CAAE,EAAID,CAAC,GAAGA,CAAC,CAAE,IAAK,GAAG,GAAGX,KAAK,GAAGA,KAAK,CAAG,CAAC;AAEzD;AAEA,SAASP,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}