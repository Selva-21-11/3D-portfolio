{"version":3,"file":"267.bundle.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { gsap } from 'gsap';\r\nimport { throttle } from 'lodash';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\r\n\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n    camera.position.z = 5;\r\n\r\n    // Set up the loading manager\r\n    const loadingManager = new THREE.LoadingManager();\r\n    loadingManager.onStart = () => console.log(\"Loading started...\");\r\n    loadingManager.onLoad = () => {\r\n      console.log(\"Loading complete!\");\r\n      setIsLoading(false);\r\n\r\n      // Trigger popup animation after loading\r\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\r\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\r\n    };\r\n\r\n    // Load MatCap texture\r\n    const textureLoader = new THREE.TextureLoader(loadingManager);\r\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\r\n\r\n    // Create materials using MatCap texture\r\n    const matCapMaterial = new THREE.MeshMatcapMaterial({ matcap: matCapTexture });\r\n\r\n    // Create sphere geometries with lower detail (to optimize)\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);  // Lower segments\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);  // Lower segments\r\n\r\n    // Create meshes with MatCap material\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\r\n\r\n    // Group the spheres for easier management\r\n    const sphereGroup = new THREE.Group();\r\n    sphereGroup.add(bigSphere);\r\n    sphereGroup.add(smallSphere);\r\n    scene.add(sphereGroup);\r\n\r\n    bigSphereRef.current = bigSphere;\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n\r\n    // Adjusted throttle for mouse events to reduce frequency\r\n    const handleMouseMove = throttle((event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\r\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\r\n\r\n      // Reduced movement intensity for the parallax effect\r\n      const parallaxX = mouseXPosition * 0.1;  // Reduced intensity\r\n      const parallaxY = mouseYPosition * 0.1;  // Reduced intensity\r\n\r\n      // Move the camera or background more subtly based on mouse position\r\n      gsap.to(camera.position, { x: parallaxX, y: parallaxY, z: 5, duration: 0.6, ease: 'power3.out' });\r\n\r\n      // Optional: you can also move other elements for the parallax effect\r\n      const radius = 1;\r\n      const targetX = radius * Math.cos(mouseXPosition * Math.PI);\r\n      const targetY = radius * Math.sin(mouseYPosition * Math.PI);\r\n\r\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: -1, duration: 0.5, ease: 'power3.out' });\r\n    }, 100);  // Increased throttle for less frequent updates\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Post-processing setup (optimized FilmPass)\r\n    const composer = new EffectComposer(renderer);\r\n    composer.addPass(new RenderPass(scene, camera));\r\n    composer.addPass(new FilmPass(0.2, 0.05, 648, false));  // Adjusted strength for less computation\r\n    composerRef.current = composer;\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      if (!isLoading) {\r\n        composer.render();\r\n      }\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize handling\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    // Cleanup function (unload)\r\n    const unload = () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n\r\n      // Dispose of materials, geometries, and textures\r\n      matCapTexture.dispose();\r\n      bigSphereGeometry.dispose();\r\n      smallSphereGeometry.dispose();\r\n      bigSphere.material.dispose();\r\n      smallSphere.material.dispose();\r\n\r\n      // Dispose of post-processing composer\r\n      composerRef.current && composerRef.current.dispose();\r\n\r\n      // Clear scene\r\n      scene.clear();\r\n      renderer.dispose();\r\n    };\r\n\r\n    // Call unload function on component unmount\r\n    return () => {\r\n      unload();\r\n    };\r\n  }, [isLoading]);\r\n\r\n  return (\r\n    <div>\r\n      {isLoading && (\r\n        <div className=\"loading-screen\">\r\n          <h3>Loading...</h3>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBG;\r\n"],"names":["TitleBG","sceneRef","useRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","isLoading","setIsLoading","useState","useEffect","scene","THREE","aspect","window","innerWidth","innerHeight","camera","renderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","onStart","console","log","onLoad","gsap","fromTo","scale","x","y","duration","ease","matCapTexture","load","matCapMaterial","matcap","bigSphereGeometry","smallSphereGeometry","bigSphere","smallSphere","sphereGroup","add","ambientLight","handleMouseMove","throttle","event","mouseXPosition","clientX","mouseYPosition","clientY","parallaxX","parallaxY","to","targetX","Math","cos","PI","targetY","sin","addEventListener","composer","EffectComposer","addPass","RenderPass","FilmPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","material","clear","React","className"],"sourceRoot":""}