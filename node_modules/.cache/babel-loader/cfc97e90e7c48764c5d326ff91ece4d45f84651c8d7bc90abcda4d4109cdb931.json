{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cubeRef = useRef(null);\n  const cameraRef = useRef(null);\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    sceneRef.current = scene;\n\n    // Create a cube geometry\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    cubeRef.current = cube;\n\n    // Set cube position directly at the center of the scene\n    cube.position.set(0, 0, 0); // Center the cube at (0, 0, 0)\n\n    // Add the cube to the scene\n    scene.add(cube);\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Handle window resizing\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const animate = () => {\n      if (cubeRef.current) {\n        cubeRef.current.rotation.x += 0.01;\n        cubeRef.current.rotation.y += 0.01;\n      }\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Clean up on component unmount\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      localStorage.setItem('cameraPosition', JSON.stringify(camera.position));\n      renderer.dispose();\n      geometry.dispose();\n      material.dispose();\n      scene.remove(cubeRef.current);\n      cubeRef.current = null;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TitleBG, \"sQ+Y8QZ/Cc9zGtTXNhbNv39yCgE=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","Fragment","_Fragment","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cubeRef","cameraRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","current","renderer","WebGLRenderer","setSize","document","getElementById","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","position","set","add","z","handleResize","width","height","aspect","updateProjectionMatrix","addEventListener","animate","rotation","x","y","render","requestAnimationFrame","removeEventListener","localStorage","setItem","JSON","stringify","dispose","remove","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cubeRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    cameraRef.current = camera;\r\n\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    sceneRef.current = scene;\r\n\r\n    // Create a cube geometry\r\n    const geometry = new THREE.BoxGeometry();\r\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    cubeRef.current = cube;\r\n\r\n    // Set cube position directly at the center of the scene\r\n    cube.position.set(0, 0, 0); // Center the cube at (0, 0, 0)\r\n\r\n    // Add the cube to the scene\r\n    scene.add(cube);\r\n\r\n    // Set camera position\r\n    camera.position.z = 5;\r\n\r\n    // Handle window resizing\r\n    const handleResize = () => {\r\n      const width = window.innerWidth;\r\n      const height = window.innerHeight;\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      if (cubeRef.current) {\r\n        cubeRef.current.rotation.x += 0.01;\r\n        cubeRef.current.rotation.y += 0.01;\r\n      }\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Clean up on component unmount\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      localStorage.setItem('cameraPosition', JSON.stringify(camera.position));\r\n      renderer.dispose();\r\n      geometry.dispose();\r\n      material.dispose();\r\n      scene.remove(cubeRef.current);\r\n      cubeRef.current = null;\r\n    };\r\n  }, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMU,WAAW,GAAGV,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMW,OAAO,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAMY,SAAS,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,KAAK,GAAG,IAAIX,KAAK,CAACY,KAAK,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAG,IAAIb,KAAK,CAACc,iBAAiB,CACxC,EAAE,EACFC,MAAM,CAACC,UAAU,GAAGD,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;IACDP,SAAS,CAACQ,OAAO,GAAGL,MAAM;IAE1B,MAAMM,QAAQ,GAAG,IAAInB,KAAK,CAACoB,aAAa,CAAC,CAAC;IAC1CD,QAAQ,CAACE,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACvDK,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAACC,WAAW,CAACL,QAAQ,CAACM,UAAU,CAAC;IAChEjB,WAAW,CAACU,OAAO,GAAGC,QAAQ;IAC9BZ,QAAQ,CAACW,OAAO,GAAGP,KAAK;;IAExB;IACA,MAAMe,QAAQ,GAAG,IAAI1B,KAAK,CAAC2B,WAAW,CAAC,CAAC;IACxC,MAAMC,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACjE,MAAMC,IAAI,GAAG,IAAI/B,KAAK,CAACgC,IAAI,CAACN,QAAQ,EAAEE,QAAQ,CAAC;IAC/CnB,OAAO,CAACS,OAAO,GAAGa,IAAI;;IAEtB;IACAA,IAAI,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAE5B;IACAvB,KAAK,CAACwB,GAAG,CAACJ,IAAI,CAAC;;IAEf;IACAlB,MAAM,CAACoB,QAAQ,CAACG,CAAC,GAAG,CAAC;;IAErB;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzB,MAAMC,KAAK,GAAGvB,MAAM,CAACC,UAAU;MAC/B,MAAMuB,MAAM,GAAGxB,MAAM,CAACE,WAAW;MACjCE,QAAQ,CAACE,OAAO,CAACiB,KAAK,EAAEC,MAAM,CAAC;MAC/B1B,MAAM,CAAC2B,MAAM,GAAGF,KAAK,GAAGC,MAAM;MAC9B1B,MAAM,CAAC4B,sBAAsB,CAAC,CAAC;IACjC,CAAC;IAED1B,MAAM,CAAC2B,gBAAgB,CAAC,QAAQ,EAAEL,YAAY,CAAC;;IAE/C;IACA,MAAMM,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAIlC,OAAO,CAACS,OAAO,EAAE;QACnBT,OAAO,CAACS,OAAO,CAAC0B,QAAQ,CAACC,CAAC,IAAI,IAAI;QAClCpC,OAAO,CAACS,OAAO,CAAC0B,QAAQ,CAACE,CAAC,IAAI,IAAI;MACpC;MACA3B,QAAQ,CAAC4B,MAAM,CAACpC,KAAK,EAAEE,MAAM,CAAC;MAC9BmC,qBAAqB,CAACL,OAAO,CAAC;IAChC,CAAC;IACDA,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACX5B,MAAM,CAACkC,mBAAmB,CAAC,QAAQ,EAAEZ,YAAY,CAAC;MAClDa,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAACxC,MAAM,CAACoB,QAAQ,CAAC,CAAC;MACvEd,QAAQ,CAACmC,OAAO,CAAC,CAAC;MAClB5B,QAAQ,CAAC4B,OAAO,CAAC,CAAC;MAClB1B,QAAQ,CAAC0B,OAAO,CAAC,CAAC;MAClB3C,KAAK,CAAC4C,MAAM,CAAC9C,OAAO,CAACS,OAAO,CAAC;MAC7BT,OAAO,CAACS,OAAO,GAAG,IAAI;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOd,OAAA,CAAAF,SAAA,mBAAI,CAAC;AACd,CAAC;AAACI,EAAA,CAzEID,OAAO;AAAAmD,EAAA,GAAPnD,OAAO;AA2Eb,eAAeA,OAAO;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}