{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cubeRef = useRef(null);\n  const cameraRef = useRef(null);\n  const composerRef = useRef(null); // Effect composer for post-processing\n\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.OrthographicCamera(window.innerWidth / -2,\n    // Left\n    window.innerWidth / 2,\n    // Right\n    window.innerHeight / 2,\n    // Top\n    window.innerHeight / -2,\n    // Bottom\n    0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n\n    // Create spheres (big and small)\n    const bigSphereGeometry = new THREE.SphereGeometry(2, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n    const material = new THREE.MeshStandardMaterial({\n      color: 0x00ff00,\n      roughness: 0.7,\n      metalness: 0.2\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, material);\n    bigSphere.position.set(0, 0, 0); // Center the big sphere\n    scene.add(bigSphere);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, material);\n    smallSphere.position.set(1, 0, -1); // Position small sphere\n    scene.add(smallSphere);\n    cubeRef.current = smallSphere;\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Set up lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 2); // Ambient light\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1); // Directional light\n    directionalLight.position.set(1, 1, 1).normalize();\n    scene.add(ambientLight, directionalLight);\n\n    // Set up post-processing\n    const composer = new EffectComposer(renderer);\n    composerRef.current = composer;\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n\n    // Add BloomPass for bloom effect\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5,\n    // Strength of the bloom effect\n    0.4,\n    // Radius of the bloom effect\n    0.85 // Threshold for bloom\n    );\n    composer.addPass(bloomPass);\n\n    // Animation loop with GSAP smooth animation for small sphere\n    const handleMouseMove = event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1; // Normalized X-axis (-1 to 1)\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\n\n      const radius = 1; // New smaller radius for the small sphere's orbit\n      const targetX = radius * Math.cos(angle); // Orbit distance\n      const targetY = radius * Math.sin(angle); // Orbit distance\n      const targetZ = -1; // Move small sphere backwards along Z-axis\n\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      composer.render(); // Use composer for post-processing\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      // Clean up meshes and geometries\n      scene.traverse(object => {\n        if (object instanceof THREE.Mesh) {\n          if (object.geometry) object.geometry.dispose();\n          if (object.material) {\n            if (Array.isArray(object.material)) {\n              object.material.forEach(material => material.dispose());\n            } else {\n              object.material.dispose();\n            }\n          }\n        }\n      });\n\n      // Dispose of the composer and renderer\n      if (composerRef.current) composerRef.current.dispose();\n      renderer.dispose();\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TitleBG, \"OhhzQRwcuistTnhT4Z3OXPq2Axo=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","gsap","EffectComposer","RenderPass","BloomPass","ShaderPass","UnrealBloomPass","Fragment","_Fragment","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cubeRef","cameraRef","composerRef","scene","Scene","camera","OrthographicCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","getElementById","appendChild","domElement","current","bigSphereGeometry","SphereGeometry","smallSphereGeometry","material","MeshStandardMaterial","color","roughness","metalness","bigSphere","Mesh","position","set","add","smallSphere","z","ambientLight","AmbientLight","directionalLight","DirectionalLight","normalize","composer","renderPass","addPass","bloomPass","Vector2","handleMouseMove","event","mouseXPosition","clientX","angle","Math","PI","radius","targetX","cos","targetY","sin","targetZ","to","x","y","duration","ease","addEventListener","animate","requestAnimationFrame","render","traverse","object","geometry","dispose","Array","isArray","forEach","removeEventListener","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { gsap } from 'gsap';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cubeRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const composerRef = useRef(null); // Effect composer for post-processing\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.OrthographicCamera(\r\n      window.innerWidth / -2, // Left\r\n      window.innerWidth / 2,  // Right\r\n      window.innerHeight / 2, // Top\r\n      window.innerHeight / -2, // Bottom\r\n      0.1,\r\n      1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n  \r\n    // Create spheres (big and small)\r\n    const bigSphereGeometry = new THREE.SphereGeometry(2, 32, 32);\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\r\n    \r\n    const material = new THREE.MeshStandardMaterial({\r\n      color: 0x00ff00,\r\n      roughness: 0.7,\r\n      metalness: 0.2,\r\n    });\r\n    \r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, material);\r\n    bigSphere.position.set(0, 0, 0); // Center the big sphere\r\n    scene.add(bigSphere);\r\n  \r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, material);\r\n    smallSphere.position.set(1, 0, -1); // Position small sphere\r\n    scene.add(smallSphere);\r\n    cubeRef.current = smallSphere;\r\n  \r\n    // Set camera position\r\n    camera.position.z = 5;\r\n    \r\n    // Set up lighting\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 2); // Ambient light\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1); // Directional light\r\n    directionalLight.position.set(1, 1, 1).normalize();\r\n    scene.add(ambientLight, directionalLight);\r\n  \r\n    // Set up post-processing\r\n    const composer = new EffectComposer(renderer);\r\n    composerRef.current = composer;\r\n    \r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n  \r\n    // Add BloomPass for bloom effect\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n      1.5, // Strength of the bloom effect\r\n      0.4, // Radius of the bloom effect\r\n      0.85 // Threshold for bloom\r\n    );\r\n    composer.addPass(bloomPass);\r\n  \r\n    // Animation loop with GSAP smooth animation for small sphere\r\n    const handleMouseMove = (event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1; // Normalized X-axis (-1 to 1)\r\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\r\n  \r\n      const radius = 1; // New smaller radius for the small sphere's orbit\r\n      const targetX = radius * Math.cos(angle); // Orbit distance\r\n      const targetY = radius * Math.sin(angle); // Orbit distance\r\n      const targetZ = -1; // Move small sphere backwards along Z-axis\r\n  \r\n      gsap.to(smallSphere.position, {\r\n        x: targetX,\r\n        y: targetY,\r\n        z: targetZ,\r\n        duration: 0.5,\r\n        ease: 'power3.out',\r\n      });\r\n    };\r\n  \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n  \r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      composer.render(); // Use composer for post-processing\r\n    };\r\n  \r\n    animate();\r\n  \r\n    // Clean up on unmount\r\n    return () => {\r\n      // Clean up meshes and geometries\r\n      scene.traverse((object) => {\r\n        if (object instanceof THREE.Mesh) {\r\n          if (object.geometry) object.geometry.dispose();\r\n          if (object.material) {\r\n            if (Array.isArray(object.material)) {\r\n              object.material.forEach((material) => material.dispose());\r\n            } else {\r\n              object.material.dispose();\r\n            }\r\n          }\r\n        }\r\n      });\r\n  \r\n      // Dispose of the composer and renderer\r\n      if (composerRef.current) composerRef.current.dispose();\r\n      renderer.dispose();\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, []);\r\n  \r\n\r\n  return <></>;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}