{"ast":null,"code":"var _jsxFileName = \"F:\\\\Portfolio\\\\3D-portfolio\\\\src\\\\components\\\\TitleBG.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding; // Optimize color output\n    renderer.physicallyCorrectLights = true; // Enable realistic lighting calculations\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Loading manager for assets\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onLoad = () => {\n      setIsLoading(false); // Hide loading screen\n    };\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      console.log(`Loading ${itemsLoaded}/${itemsTotal}: ${url}`);\n    };\n\n    // Load HDR for lighting only\n    const rgbeLoader = new RGBELoader(loadingManager);\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture; // Use HDR for lighting\n      scene.background = new THREE.Color(0x000000); // Black background\n    });\n\n    // Create spheres with MeshPhysicalMaterial\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Adjust resolution if needed\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xffffff,\n      metalness: 0.5,\n      roughness: 0.1,\n      clearcoat: 0.3,\n      clearcoatRoughness: 0.05\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Adjust resolution if needed\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xff0000,\n      metalness: 0.8,\n      roughness: 0.2,\n      clearcoat: 0.5,\n      transmission: 0.9,\n      thickness: 0.5\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1.5, 0, 0); // Place it next to the big sphere\n    scene.add(smallSphere);\n\n    // Animation loop\n    const animate = () => {\n      bigSphere.rotation.y += 0.01;\n      smallSphere.rotation.y -= 0.02;\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: '#000',\n        color: '#fff',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(TitleBG, \"JBx8xaITfGrm9krT0ZcoMZJ4E3E=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","RGBELoader","jsxDEV","_jsxDEV","Fragment","_Fragment","TitleBG","_s","sceneRef","rendererRef","cameraRef","isLoading","setIsLoading","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","LoadingManager","onLoad","onProgress","url","itemsLoaded","itemsTotal","console","log","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshPhysicalMaterial","color","metalness","roughness","clearcoat","clearcoatRoughness","bigSphere","Mesh","add","smallSphereGeometry","smallSphereMaterial","transmission","thickness","smallSphere","set","animate","rotation","y","render","requestAnimationFrame","dispose","clear","children","style","top","left","width","height","backgroundColor","display","justifyContent","alignItems","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding; // Optimize color output\r\n    renderer.physicallyCorrectLights = true; // Enable realistic lighting calculations\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    // Set camera position\r\n    camera.position.z = 5;\r\n\r\n    // Loading manager for assets\r\n    const loadingManager = new THREE.LoadingManager();\r\n    loadingManager.onLoad = () => {\r\n      setIsLoading(false); // Hide loading screen\r\n    };\r\n\r\n    loadingManager.onProgress = (url, itemsLoaded, itemsTotal) => {\r\n      console.log(`Loading ${itemsLoaded}/${itemsTotal}: ${url}`);\r\n    };\r\n\r\n    // Load HDR for lighting only\r\n    const rgbeLoader = new RGBELoader(loadingManager);\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture; // Use HDR for lighting\r\n      scene.background = new THREE.Color(0x000000); // Black background\r\n    });\r\n\r\n    // Create spheres with MeshPhysicalMaterial\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Adjust resolution if needed\r\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xffffff,\r\n      metalness: 0.5,\r\n      roughness: 0.1,\r\n      clearcoat: 0.3,\r\n      clearcoatRoughness: 0.05,\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Adjust resolution if needed\r\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xff0000,\r\n      metalness: 0.8,\r\n      roughness: 0.2,\r\n      clearcoat: 0.5,\r\n      transmission: 0.9,\r\n      thickness: 0.5,\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(1.5, 0, 0); // Place it next to the big sphere\r\n    scene.add(smallSphere);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      bigSphere.rotation.y += 0.01;\r\n      smallSphere.rotation.y -= 0.02;\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: '#000',\r\n            color: '#fff',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            zIndex: 1000,\r\n          }}\r\n        >\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}