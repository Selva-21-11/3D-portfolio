{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const [mouseX, setMouseX] = useState(0);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for lighting\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Big Sphere with enhanced matte shine\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xffffff,\n      metalness: 0.1,\n      roughness: 0.6,\n      clearcoat: 0.3,\n      clearcoatRoughness: 0.3\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    bigSphereRef.current = bigSphere;\n\n    // Small Sphere with enhanced matte shine\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xff0000,\n      metalness: 0.2,\n      roughness: 0.5,\n      clearcoat: 0.35,\n      clearcoatRoughness: 0.3\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1.5, 0, 0); // Behind the big sphere initially\n    scene.add(smallSphere);\n    smallSphereRef.current = smallSphere;\n\n    // Update mouse position to control rotation\n    const handleMouseMove = event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1; // Normalized X-axis (-1 to 1)\n      setMouseX(mouseXPosition);\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation Loop\n    const animate = () => {\n      if (bigSphereRef.current && smallSphereRef.current) {\n        // Rotate the scene based on mouse position\n        const rotationSpeed = 0.5; // Adjust this for speed control\n        const angle = mouseX * Math.PI; // Multiply by Math.PI to map -1 to 1 range to -PI to PI for full rotation\n\n        // Rotate both spheres along the Y-axis\n        bigSphereRef.current.rotation.y += 0.01;\n        smallSphereRef.current.rotation.y -= 0.02;\n\n        // Small sphere orbiting behind the big sphere in 2D\n        smallSphereRef.current.position.x = 2 * Math.cos(angle); // Orbit distance 2\n        smallSphereRef.current.position.z = 2 * Math.sin(angle); // Orbit distance 2\n      }\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, [mouseX]);\n  return null;\n};\n_s(TitleBG, \"jAa+RwbbyGlle9+AFbJ6hnp/xcc=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","RGBELoader","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","mouseX","setMouseX","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshPhysicalMaterial","color","metalness","roughness","clearcoat","clearcoatRoughness","bigSphere","Mesh","add","smallSphereGeometry","smallSphereMaterial","smallSphere","set","handleMouseMove","event","mouseXPosition","clientX","addEventListener","animate","rotationSpeed","angle","Math","PI","rotation","y","x","cos","sin","render","requestAnimationFrame","onWindowResize","aspect","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const [mouseX, setMouseX] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture;\r\n      scene.background = new THREE.Color(0x000000);\r\n    });\r\n\r\n    // Big Sphere with enhanced matte shine\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xffffff,\r\n      metalness: 0.1,\r\n      roughness: 0.6,\r\n      clearcoat: 0.3,\r\n      clearcoatRoughness: 0.3,\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n    bigSphereRef.current = bigSphere;\r\n\r\n    // Small Sphere with enhanced matte shine\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xff0000,\r\n      metalness: 0.2,\r\n      roughness: 0.5,\r\n      clearcoat: 0.35,\r\n      clearcoatRoughness: 0.3,\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(1.5, 0, 0); // Behind the big sphere initially\r\n    scene.add(smallSphere);\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Update mouse position to control rotation\r\n    const handleMouseMove = (event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1; // Normalized X-axis (-1 to 1)\r\n      setMouseX(mouseXPosition);\r\n    };\r\n    \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Animation Loop\r\n    const animate = () => {\r\n      if (bigSphereRef.current && smallSphereRef.current) {\r\n        // Rotate the scene based on mouse position\r\n        const rotationSpeed = 0.5; // Adjust this for speed control\r\n        const angle = mouseX * Math.PI; // Multiply by Math.PI to map -1 to 1 range to -PI to PI for full rotation\r\n\r\n        // Rotate both spheres along the Y-axis\r\n        bigSphereRef.current.rotation.y += 0.01;\r\n        smallSphereRef.current.rotation.y -= 0.02;\r\n\r\n        // Small sphere orbiting behind the big sphere in 2D\r\n        smallSphereRef.current.position.x = 2 * Math.cos(angle); // Orbit distance 2\r\n        smallSphereRef.current.position.z = 2 * Math.sin(angle); // Orbit distance 2\r\n      }\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize Event Listener\r\n    const onWindowResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, [mouseX]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}