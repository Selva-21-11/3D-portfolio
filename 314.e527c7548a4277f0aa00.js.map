{"version":3,"file":"314.e527c7548a4277f0aa00.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/BackgroundLight.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport gsap from \"gsap\";\n\nconst BackgroundLight = ({\n  initialX = 1.4,\n  color = { r: 1.0, g: 0.8, b: 0.4 },\n  glowRadiusX = 0.35, // Horizontal glow radius\n  glowRadiusY = 0.2, // Vertical glow radius (smaller for elliptical shape)\n  intensity = 2.0,\n  opacity = 0,\n  wiggleAmount = 70,\n  verticalWiggleAmount = 30,\n  fadeDuration = 3,\n  wiggleSpeed = 5,\n  lightDirection = 1.1,\n}) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const gl = canvas.getContext(\"webgl\");\n\n    if (!gl) {\n      console.error(\"WebGL not supported\");\n      return;\n    }\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      gl.viewport(0, 0, canvas.width, canvas.height);\n    };\n\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n\n    // Vertex Shader\n    const vertexShaderSource = `\n      attribute vec2 position;\n      void main() {\n        gl_Position = vec4(position, 0.0, 1.0);\n      }\n    `;\n\n    // Fragment Shader - Elliptical Light with Soft Diffusion\n    const fragmentShaderSource = `\n      precision mediump float;\n      uniform vec2 u_resolution;\n      uniform vec2 u_lightPos;\n      uniform float u_glowRadiusX;\n      uniform float u_glowRadiusY;\n      uniform float u_intensity;\n      uniform float u_opacity;\n      \n      void main() {\n        vec2 uv = gl_FragCoord.xy / u_resolution;\n        vec2 lightDir = (gl_FragCoord.xy - u_lightPos) / vec2(u_glowRadiusX, u_glowRadiusY); // Normalize ellipse shape\n        float dist = length(lightDir); \n\n        // Soft Glow Effect\n        float glow = smoothstep(0.9, 0.2, dist);\n        glow *= exp(-dist) * u_intensity;\n\n        // Elliptical Glow Spread\n        float spread = exp(-pow(dist, 2.0));\n        float finalGlow = mix(spread, glow, 0.7); \n\n        // Apply Color and Opacity\n        vec3 color = vec3(${color.r}, ${color.g}, ${color.b}) * finalGlow;\n        gl_FragColor = vec4(color, finalGlow * u_opacity);\n      }\n    `;\n\n    // Compile Shaders\n    const compileShader = (type, source) => {\n      const shader = gl.createShader(type);\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(gl.getShaderInfoLog(shader));\n        return null;\n      }\n      return shader;\n    };\n\n    const vertexShader = compileShader(gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    // Create Shader Program\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error(gl.getProgramInfoLog(program));\n      return;\n    }\n\n    gl.useProgram(program);\n\n    // Fullscreen Quad\n    const vertices = new Float32Array([\n      -1, -1,   1, -1,   -1, 1,\n      -1, 1,    1, -1,    1, 1,\n    ]);\n\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    const position = gl.getAttribLocation(program, \"position\");\n    gl.enableVertexAttribArray(position);\n    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);\n\n    // Get Uniform Locations\n    const resolutionLocation = gl.getUniformLocation(program, \"u_resolution\");\n    const lightPosLocation = gl.getUniformLocation(program, \"u_lightPos\");\n    const glowRadiusXLocation = gl.getUniformLocation(program, \"u_glowRadiusX\");\n    const glowRadiusYLocation = gl.getUniformLocation(program, \"u_glowRadiusY\");\n    const intensityLocation = gl.getUniformLocation(program, \"u_intensity\");\n    const opacityLocation = gl.getUniformLocation(program, \"u_opacity\");\n\n    // Light properties\n    const lightProps = {\n      x: window.innerWidth * initialX,\n      y: window.innerHeight *0.55,\n      radiusX: window.innerWidth * glowRadiusX,\n      radiusY: window.innerHeight * glowRadiusY,\n      intensity: intensity,\n      opacity: opacity,\n    };\n\n    // GSAP Animation\n    const tl = gsap.timeline({ repeat: -1, yoyo: true });\n    tl.to(lightProps, {\n      x: window.innerWidth * lightDirection,\n      duration: 4.5,\n      ease: \"power2.out\",\n    });\n\n    tl.to(lightProps, {\n      opacity: 1,\n      duration: fadeDuration,\n      ease: \"power2.out\",\n    });\n\n    // Render Loop\n    const render = () => {\n      gl.uniform2f(resolutionLocation, canvas.width, canvas.height);\n      gl.uniform2f(lightPosLocation, lightProps.x, lightProps.y);\n      gl.uniform1f(glowRadiusXLocation, lightProps.radiusX);\n      gl.uniform1f(glowRadiusYLocation, lightProps.radiusY);\n      gl.uniform1f(intensityLocation, lightProps.intensity);\n      gl.uniform1f(opacityLocation, lightProps.opacity);\n\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      requestAnimationFrame(render);\n    };\n\n    setTimeout(() => {\n      render();\n    }, 500);\n\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n      gl.deleteProgram(program);\n    };\n  }, [\n    initialX,\n    color,\n    glowRadiusX,\n    glowRadiusY,\n    intensity,\n    opacity,\n    wiggleAmount,\n    verticalWiggleAmount,\n    fadeDuration,\n    wiggleSpeed,\n    lightDirection,\n  ]);\n\n  return <canvas ref={canvasRef} className=\"shader-background\"></canvas>;\n};\n\nexport default BackgroundLight;\n"],"names":["_ref","initialX","color","r","g","b","glowRadiusX","glowRadiusY","intensity","opacity","wiggleAmount","verticalWiggleAmount","fadeDuration","wiggleSpeed","lightDirection","canvasRef","useRef","useEffect","canvas","current","gl","getContext","console","error","resizeCanvas","width","window","innerWidth","height","innerHeight","viewport","addEventListener","fragmentShaderSource","concat","compileShader","type","source","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","vertices","Float32Array","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","position","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","resolutionLocation","getUniformLocation","lightPosLocation","glowRadiusXLocation","glowRadiusYLocation","intensityLocation","opacityLocation","lightProps","x","y","radiusX","radiusY","tl","gsap","timeline","repeat","yoyo","to","duration","ease","render","uniform2f","uniform1f","drawArrays","TRIANGLES","requestAnimationFrame","setTimeout","removeEventListener","deleteProgram","React","ref","className"],"sourceRoot":""}