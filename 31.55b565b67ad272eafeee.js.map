{"version":3,"file":"31.55b565b67ad272eafeee.js","mappings":"kKAIA,MAAMA,EAA2B,IAAI,IAC/BC,EAA4B,IAAI,IAChCC,EAA4B,IAAI,IAE/B,MAAMC,UAAe,IACxB,WAAAC,CAAYC,GAAI,KAAEC,EAAO,GAAG,IAAEC,EAAM,IAAG,IAAEC,EAAM,GAAE,OAAEC,EAAS,EAAC,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,IAAEC,EAAG,KAAEC,EAAO,GAAM,CAAC,GACnGC,QAEAC,OAAOC,OAAOC,KAAM,CAAEZ,OAAMC,MAAKC,MAAKC,SAAQC,OAAMC,QAAOC,SAAQC,MAAKC,SAExEI,KAAKC,iBAAmB,IAAI,IAC5BD,KAAKE,WAAa,IAAI,IACtBF,KAAKG,qBAAuB,IAAI,IAChCH,KAAKI,cAAgB,IAAI,IAGzBJ,KAAKK,KAAOb,GAAQC,EAAQ,eAAiB,cAE3B,iBAAdO,KAAKK,KAAyBL,KAAKM,eAClCN,KAAKO,aACd,CAEA,WAAAA,EAAY,KAAEnB,EAAOY,KAAKZ,KAAI,IAAEC,EAAMW,KAAKX,IAAG,IAAEC,EAAMU,KAAKV,IAAG,OAAEC,EAASS,KAAKT,QAAW,CAAC,GAItF,OAHAO,OAAOC,OAAOC,KAAM,CAAEZ,OAAMC,MAAKC,MAAKC,WACtCS,KAAKC,iBAAiBO,gBAAgB,CAAElB,IAAKA,GAAOmB,KAAKC,GAAK,KAAMnB,SAAQH,OAAMC,QAClFW,KAAKK,KAAO,cACLL,IACX,CAEA,YAAAM,EAAa,KACTlB,EAAOY,KAAKZ,KAAI,IAChBC,EAAMW,KAAKX,IAAG,KACdG,EAAOQ,KAAKR,OAAS,EAAC,MACtBC,EAAQO,KAAKP,OAAS,EAAC,OACvBC,EAASM,KAAKN,SAAW,EAAC,IAC1BC,EAAMK,KAAKL,KAAO,EAAC,KACnBC,EAAOI,KAAKJ,MACZ,CAAC,GAQD,OAPAE,OAAOC,OAAOC,KAAM,CAAEZ,OAAMC,MAAKG,OAAMC,QAAOC,SAAQC,MAAKC,SAC3DJ,GAAQI,EACRH,GAASG,EACTF,GAAUE,EACVD,GAAOC,EACPI,KAAKC,iBAAiBU,eAAe,CAAEnB,OAAMC,QAAOC,SAAQC,MAAKP,OAAMC,QACvEW,KAAKK,KAAO,eACLL,IACX,CAEA,iBAAAY,GAOI,OANAf,MAAMe,oBACNZ,KAAKE,WAAWW,QAAQb,KAAKc,aAC7Bd,KAAKc,YAAYC,eAAef,KAAKI,eAGrCJ,KAAKG,qBAAqBa,SAAShB,KAAKC,iBAAkBD,KAAKE,YACxDF,IACX,CAEA,sBAAAiB,GACI,MAAkB,gBAAdjB,KAAKK,KACEL,KAAKO,cAELP,KAAKM,cAEpB,CAEA,MAAAY,CAAOC,GAEH,OADAtB,MAAMqB,OAAOC,GAAQ,GACdnB,IACX,CAGA,OAAAoB,CAAQC,GAGJ,OAFAA,EAAEC,aAAatB,KAAKE,YACpBmB,EAAEC,aAAatB,KAAKC,kBACbD,IACX,CAGA,SAAAuB,CAAUF,GAGN,OAFAA,EAAEC,aAAaxC,EAAS+B,QAAQb,KAAKC,mBACrCoB,EAAEC,aAAatB,KAAKc,aACbd,IACX,CAEA,aAAAwB,GACSxB,KAAKyB,UACNzB,KAAKyB,QAAU,CAAC,IAAI,IAAQ,IAAI,IAAQ,IAAI,IAAQ,IAAI,IAAQ,IAAI,IAAQ,IAAI,MAGpF,MAAMC,EAAI1B,KAAKG,qBACfH,KAAKyB,QAAQ,GAAGE,IAAID,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,IAAMA,EAAE,IAAIE,SAAWF,EAAE,IAAMA,EAAE,IACjF1B,KAAKyB,QAAQ,GAAGE,IAAID,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,IAAMA,EAAE,IAAIE,SAAWF,EAAE,IAAMA,EAAE,IACjF1B,KAAKyB,QAAQ,GAAGE,IAAID,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,IAAMA,EAAE,IAAIE,SAAWF,EAAE,IAAMA,EAAE,IACjF1B,KAAKyB,QAAQ,GAAGE,IAAID,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,IAAMA,EAAE,IAAIE,SAAWF,EAAE,IAAMA,EAAE,IACjF1B,KAAKyB,QAAQ,GAAGE,IAAID,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,IAAMA,EAAE,KAAKE,SAAWF,EAAE,IAAMA,EAAE,IAClF1B,KAAKyB,QAAQ,GAAGE,IAAID,EAAE,GAAKA,EAAE,GAAIA,EAAE,GAAKA,EAAE,GAAIA,EAAE,IAAMA,EAAE,KAAKE,SAAWF,EAAE,IAAMA,EAAE,IAElF,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMC,EAAS,EAAM9B,KAAKyB,QAAQI,GAAGE,WACrC/B,KAAKyB,QAAQI,GAAGb,SAASc,GACzB9B,KAAKyB,QAAQI,GAAGD,UAAYE,CAChC,CACJ,CAEA,qBAAAE,CAAsBC,EAAMnB,EAAcmB,EAAKnB,aAE3C,IAAKmB,EAAKC,SAASC,WAAWC,SAAU,OAAO,EAI/C,GAFKH,EAAKC,SAASG,QAAUJ,EAAKC,SAASG,OAAOC,SAAWC,KAAUN,EAAKC,SAASM,yBAEhFP,EAAKC,SAASG,OAAQ,OAAO,EAElC,MAAMI,EAAS1D,EACf0D,EAAOC,KAAKT,EAAKC,SAASG,OAAOI,QACjCA,EAAOnB,aAAaR,GAEpB,MAAMwB,EAASL,EAAKC,SAASG,OAAOC,OAASxB,EAAY6B,oBAEzD,OAAO3C,KAAK4C,wBAAwBH,EAAQH,EAChD,CAEA,uBAAAM,CAAwBH,EAAQH,GAC5B,MAAMO,EAAS7D,EAEf,IAAK,IAAI6C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,MAAMiB,EAAQ9C,KAAKyB,QAAQI,GAE3B,GADiBgB,EAAOH,KAAKI,GAAOC,IAAIN,GAAUK,EAAMlB,UACxCU,EAAQ,OAAO,CACnC,CACA,OAAO,CACX,E,gDC2FG,SAAStB,EAASgC,EAAKC,EAAGC,GAC7B,IAAIC,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GAERW,EAAMV,EAAE,GACRW,EAAMX,EAAE,GACRY,EAAMZ,EAAE,GACRa,EAAMb,EAAE,GACRc,EAAMd,EAAE,GACRe,EAAMf,EAAE,GACRgB,EAAMhB,EAAE,GACRiB,EAAMjB,EAAE,GACRkB,EAAMlB,EAAE,GAaZ,OAXAF,EAAI,GAAKY,EAAMT,EAAMU,EAAMP,EAAMQ,EAAML,EACvCT,EAAI,GAAKY,EAAMR,EAAMS,EAAMN,EAAMO,EAAMJ,EACvCV,EAAI,GAAKY,EAAMP,EAAMQ,EAAML,EAAMM,EAAMH,EAEvCX,EAAI,GAAKe,EAAMZ,EAAMa,EAAMV,EAAMW,EAAMR,EACvCT,EAAI,GAAKe,EAAMX,EAAMY,EAAMT,EAAMU,EAAMP,EACvCV,EAAI,GAAKe,EAAMV,EAAMW,EAAMR,EAAMS,EAAMN,EAEvCX,EAAI,GAAKkB,EAAMf,EAAMgB,EAAMb,EAAMc,EAAMX,EACvCT,EAAI,GAAKkB,EAAMd,EAAMe,EAAMZ,EAAMa,EAAMV,EACvCV,EAAI,GAAKkB,EAAMb,EAAMc,EAAMX,EAAMY,EAAMT,EAChCX,CACX,CCjQO,MAAMqB,UAAaC,MACtB,WAAApF,CAAYqF,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,GAEtF,OADAlF,MAAM0E,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GACvC/E,IACX,CAEA,GAAA2B,CAAI4C,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GACxC,OAAIR,EAAIS,OAAehF,KAAK0C,KAAK6B,IDiFlC,SAAavB,EAAKuB,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GAC7D/B,EAAI,GAAKuB,EACTvB,EAAI,GAAKwB,EACTxB,EAAI,GAAKyB,EACTzB,EAAI,GAAK0B,EACT1B,EAAI,GAAK2B,EACT3B,EAAI,GAAK4B,EACT5B,EAAI,GAAK6B,EACT7B,EAAI,GAAK8B,EACT9B,EAAI,GAAK+B,CAEb,CC3FQ,CAAa/E,KAAMuE,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GACpD/E,KACX,CAEA,SAAAiF,CAAU5D,EAAGK,EAAI1B,MAEb,OD6PD,SAAmBgD,EAAKC,EAAG5B,GAC9B,IAAI8B,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRiC,EAAI7D,EAAE,GACN8D,EAAI9D,EAAE,GAEV2B,EAAI,GAAKG,EACTH,EAAI,GAAKI,EACTJ,EAAI,GAAKK,EAETL,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EAETR,EAAI,GAAKkC,EAAI/B,EAAMgC,EAAI7B,EAAMG,EAC7BT,EAAI,GAAKkC,EAAI9B,EAAM+B,EAAI5B,EAAMG,EAC7BV,EAAI,GAAKkC,EAAI7B,EAAM8B,EAAI3B,EAAMG,CAEjC,CCvRQ,CAAmB3D,KAAM0B,EAAGL,GACrBrB,IACX,CAEA,MAAAoF,CAAO/D,EAAGK,EAAI1B,MAEV,OD2RD,SAAgBgD,EAAKC,EAAGoC,GAC3B,IAAIlC,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GACRqC,EAAI7E,KAAK8E,IAAIF,GACbG,EAAI/E,KAAKgF,IAAIJ,GAEjBrC,EAAI,GAAKwC,EAAIrC,EAAMmC,EAAIhC,EACvBN,EAAI,GAAKwC,EAAIpC,EAAMkC,EAAI/B,EACvBP,EAAI,GAAKwC,EAAInC,EAAMiC,EAAI9B,EAEvBR,EAAI,GAAKwC,EAAIlC,EAAMgC,EAAInC,EACvBH,EAAI,GAAKwC,EAAIjC,EAAM+B,EAAIlC,EACvBJ,EAAI,GAAKwC,EAAIhC,EAAM8B,EAAIjC,EAEvBL,EAAI,GAAKS,EACTT,EAAI,GAAKU,EACTV,EAAI,GAAKW,CAEb,CCrTQ,CAAgB3D,KAAM0B,EAAGL,GAClBrB,IACX,CAEA,KAAA0F,CAAMrE,EAAGK,EAAI1B,MAET,ODyTD,SAAegD,EAAKC,EAAG5B,GAC1B,IAAI6D,EAAI7D,EAAE,GACN8D,EAAI9D,EAAE,GAEV2B,EAAI,GAAKkC,EAAIjC,EAAE,GACfD,EAAI,GAAKkC,EAAIjC,EAAE,GACfD,EAAI,GAAKkC,EAAIjC,EAAE,GAEfD,EAAI,GAAKmC,EAAIlC,EAAE,GACfD,EAAI,GAAKmC,EAAIlC,EAAE,GACfD,EAAI,GAAKmC,EAAIlC,EAAE,GAEfD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,EAEf,CC1UQ,CAAejD,KAAM0B,EAAGL,GACjBrB,IACX,CAEA,QAAAgB,CAAS2E,EAAIC,GAMT,OALIA,EACA,EAAkB5F,KAAM2F,EAAIC,GAE5B,EAAkB5F,KAAMA,KAAM2F,GAE3B3F,IACX,CAEA,QAAA6F,GDuEG,IAAkB7C,ECrEjB,ODqEiBA,ECtEChD,MDuElB,GAAK,EACTgD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EC9EEhD,IACX,CAEA,IAAA0C,CAAKhB,GD4BF,IAAcsB,EAAKC,EC1BlB,OD0BkBA,EC3BEvB,GD2BPsB,EC3BChD,MD4Bd,GAAKiD,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GCnCAjD,IACX,CAEA,WAAA8F,CAAYpE,GDvCT,IAAkBsB,EAAKC,ECyCtB,ODzCsBA,ECwCEvB,GDxCPsB,ECwCChD,MDvClB,GAAKiD,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,ICgCAjD,IACX,CAEA,cAAA+F,CAAeC,GAEX,ODzBD,SAAkBhD,EAAKgD,GAC1B,IAAId,EAAIc,EAAE,GACNb,EAAIa,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKjB,EAAIA,EACTkB,EAAKjB,EAAIA,EACTkB,EAAKJ,EAAIA,EAETK,EAAKpB,EAAIiB,EACTI,EAAKpB,EAAIgB,EACTK,EAAKrB,EAAIiB,EACTK,EAAKR,EAAIE,EACTO,EAAKT,EAAIG,EACTO,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAEbrD,EAAI,GAAK,EAAIwD,EAAKG,EAClB3D,EAAI,GAAKuD,EAAKO,EACd9D,EAAI,GAAKyD,EAAKI,EAEd7D,EAAI,GAAKuD,EAAKO,EACd9D,EAAI,GAAK,EAAIsD,EAAKK,EAClB3D,EAAI,GAAK0D,EAAKE,EAEd5D,EAAI,GAAKyD,EAAKI,EACd7D,EAAI,GAAK0D,EAAKE,EACd5D,EAAI,GAAK,EAAIsD,EAAKE,CAGtB,CCRQ,CAAkBxG,KAAMgG,GACjBhG,IACX,CAEA,SAAA+G,CAAUC,EAAOC,EAAOC,GAEpB,OADAlH,KAAK2B,IAAIqF,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIC,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIC,EAAM,GAAIA,EAAM,GAAIA,EAAM,IACxFlH,IACX,CAEA,OAAAa,CAAQa,EAAI1B,MAER,ODkGD,SAAgBgD,EAAKC,GACxB,IAAIE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,GAERY,EAAMF,EAAMJ,EAAMC,EAAME,EACxBM,GAAOL,EAAML,EAAME,EAAMC,EACzBU,EAAMT,EAAMJ,EAAMC,EAAME,EAGxB0D,EAAMhE,EAAMU,EAAMT,EAAMY,EAAMX,EAAMc,EAEnCgD,IAGLA,EAAM,EAAMA,EAEZnE,EAAI,GAAKa,EAAMsD,EACfnE,EAAI,KAAOW,EAAMP,EAAMC,EAAMK,GAAOyD,EACpCnE,EAAI,IAAMQ,EAAMJ,EAAMC,EAAME,GAAO4D,EACnCnE,EAAI,GAAKgB,EAAMmD,EACfnE,EAAI,IAAMW,EAAMR,EAAME,EAAMI,GAAO0D,EACnCnE,EAAI,KAAOQ,EAAML,EAAME,EAAMC,GAAO6D,EACpCnE,EAAI,GAAKmB,EAAMgD,EACfnE,EAAI,KAAOU,EAAMP,EAAMC,EAAMK,GAAO0D,EACpCnE,EAAI,IAAMO,EAAMJ,EAAMC,EAAME,GAAO6D,EAEvC,CCpIQ,CAAgBnH,KAAM0B,GACf1B,IACX,CAEA,eAAAoH,CAAgB1F,GAEZ,ODuSD,SAAwBsB,EAAKC,GAChC,IAAIE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRoE,EAAMpE,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRqE,EAAMrE,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,IACRsE,EAAMtE,EAAE,IACRuE,EAAMvE,EAAE,IACRwE,EAAMxE,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IAERW,EAAMT,EAAMI,EAAMH,EAAME,EACxBO,EAAMV,EAAMK,EAAMH,EAAMC,EACxBQ,EAAMX,EAAMmE,EAAMD,EAAM/D,EACxBsE,EAAMxE,EAAMI,EAAMH,EAAME,EACxBsE,EAAMzE,EAAMkE,EAAMD,EAAM9D,EACxBuE,EAAMzE,EAAMiE,EAAMD,EAAM7D,EACxBuE,EAAMtE,EAAMgE,EAAM/D,EAAM8D,EACxBQ,EAAMvE,EAAMiE,EAAM/D,EAAM6D,EACxBS,EAAMxE,EAAMkE,EAAMJ,EAAMC,EACxBU,EAAMxE,EAAMgE,EAAM/D,EAAM8D,EACxB1D,EAAML,EAAMiE,EAAMJ,EAAME,EACxBzD,EAAML,EAAMgE,EAAMJ,EAAMG,EAGxBP,EAAMvD,EAAMI,EAAMH,EAAME,EAAMD,EAAMoE,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAEvEZ,IAGLA,EAAM,EAAMA,EAEZnE,EAAI,IAAMO,EAAMS,EAAMR,EAAMO,EAAMuD,EAAMY,GAAOf,EAC/CnE,EAAI,IAAMQ,EAAMyE,EAAM3E,EAAMU,EAAMsD,EAAMU,GAAOb,EAC/CnE,EAAI,IAAMM,EAAMS,EAAMR,EAAM0E,EAAMX,EAAMS,GAAOZ,EAE/CnE,EAAI,IAAMK,EAAMU,EAAMX,EAAMY,EAAMqD,EAAMa,GAAOf,EAC/CnE,EAAI,IAAMG,EAAMa,EAAMX,EAAM4E,EAAMZ,EAAMW,GAAOb,EAC/CnE,EAAI,IAAMI,EAAM6E,EAAM9E,EAAMY,EAAMsD,EAAMU,GAAOZ,EAE/CnE,EAAI,IAAMyE,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAOT,EAC/CnE,EAAI,IAAM0E,EAAM5D,EAAM0D,EAAMM,EAAMH,EAAM9D,GAAOsD,EAC/CnE,EAAI,IAAMwE,EAAMK,EAAMJ,EAAM3D,EAAM6D,EAAM/D,GAAOuD,EAGnD,CC5VQ,CAAwBnH,KAAM0B,GACvB1B,IACX,E,cCnEJ,IAAImI,EAAK,EAEF,MAAMC,UAAaC,EAAA,EACtB,WAAAnJ,CAAYC,GAAI,SAAE+C,EAAQ,QAAEoG,EAAO,KAAEC,EAAOpJ,EAAGqJ,UAAS,cAAEC,GAAgB,EAAI,YAAEC,EAAc,GAAM,CAAC,GACjG7I,QACKV,EAAGwJ,QAAQC,QAAQC,MAAM,2CAC9B7I,KAAKb,GAAKA,EACVa,KAAK8I,GAAKX,IACVnI,KAAKkC,SAAWA,EAChBlC,KAAKsI,QAAUA,EACftI,KAAKuI,KAAOA,EAGZvI,KAAKyI,cAAgBA,EAGrBzI,KAAK0I,YAAcA,EACnB1I,KAAK+I,gBAAkB,IAAIC,EAAA,EAC3BhJ,KAAKiJ,aAAe,IAAI5E,EACxBrE,KAAKkJ,sBAAwB,GAC7BlJ,KAAKmJ,qBAAuB,EAChC,CAEA,cAAAC,CAAeC,GAEX,OADArJ,KAAKkJ,sBAAsBI,KAAKD,GACzBrJ,IACX,CAEA,aAAAuJ,CAAcF,GAEV,OADArJ,KAAKmJ,qBAAqBG,KAAKD,GACxBrJ,IACX,CAEA,IAAAwJ,EAAK,OAAEC,GAAW,CAAC,GACXA,IAEKzJ,KAAKsI,QAAQoB,SAASC,aACvB7J,OAAOC,OAAOC,KAAKsI,QAAQoB,SAAU,CACjCC,YAAa,CAAEC,MAAO,MACtB1J,WAAY,CAAE0J,MAAO,MACrBb,gBAAiB,CAAEa,MAAO,MAC1BX,aAAc,CAAEW,MAAO,MACvB3J,iBAAkB,CAAE2J,MAAO,MAC3BC,eAAgB,CAAED,MAAO,QAKjC5J,KAAKsI,QAAQoB,SAASzJ,iBAAiB2J,MAAQH,EAAOxJ,iBACtDD,KAAKsI,QAAQoB,SAASG,eAAeD,MAAQH,EAAOrJ,cACpDJ,KAAKsI,QAAQoB,SAASxJ,WAAW0J,MAAQH,EAAOvJ,WAChDF,KAAK+I,gBAAgB/H,SAASyI,EAAOvJ,WAAYF,KAAKc,aACtDd,KAAKiJ,aAAa7B,gBAAgBpH,KAAK+I,iBACvC/I,KAAKsI,QAAQoB,SAASC,YAAYC,MAAQ5J,KAAKc,YAC/Cd,KAAKsI,QAAQoB,SAASX,gBAAgBa,MAAQ5J,KAAK+I,gBACnD/I,KAAKsI,QAAQoB,SAAST,aAAaW,MAAQ5J,KAAKiJ,cAEpDjJ,KAAKkJ,sBAAsBY,SAAST,GAAMA,GAAKA,EAAE,CAAEU,KAAM/J,KAAMyJ,aAG/D,IAAIO,EAAYhK,KAAKsI,QAAQ2B,UAAYjK,KAAKc,YAAYoJ,cAAgB,EAC1ElK,KAAKsI,QAAQ6B,IAAI,CAAEH,cACnBhK,KAAKkC,SAASsH,KAAK,CAAEjB,KAAMvI,KAAKuI,KAAMD,QAAStI,KAAKsI,UACpDtI,KAAKmJ,qBAAqBW,SAAST,GAAMA,GAAKA,EAAE,CAAEU,KAAM/J,KAAMyJ,YAClE,E,kCChEJ,IAAItB,EAAK,EAGT,MAAMiC,EAAgB,CAAC,EAEhB,MAAMC,EACT,WAAAnL,CACIC,GACA,OACImL,EAAM,SACNC,EAAQ,SACRb,EAAW,CAAC,EAAC,YAEbc,GAAc,EAAK,SACnBP,EAAW9K,EAAGsL,KAAI,UAClBC,EAAYvL,EAAGwL,IAAG,UAClBC,GAAY,EAAI,WAChBC,GAAa,EAAI,UACjBC,EAAY3L,EAAG4L,QACf,CAAC,GAEA5L,EAAGwJ,QAAQC,QAAQC,MAAM,8CAC9B7I,KAAKb,GAAKA,EACVa,KAAK0J,SAAWA,EAChB1J,KAAK8I,GAAKX,IAELmC,GAAQ1B,QAAQoC,KAAK,8BACrBT,GAAU3B,QAAQoC,KAAK,gCAG5BhL,KAAKwK,YAAcA,EACnBxK,KAAKiK,SAAWA,EAChBjK,KAAK0K,UAAYA,EACjB1K,KAAK4K,UAAYA,EACjB5K,KAAK6K,WAAaA,EAClB7K,KAAK8K,UAAYA,EACjB9K,KAAKiL,UAAY,CAAC,EAClBjL,KAAKkL,cAAgB,CAAC,EACtBlL,KAAKmL,YAAc,CAAC,EACpBnL,KAAKoL,UAAY,CAAC,EAGdpL,KAAKwK,cAAgBxK,KAAKiL,UAAUI,MAChCrL,KAAKb,GAAGmM,SAASC,mBAAoBvL,KAAKwL,aAAaxL,KAAKb,GAAGsM,IAAKzL,KAAKb,GAAGuM,qBAC3E1L,KAAKwL,aAAaxL,KAAKb,GAAGwM,UAAW3L,KAAKb,GAAGuM,sBAItD1L,KAAK4L,aAAezM,EAAG0M,aAAa1M,EAAG2M,eACvC9L,KAAK+L,eAAiB5M,EAAG0M,aAAa1M,EAAG6M,iBACzChM,KAAKsI,QAAUnJ,EAAG8M,gBAClB9M,EAAG+M,aAAalM,KAAKsI,QAAStI,KAAK4L,cACnCzM,EAAG+M,aAAalM,KAAKsI,QAAStI,KAAK+L,gBAGnC/L,KAAKmM,WAAW,CAAE7B,SAAQC,YAC9B,CAEA,UAAA4B,EAAW,OAAE7B,EAAM,SAAEC,IAqBjB,GApBID,IAEAtK,KAAKb,GAAGiN,aAAapM,KAAK4L,aAActB,GACxCtK,KAAKb,GAAGkN,cAAcrM,KAAK4L,cACyB,KAAhD5L,KAAKb,GAAGmN,iBAAiBtM,KAAK4L,eAC9BhD,QAAQoC,KAAK,GAAGhL,KAAKb,GAAGmN,iBAAiBtM,KAAK4L,iCAAiCW,EAAejC,OAIlGC,IAEAvK,KAAKb,GAAGiN,aAAapM,KAAK+L,eAAgBxB,GAC1CvK,KAAKb,GAAGkN,cAAcrM,KAAK+L,gBAC2B,KAAlD/L,KAAKb,GAAGmN,iBAAiBtM,KAAK+L,iBAC9BnD,QAAQoC,KAAK,GAAGhL,KAAKb,GAAGmN,iBAAiBtM,KAAK+L,qCAAqCQ,EAAehC,OAK1GvK,KAAKb,GAAGqN,YAAYxM,KAAKsI,UACpBtI,KAAKb,GAAGsN,oBAAoBzM,KAAKsI,QAAStI,KAAKb,GAAGuN,aACnD,OAAO9D,QAAQoC,KAAKhL,KAAKb,GAAGwN,kBAAkB3M,KAAKsI,UAIvDtI,KAAK4M,iBAAmB,IAAIC,IAC5B,IAAIC,EAAc9M,KAAKb,GAAGsN,oBAAoBzM,KAAKsI,QAAStI,KAAKb,GAAG4N,iBACpE,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAaE,IAAU,CACjD,IAAIC,EAAUjN,KAAKb,GAAG+N,iBAAiBlN,KAAKsI,QAAS0E,GACrDhN,KAAK4M,iBAAiBjL,IAAIsL,EAASjN,KAAKb,GAAGgO,mBAAmBnN,KAAKsI,QAAS2E,EAAQG,OAGpF,MAAMC,EAAQJ,EAAQG,KAAKE,MAAM,UAEjCL,EAAQM,YAAcF,EAAM,GAC5BJ,EAAQO,eAAiBH,EAAMI,MAAM,EACzC,CAGAzN,KAAK0N,mBAAqB,IAAIb,IAC9B,MAAMc,EAAY,GACZC,EAAa5N,KAAKb,GAAGsN,oBAAoBzM,KAAKsI,QAAStI,KAAKb,GAAG0O,mBACrE,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAYE,IAAU,CAChD,MAAMC,EAAY/N,KAAKb,GAAG6O,gBAAgBhO,KAAKsI,QAASwF,GAClDG,EAAWjO,KAAKb,GAAG+O,kBAAkBlO,KAAKsI,QAASyF,EAAUX,OAEjD,IAAda,IACJN,EAAUM,GAAYF,EAAUX,KAChCpN,KAAK0N,mBAAmB/L,IAAIoM,EAAWE,GAC3C,CACAjO,KAAKmO,eAAiBR,EAAUS,KAAK,GACzC,CAEA,YAAA5C,CAAaH,EAAKgD,EAAKC,EAAUC,GAC7BvO,KAAKiL,UAAUI,IAAMA,EACrBrL,KAAKiL,UAAUoD,IAAMA,EACrBrO,KAAKiL,UAAUqD,SAAWA,EAC1BtO,KAAKiL,UAAUsD,SAAWA,EACtBlD,IAAKrL,KAAKwK,aAAc,EAChC,CAEA,gBAAAgE,CAAiBC,EAASC,GACtB1O,KAAKkL,cAAcuD,QAAUA,EAC7BzO,KAAKkL,cAAcwD,UAAYA,CACnC,CAEA,cAAAC,CAAeC,EAAMC,EAAKC,GACtB9O,KAAK+O,WAAaF,EAClB7O,KAAKmL,YAAYyD,KAAOA,EACxB5O,KAAKmL,YAAY0D,IAAMA,EACvB7O,KAAKmL,YAAY2D,KAAOA,CAC5B,CAEA,YAAAE,CAAaC,EAAaC,EAAWC,GACjCnP,KAAKoL,UAAU6D,YAAcA,EAC7BjP,KAAKoL,UAAU8D,UAAYA,EAC3BlP,KAAKoL,UAAU+D,UAAYA,CAC/B,CAEA,UAAAC,GACQpP,KAAK4K,UAAW5K,KAAKb,GAAGmM,SAAS+D,OAAOrP,KAAKb,GAAGmQ,YAC/CtP,KAAKb,GAAGmM,SAASiE,QAAQvP,KAAKb,GAAGmQ,YAElCtP,KAAKiK,SAAUjK,KAAKb,GAAGmM,SAAS+D,OAAOrP,KAAKb,GAAGqQ,WAC9CxP,KAAKb,GAAGmM,SAASiE,QAAQvP,KAAKb,GAAGqQ,WAElCxP,KAAKiL,UAAUI,IAAKrL,KAAKb,GAAGmM,SAAS+D,OAAOrP,KAAKb,GAAGsQ,OACnDzP,KAAKb,GAAGmM,SAASiE,QAAQvP,KAAKb,GAAGsQ,OAElCzP,KAAKiK,UAAUjK,KAAKb,GAAGmM,SAASoE,YAAY1P,KAAKiK,UACrDjK,KAAKb,GAAGmM,SAASqE,aAAa3P,KAAK0K,WACnC1K,KAAKb,GAAGmM,SAASsE,aAAa5P,KAAK6K,YACnC7K,KAAKb,GAAGmM,SAASuE,aAAa7P,KAAK8K,WAC/B9K,KAAKiL,UAAUI,KAAKrL,KAAKb,GAAGmM,SAASE,aAAaxL,KAAKiL,UAAUI,IAAKrL,KAAKiL,UAAUoD,IAAKrO,KAAKiL,UAAUqD,SAAUtO,KAAKiL,UAAUsD,UACtIvO,KAAKb,GAAGmM,SAASkD,iBAAiBxO,KAAKkL,cAAcuD,QAASzO,KAAKkL,cAAcwD,WAE9E1O,KAAKmL,YAAYyD,MAAQ5O,KAAKoL,UAAU6D,YAAajP,KAAKb,GAAGmM,SAAS+D,OAAOrP,KAAKb,GAAG2Q,cAC/E9P,KAAKb,GAAGmM,SAASiE,QAAQvP,KAAKb,GAAG2Q,cAE1C9P,KAAKb,GAAGmM,SAASqD,eAAe3O,KAAKmL,YAAYyD,KAAM5O,KAAKmL,YAAY0D,IAAK7O,KAAKmL,YAAY2D,MAC9F9O,KAAKb,GAAGmM,SAAS0D,aAAahP,KAAKoL,UAAU6D,YAAajP,KAAKoL,UAAU8D,UAAWlP,KAAKoL,UAAU+D,UAEvG,CAEA,GAAAhF,EAAI,UAAEH,GAAY,GAAU,CAAC,GACzB,IAAI+F,GAAe,EACG/P,KAAKb,GAAGmM,SAAS0E,MAAMC,iBAAmBjQ,KAAK8I,KAIjE9I,KAAKb,GAAG+Q,WAAWlQ,KAAKsI,SACxBtI,KAAKb,GAAGmM,SAAS0E,MAAMC,eAAiBjQ,KAAK8I,IAIjD9I,KAAK4M,iBAAiB9C,SAAQ,CAACmE,EAAUkC,KACrC,IAAIlD,EAAUjN,KAAK0J,SAASyG,EAAc5C,aAE1C,IAAK,MAAM6C,KAAaD,EAAc3C,eAAgB,CAClD,IAAKP,EAAS,MAEd,KAAImD,KAAanD,GAEV,IAAI3I,MAAM+L,QAAQpD,EAAQrD,OAC7B,MAEAqD,OAAUqD,EACV,KACJ,CANIrD,EAAUA,EAAQmD,EAO1B,CAEA,IAAKnD,EACD,OAAOjC,EAAK,kBAAkBmF,EAAc/C,8BAGhD,GAAIH,QAA6BqD,IAAlBrD,EAAQrD,MACnB,OAAOoB,EAAK,GAAGmF,EAAc/C,6CAGjC,GAAIH,EAAQrD,MAAM2G,QAKd,OAJAR,GAA4B,EAG5B9C,EAAQrD,MAAM4G,OAAOT,GACdU,EAAWzQ,KAAKb,GAAIgR,EAAc9P,KAAM4N,EAAU8B,GAI7D,GAAI9C,EAAQrD,MAAM5E,QAAUiI,EAAQrD,MAAM,GAAG2G,QAAS,CAClD,MAAMG,EAAe,GAOrB,OANAzD,EAAQrD,MAAME,SAASF,IACnBmG,GAA4B,EAC5BnG,EAAM4G,OAAOT,GACbW,EAAapH,KAAKyG,EAAY,IAG3BU,EAAWzQ,KAAKb,GAAIgR,EAAc9P,KAAM4N,EAAUyC,EAC7D,CAEAD,EAAWzQ,KAAKb,GAAIgR,EAAc9P,KAAM4N,EAAUhB,EAAQrD,MAAM,IAGpE5J,KAAKoP,aACDpF,GAAWhK,KAAKb,GAAGmM,SAASqE,aAAa3P,KAAK0K,YAAc1K,KAAKb,GAAGwL,IAAM3K,KAAKb,GAAGwR,GAAK3Q,KAAKb,GAAGwL,IACvG,CAEA,MAAAiG,GACI5Q,KAAKb,GAAG0R,cAAc7Q,KAAKsI,QAC/B,EAGJ,SAASmI,EAAWtR,EAAIkB,EAAM4N,EAAUrE,GACpCA,EAAQA,EAAM5E,OA8DlB,SAAiB/B,GACb,MAAM6N,EAAW7N,EAAE+B,OACb+L,EAAW9N,EAAE,GAAG+B,OACtB,QAAiBsL,IAAbS,EAAwB,OAAO9N,EACnC,MAAM+B,EAAS8L,EAAWC,EAC1B,IAAInH,EAAQQ,EAAcpF,GACrB4E,IAAOQ,EAAcpF,GAAU4E,EAAQ,IAAIoH,aAAahM,IAC7D,IAAK,IAAInD,EAAI,EAAGA,EAAIiP,EAAUjP,IAAK+H,EAAMjI,IAAIsB,EAAEpB,GAAIA,EAAIkP,GACvD,OAAOnH,CACX,CAvE2BqH,CAAQrH,GAASA,EACxC,MAAMsH,EAAW/R,EAAGmM,SAAS0E,MAAMpD,iBAAiBuE,IAAIlD,GAGxD,GAAIrE,EAAM5E,OACN,QAAiBsL,IAAbY,GAA0BA,EAASlM,SAAW4E,EAAM5E,OAEpD7F,EAAGmM,SAAS0E,MAAMpD,iBAAiBjL,IAAIsM,EAAUrE,EAAM6D,MAAM,QAC1D,CACH,GAgEZ,SAAqBxK,EAAGC,GACpB,GAAID,EAAE+B,SAAW9B,EAAE8B,OAAQ,OAAO,EAClC,IAAK,IAAInD,EAAI,EAAGuP,EAAInO,EAAE+B,OAAQnD,EAAIuP,EAAGvP,IACjC,GAAIoB,EAAEpB,KAAOqB,EAAErB,GAAI,OAAO,EAE9B,OAAO,CACX,CAtEgBwP,CAAYH,EAAUtH,GAAQ,OAGlCsH,EAASvP,IAAMuP,EAASvP,IAAIiI,GAqExC,SAAkB3G,EAAGC,GACjB,IAAK,IAAIrB,EAAI,EAAGuP,EAAInO,EAAE+B,OAAQnD,EAAIuP,EAAGvP,IACjCoB,EAAEpB,GAAKqB,EAAErB,EAEjB,CAzEiDyP,CAASJ,EAAUtH,GACxDzK,EAAGmM,SAAS0E,MAAMpD,iBAAiBjL,IAAIsM,EAAUiD,EACrD,KACG,CACH,GAAIA,IAAatH,EAAO,OACxBzK,EAAGmM,SAAS0E,MAAMpD,iBAAiBjL,IAAIsM,EAAUrE,EACrD,CAEA,OAAQvJ,GACJ,KAAK,KACD,OAAOuJ,EAAM5E,OAAS7F,EAAGoS,WAAWtD,EAAUrE,GAASzK,EAAGqS,UAAUvD,EAAUrE,GAClF,KAAK,MACD,OAAOzK,EAAGsS,WAAWxD,EAAUrE,GACnC,KAAK,MACD,OAAOzK,EAAGuS,WAAWzD,EAAUrE,GACnC,KAAK,MACD,OAAOzK,EAAGwS,WAAW1D,EAAUrE,GACnC,KAAK,MACL,KAAK,KACL,KAAK,MACL,KAAK,MACL,KAAK,MACL,KAAK,MACD,OAAOA,EAAM5E,OAAS7F,EAAGyS,WAAW3D,EAAUrE,GAASzK,EAAG0S,UAAU5D,EAAUrE,GAClF,KAAK,MACL,KAAK,MACD,OAAOzK,EAAG2S,WAAW7D,EAAUrE,GACnC,KAAK,MACL,KAAK,MACD,OAAOzK,EAAG4S,WAAW9D,EAAUrE,GACnC,KAAK,MACL,KAAK,MACD,OAAOzK,EAAG6S,WAAW/D,EAAUrE,GACnC,KAAK,MACD,OAAOzK,EAAG8S,iBAAiBhE,GAAU,EAAOrE,GAChD,KAAK,MACD,OAAOzK,EAAG+S,iBAAiBjE,GAAU,EAAOrE,GAChD,KAAK,MACD,OAAOzK,EAAGgT,iBAAiBlE,GAAU,EAAOrE,GAExD,CAEA,SAAS2C,EAAe6F,GACpB,IAAIC,EAAQD,EAAO/E,MAAM,MACzB,IAAK,IAAIxL,EAAI,EAAGA,EAAIwQ,EAAMrN,OAAQnD,IAC9BwQ,EAAMxQ,GAAKA,EAAI,EAAI,KAAOwQ,EAAMxQ,GAEpC,OAAOwQ,EAAMjE,KAAK,KACtB,CA2BA,IAAIkE,EAAY,EAChB,SAAStH,EAAKuH,GACND,EAAY,MAChB1J,QAAQoC,KAAKuH,GACbD,IACIA,EAAY,KAAK1J,QAAQoC,KAAK,mDACtC,C,kCC5TA,MAAMwH,EAA2B,I,QAAI,GACrC,IAAIrK,EAAK,EAEF,MAAMsK,EACT,WAAAvT,EAAY,OACRyJ,EAAS+J,SAASC,cAAc,UAAS,MACzCC,EAAQ,IAAG,OACXC,EAAS,IAAG,IACZC,EAAM,EAAC,MACPC,GAAQ,EAAK,MACbC,GAAQ,EAAI,QACZC,GAAU,EAAK,UACfC,GAAY,EAAK,mBACjB3H,GAAqB,EAAK,sBAC1B4H,GAAwB,EAAK,gBAC7BC,EAAkB,UAAS,UAC3BC,GAAY,EAAI,MAChBC,EAAQ,GACR,CAAC,GACD,MAAMnR,EAAa,CAAE4Q,QAAOC,QAAOC,UAASC,YAAW3H,qBAAoB4H,wBAAuBC,mBAClGpT,KAAK8S,IAAMA,EACX9S,KAAK+S,MAAQA,EACb/S,KAAKuT,OAAQ,EACbvT,KAAKgT,MAAQA,EACbhT,KAAKiT,QAAUA,EACfjT,KAAKuL,mBAAqBA,EAC1BvL,KAAKqT,UAAYA,EACjBrT,KAAK8I,GAAKX,IAGI,IAAVmL,IAAatT,KAAKb,GAAKwJ,EAAO6K,WAAW,SAAUrR,IACvDnC,KAAKyT,WAAazT,KAAKb,GAClBa,KAAKb,KAAIa,KAAKb,GAAKwJ,EAAO6K,WAAW,QAASrR,IAC9CnC,KAAKb,IAAIyJ,QAAQC,MAAM,kCAG5B7I,KAAKb,GAAGmM,SAAWtL,KAGnBA,KAAK0T,QAAQd,EAAOC,GAGpB7S,KAAKgQ,MAAQ,CAAC,EACdhQ,KAAKgQ,MAAM/E,UAAY,CAAEI,IAAKrL,KAAKb,GAAGsM,IAAK4C,IAAKrO,KAAKb,GAAGwU,MACxD3T,KAAKgQ,MAAM9E,cAAgB,CAAEuD,QAASzO,KAAKb,GAAGyU,UAC9C5T,KAAKgQ,MAAM/F,UAAW,EACtBjK,KAAKgQ,MAAMtF,UAAY1K,KAAKb,GAAGwL,IAC/B3K,KAAKgQ,MAAM6D,WAAY,EACvB7T,KAAKgQ,MAAMlF,UAAY9K,KAAKb,GAAG4L,OAC/B/K,KAAKgQ,MAAM8D,kBAAmB,EAC9B9T,KAAKgQ,MAAM+D,OAAQ,EACnB/T,KAAKgQ,MAAMgE,gBAAkB,EAC7BhU,KAAKgQ,MAAMiE,YAAc,KACzBjU,KAAKgQ,MAAMkE,SAAW,CAAEhP,EAAG,EAAGC,EAAG,EAAGyN,MAAO,KAAMC,OAAQ,MACzD7S,KAAKgQ,MAAMU,aAAe,GAC1B1Q,KAAKgQ,MAAMmE,kBAAoB,EAC/BnU,KAAKgQ,MAAMoE,YAAc,KACzBpU,KAAKgQ,MAAMpD,iBAAmB,IAAIC,IAClC7M,KAAKgQ,MAAMC,eAAiB,KAG5BjQ,KAAKqU,WAAa,CAAC,EAGfrU,KAAKyT,UACLzT,KAAKsU,aAAa,0BAClBtU,KAAKsU,aAAa,8BAElBtU,KAAKsU,aAAa,qBAClBtU,KAAKsU,aAAa,4BAClBtU,KAAKsU,aAAa,0BAClBtU,KAAKsU,aAAa,iCAClBtU,KAAKsU,aAAa,0BAClBtU,KAAKsU,aAAa,4BAClBtU,KAAKsU,aAAa,YAClBtU,KAAKsU,aAAa,uBAClBtU,KAAKsU,aAAa,uBAEtBtU,KAAKsU,aAAa,iCAClBtU,KAAKsU,aAAa,gCAClBtU,KAAKsU,aAAa,iCAClBtU,KAAKsU,aAAa,iCAClBtU,KAAKsU,aAAa,kCAClBtU,KAAKsU,aAAa,yCAGlBtU,KAAKuU,oBAAsBvU,KAAKsU,aAAa,yBAA0B,sBAAuB,4BAC9FtU,KAAKwU,oBAAsBxU,KAAKsU,aAAa,yBAA0B,sBAAuB,4BAC9FtU,KAAKyU,sBAAwBzU,KAAKsU,aAAa,yBAA0B,wBAAyB,8BAClGtU,KAAK0U,kBAAoB1U,KAAKsU,aAAa,0BAA2B,oBAAqB,wBAC3FtU,KAAK2U,gBAAkB3U,KAAKsU,aAAa,0BAA2B,kBAAmB,sBACvFtU,KAAK4U,kBAAoB5U,KAAKsU,aAAa,0BAA2B,oBAAqB,wBAC3FtU,KAAK6U,YAAc7U,KAAKsU,aAAa,qBAAsB,cAAe,oBAG1EtU,KAAK8U,WAAa,CAAC,EACnB9U,KAAK8U,WAAWC,gBAAkB/U,KAAKb,GAAG6V,aAAahV,KAAKb,GAAG8V,kCAC/DjV,KAAK8U,WAAWI,cAAgBlV,KAAKsU,aAAa,kCAC5CtU,KAAKb,GAAG6V,aAAahV,KAAKsU,aAAa,kCAAkCa,gCACzE,CACV,CAEA,OAAAzB,CAAQd,EAAOC,GACX7S,KAAK4S,MAAQA,EACb5S,KAAK6S,OAASA,EAEd7S,KAAKb,GAAGwJ,OAAOiK,MAAQA,EAAQ5S,KAAK8S,IACpC9S,KAAKb,GAAGwJ,OAAOkK,OAASA,EAAS7S,KAAK8S,IAEjC9S,KAAKb,GAAGwJ,OAAOyM,OACpBtV,OAAOC,OAAOC,KAAKb,GAAGwJ,OAAOyM,MAAO,CAChCxC,MAAOA,EAAQ,KACfC,OAAQA,EAAS,MAEzB,CAEA,WAAAwC,CAAYzC,EAAOC,EAAQ3N,EAAI,EAAGC,EAAI,GAC9BnF,KAAKgQ,MAAMkE,SAAStB,QAAUA,GAAS5S,KAAKgQ,MAAMkE,SAASrB,SAAWA,IAC1E7S,KAAKgQ,MAAMkE,SAAStB,MAAQA,EAC5B5S,KAAKgQ,MAAMkE,SAASrB,OAASA,EAC7B7S,KAAKgQ,MAAMkE,SAAShP,EAAIA,EACxBlF,KAAKgQ,MAAMkE,SAAS/O,EAAIA,EACxBnF,KAAKb,GAAG+U,SAAShP,EAAGC,EAAGyN,EAAOC,GAClC,CAEA,UAAAyC,CAAW1C,EAAOC,EAAQ3N,EAAI,EAAGC,EAAI,GACjCnF,KAAKb,GAAGoW,QAAQrQ,EAAGC,EAAGyN,EAAOC,EACjC,CAEA,MAAAxD,CAAOvG,IACoB,IAAnB9I,KAAKgQ,MAAMlH,KACf9I,KAAKb,GAAGkQ,OAAOvG,GACf9I,KAAKgQ,MAAMlH,IAAM,EACrB,CAEA,OAAAyG,CAAQzG,IACmB,IAAnB9I,KAAKgQ,MAAMlH,KACf9I,KAAKb,GAAGoQ,QAAQzG,GAChB9I,KAAKgQ,MAAMlH,IAAM,EACrB,CAEA,YAAA0C,CAAaH,EAAKgD,EAAKC,EAAUC,GAEzBvO,KAAKgQ,MAAM/E,UAAUI,MAAQA,GAC7BrL,KAAKgQ,MAAM/E,UAAUoD,MAAQA,GAC7BrO,KAAKgQ,MAAM/E,UAAUqD,WAAaA,GAClCtO,KAAKgQ,MAAM/E,UAAUsD,WAAaA,IAGtCvO,KAAKgQ,MAAM/E,UAAUI,IAAMA,EAC3BrL,KAAKgQ,MAAM/E,UAAUoD,IAAMA,EAC3BrO,KAAKgQ,MAAM/E,UAAUqD,SAAWA,EAChCtO,KAAKgQ,MAAM/E,UAAUsD,SAAWA,OACf+B,IAAbhC,EAAwBtO,KAAKb,GAAGqW,kBAAkBnK,EAAKgD,EAAKC,EAAUC,GACrEvO,KAAKb,GAAG8L,UAAUI,EAAKgD,GAChC,CAEA,gBAAAG,CAAiBC,EAASC,GACtBD,EAAUA,GAAWzO,KAAKb,GAAGyU,SACzB5T,KAAKgQ,MAAM9E,cAAcuD,UAAYA,GAAWzO,KAAKgQ,MAAM9E,cAAcwD,YAAcA,IAC3F1O,KAAKgQ,MAAM9E,cAAcuD,QAAUA,EACnCzO,KAAKgQ,MAAM9E,cAAcwD,UAAYA,OACnB4B,IAAd5B,EAAyB1O,KAAKb,GAAGsW,sBAAsBhH,EAASC,GAC/D1O,KAAKb,GAAG+L,cAAcuD,GAC/B,CAEA,WAAAiB,CAAY9F,GACJ5J,KAAKgQ,MAAM/F,WAAaL,IAC5B5J,KAAKgQ,MAAM/F,SAAWL,EACtB5J,KAAKb,GAAG8K,SAASL,GACrB,CAEA,YAAA+F,CAAa/F,GACL5J,KAAKgQ,MAAMtF,YAAcd,IAC7B5J,KAAKgQ,MAAMtF,UAAYd,EACvB5J,KAAKb,GAAGuL,UAAUd,GACtB,CAEA,YAAAgG,CAAahG,GACL5J,KAAKgQ,MAAM6D,YAAcjK,IAC7B5J,KAAKgQ,MAAM6D,UAAYjK,EACvB5J,KAAKb,GAAG0U,UAAUjK,GACtB,CAEA,YAAAiG,CAAajG,GACL5J,KAAKgQ,MAAMlF,YAAclB,IAC7B5J,KAAKgQ,MAAMlF,UAAYlB,EACvB5J,KAAKb,GAAG2L,UAAUlB,GACtB,CAEA,cAAA8L,CAAe9L,GACR5J,KAAKgQ,MAAM2F,cAAgB/L,IAC9B5J,KAAKgQ,MAAM2F,YAAc/L,EACzB5J,KAAKb,GAAGwW,YAAY/L,GACxB,CAEA,cAAA+E,CAAeC,EAAMC,EAAKC,GAElB9O,KAAKgQ,MAAM7E,cAAgByD,GAC1B5O,KAAKgQ,MAAMjB,aAAeF,GAC1B7O,KAAKgQ,MAAM4F,kBAAoB9G,IAGpC9O,KAAKgQ,MAAM7E,YAAcyD,GAAQ5O,KAAKb,GAAG0W,OACzC7V,KAAKgQ,MAAMjB,WAAaF,GAAO,EAC/B7O,KAAKgQ,MAAM4F,gBAAkB9G,GAAQ,EAErC9O,KAAKb,GAAGgM,YAAYyD,GAAQ5O,KAAKb,GAAG0W,OAAQhH,GAAO,EAAGC,GAAQ,GAClE,CAEA,YAAAE,CAAaC,EAAaC,EAAWC,GAE9BnP,KAAKgQ,MAAMf,cAAgBA,GAC1BjP,KAAKgQ,MAAM8F,mBAAqB5G,GAChClP,KAAKgQ,MAAM+F,mBAAqB5G,IAGpCnP,KAAKgQ,MAAMf,YAAcA,EACzBjP,KAAKgQ,MAAM8F,iBAAmB5G,EAC9BlP,KAAKgQ,MAAM+F,iBAAmB5G,EAE9BnP,KAAKb,GAAGiM,UAAU6D,EAAaC,EAAWC,GAE9C,CAEA,aAAA6G,CAAcpM,GACN5J,KAAKgQ,MAAMmE,oBAAsBvK,IACrC5J,KAAKgQ,MAAMmE,kBAAoBvK,EAC/B5J,KAAKb,GAAG6W,cAAchW,KAAKb,GAAG8W,SAAWrM,GAC7C,CAEA,eAAAsM,EAAgB,OAAE/U,EAASnB,KAAKb,GAAGgX,YAAW,OAAEC,EAAS,MAAS,CAAC,GAC3DpW,KAAKgQ,MAAMiE,cAAgBmC,IAC/BpW,KAAKgQ,MAAMiE,YAAcmC,EACzBpW,KAAKb,GAAG+W,gBAAgB/U,EAAQiV,GACpC,CAEA,YAAA9B,CAAa+B,EAAWC,EAAYC,GAEhC,OAAID,GAActW,KAAKb,GAAGmX,GAAoBtW,KAAKb,GAAGmX,GAAYE,KAAKxW,KAAKb,KAGvEa,KAAKqU,WAAWgC,KACjBrW,KAAKqU,WAAWgC,GAAarW,KAAKb,GAAGmV,aAAa+B,IAIjDC,EAGAtW,KAAKqU,WAAWgC,GAGdrW,KAAKqU,WAAWgC,GAAWE,GAASC,KAAKxW,KAAKqU,WAAWgC,IAHxB,KAHhBrW,KAAKqU,WAAWgC,GAO5C,CAEA,UAAAI,CAAWxT,EAAGC,GACV,OAAID,EAAEyF,cAAgBxF,EAAEwF,YACbzF,EAAEyF,YAAcxF,EAAEwF,YAClBzF,EAAEqF,QAAQQ,KAAO5F,EAAEoF,QAAQQ,GAC3B7F,EAAEqF,QAAQQ,GAAK5F,EAAEoF,QAAQQ,GACzB7F,EAAEyT,SAAWxT,EAAEwT,OACfzT,EAAEyT,OAASxT,EAAEwT,OAEbxT,EAAE4F,GAAK7F,EAAE6F,EAExB,CAEA,eAAA6N,CAAgB1T,EAAGC,GACf,OAAID,EAAEyF,cAAgBxF,EAAEwF,YACbzF,EAAEyF,YAAcxF,EAAEwF,YAEzBzF,EAAEyT,SAAWxT,EAAEwT,OACRxT,EAAEwT,OAASzT,EAAEyT,OAEbxT,EAAE4F,GAAK7F,EAAE6F,EAExB,CAEA,MAAA8N,CAAO3T,EAAGC,GACN,OAAID,EAAEyF,cAAgBxF,EAAEwF,YACbzF,EAAEyF,YAAcxF,EAAEwF,YAClBzF,EAAEqF,QAAQQ,KAAO5F,EAAEoF,QAAQQ,GAC3B7F,EAAEqF,QAAQQ,GAAK5F,EAAEoF,QAAQQ,GAEzB5F,EAAE4F,GAAK7F,EAAE6F,EAExB,CAEA,aAAA+N,EAAc,MAAEC,EAAK,OAAErN,EAAM,YAAEsN,EAAW,KAAEC,IACxC,IAAIC,EAAa,GAgBjB,GAdIxN,GAAUsN,GAAatN,EAAOjI,gBAGlCsV,EAAMI,UAAUjV,IACZ,IAAKA,EAAKkV,QAAS,OAAO,EACrBlV,EAAKuH,OAENuN,GAAe9U,EAAKwG,eAAiBgB,IAChCA,EAAOzH,sBAAsBC,IAGtCgV,EAAW3N,KAAKrH,GAAK,IAGrB+U,EAAM,CACN,MAAMI,EAAS,GACT5M,EAAc,GACd6M,EAAK,GAEXJ,EAAWnN,SAAS7H,IAEXA,EAAKqG,QAAQkC,YAEPvI,EAAKqG,QAAQsC,UACpBJ,EAAYlB,KAAKrH,GAEjBoV,EAAG/N,KAAKrH,GAJRmV,EAAO9N,KAAKrH,GAOhBA,EAAKyU,OAAS,EAGW,IAArBzU,EAAKyG,aAAsBzG,EAAKqG,QAAQsC,WAAcnB,IAG1DxH,EAAKnB,YAAYC,eAAeyR,GAChCA,EAASlR,aAAamI,EAAOtJ,sBAC7B8B,EAAKyU,OAASlE,EAASvM,EAAC,IAG5BmR,EAAOJ,KAAKhX,KAAKyW,YACjBjM,EAAYwM,KAAKhX,KAAK2W,iBACtBU,EAAGL,KAAKhX,KAAK4W,QAEbK,EAAaG,EAAOE,OAAO9M,EAAa6M,EAC5C,CAEA,OAAOJ,CACX,CAEA,MAAAM,EAAO,MAAET,EAAK,OAAErN,EAAM,OAAEtI,EAAS,KAAI,OAAEqP,GAAS,EAAI,KAAEwG,GAAO,EAAI,YAAED,GAAc,EAAI,MAAES,IACpE,OAAXrW,GAEAnB,KAAKkW,kBACLlW,KAAKqV,YAAYrV,KAAK4S,MAAQ5S,KAAK8S,IAAK9S,KAAK6S,OAAS7S,KAAK8S,OAG3D9S,KAAKkW,gBAAgB/U,GACrBnB,KAAKqV,YAAYlU,EAAOyR,MAAOzR,EAAO0R,UAGtC2E,GAAUxX,KAAKqT,YAAuB,IAAVmE,MAExBxX,KAAKgT,OAAW7R,IAAUA,EAAO6R,QACjChT,KAAKqP,OAAOrP,KAAKb,GAAGmQ,YACpBtP,KAAK4P,cAAa,KAInB5P,KAAKiT,UAAa9R,GAAUA,EAAO8R,WAClCjT,KAAKqP,OAAOrP,KAAKb,GAAG2Q,cACpB9P,KAAK0V,eAAe,MAGxB1V,KAAKb,GAAGqY,OACHxX,KAAKuT,MAAQvT,KAAKb,GAAGsY,iBAAmB,IACpCzX,KAAKgT,MAAQhT,KAAKb,GAAGuY,iBAAmB,IACxC1X,KAAKiT,QAAUjT,KAAKb,GAAGwY,mBAAqB,KAKrDnH,GAAQsG,EAAMlW,oBAGd6I,GAAQA,EAAO7I,oBAGAZ,KAAK6W,cAAc,CAAEC,QAAOrN,SAAQsN,cAAaC,SAEzDlN,SAAS7H,IAChBA,EAAKuH,KAAK,CAAEC,UAAS,GAE7B,E,kCCxYJ,MAAMmO,EAAa,IAAIC,WAAW,GAElC,SAASC,EAAWlO,GAChB,QAAQA,EAASA,EAAQ,EAC7B,CAEA,IAAIzB,EAAK,EAEF,MAAM4P,EACT,WAAA7Y,CACIC,GACA,MACI6Y,EAAK,OACL7W,EAAShC,EAAG8Y,WAAU,KACtB5X,EAAOlB,EAAG+Y,cAAa,OACvBC,EAAShZ,EAAGiZ,KAAI,eAChBC,EAAiBF,EAAM,MACvBG,EAAQnZ,EAAGoZ,cAAa,MACxBC,EAAQrZ,EAAGoZ,cAAa,MACxBE,EAAQtZ,EAAGoZ,cAAa,gBACxBG,EAAkBvX,KAAYhC,EAAG8Y,YAAc9Y,EAAGwZ,kBAAiB,UACnEC,GAAYF,EAAkBvZ,EAAG0Z,sBAAwB1Z,EAAG2Z,QAAM,UAClEC,EAAY5Z,EAAG2Z,OAAM,iBACrBhF,GAAmB,EAAK,gBACxBE,EAAkB,EAAC,MACnBD,EAAQ5S,IAAWhC,EAAG8Y,YAAc9Y,EAAG6Z,YAA0B,WACjEC,EAAa,EAAC,MACdC,EAAQ,EAAC,MACTtG,EAAK,OACLC,EAASD,EAAK,OACd5N,EAAS,GACT,CAAC,GAELhF,KAAKb,GAAKA,EACVa,KAAK8I,GAAKX,IAEVnI,KAAKgY,MAAQA,EACbhY,KAAKmB,OAASA,EACdnB,KAAKK,KAAOA,EACZL,KAAKmY,OAASA,EACdnY,KAAKqY,eAAiBA,EACtBrY,KAAK4Y,UAAYA,EACjB5Y,KAAK+Y,UAAYA,EACjB/Y,KAAKsY,MAAQA,EACbtY,KAAKwY,MAAQA,EACbxY,KAAKyY,MAAQA,EACbzY,KAAK0Y,gBAAkBA,EACvB1Y,KAAK8T,iBAAmBA,EACxB9T,KAAKgU,gBAAkBA,EACvBhU,KAAK+T,MAAQA,EACb/T,KAAKiZ,WAAaxY,KAAK0Y,IAAIF,EAAYjZ,KAAKb,GAAGmM,SAASwJ,WAAWI,eACnElV,KAAKkZ,MAAQA,EACblZ,KAAK4S,MAAQA,EACb5S,KAAK6S,OAASA,EACd7S,KAAKgF,OAASA,EACdhF,KAAKuQ,QAAUvQ,KAAKb,GAAGia,gBAEvBpZ,KAAKqZ,MAAQ,CACTrB,MAAO,MAIXhY,KAAKsZ,QAAUtZ,KAAKb,GAAGmM,SAAS0E,MAGhChQ,KAAKgQ,MAAQ,CAAC,EACdhQ,KAAKgQ,MAAM4I,UAAY5Y,KAAKb,GAAG0Z,sBAC/B7Y,KAAKgQ,MAAM+I,UAAY/Y,KAAKb,GAAG2Z,OAC/B9Y,KAAKgQ,MAAMsI,MAAQtY,KAAKb,GAAGoa,OAC3BvZ,KAAKgQ,MAAMwI,MAAQxY,KAAKb,GAAGoa,OAC3BvZ,KAAKgQ,MAAMiJ,WAAa,CAC5B,CAEA,IAAAzC,GAEQxW,KAAKsZ,QAAQ5I,aAAa1Q,KAAKsZ,QAAQnF,qBAAuBnU,KAAK8I,KACvE9I,KAAKb,GAAGqa,YAAYxZ,KAAKmB,OAAQnB,KAAKuQ,SACtCvQ,KAAKsZ,QAAQ5I,aAAa1Q,KAAKsZ,QAAQnF,mBAAqBnU,KAAK8I,GACrE,CAEA,MAAA0H,CAAOT,EAAc,GACjB,MAAM0J,IAAgBzZ,KAAKgY,QAAUhY,KAAKqZ,MAAMrB,QAAUhY,KAAKyZ,aAS/D,IANIA,GAAezZ,KAAKsZ,QAAQ5I,aAAaX,KAAiB/P,KAAK8I,MAE/D9I,KAAKb,GAAGmM,SAAS0K,cAAcjG,GAC/B/P,KAAKwW,QAGJiD,EAAL,CAgDA,GA/CAzZ,KAAKyZ,aAAc,EAEfzZ,KAAK+T,QAAU/T,KAAKsZ,QAAQvF,QAC5B/T,KAAKb,GAAGua,YAAY1Z,KAAKb,GAAGwa,oBAAqB3Z,KAAK+T,OACtD/T,KAAKsZ,QAAQvF,MAAQ/T,KAAK+T,OAG1B/T,KAAK8T,mBAAqB9T,KAAKsZ,QAAQxF,mBACvC9T,KAAKb,GAAGua,YAAY1Z,KAAKb,GAAGya,+BAAgC5Z,KAAK8T,kBACjE9T,KAAKsZ,QAAQxF,iBAAmB9T,KAAK8T,kBAGrC9T,KAAKgU,kBAAoBhU,KAAKsZ,QAAQtF,kBACtChU,KAAKb,GAAGua,YAAY1Z,KAAKb,GAAG0a,iBAAkB7Z,KAAKgU,iBACnDhU,KAAKsZ,QAAQtF,gBAAkBhU,KAAKgU,iBAGpChU,KAAK4Y,YAAc5Y,KAAKgQ,MAAM4I,YAC9B5Y,KAAKb,GAAG2a,cAAc9Z,KAAKmB,OAAQnB,KAAKb,GAAG4a,mBAAoB/Z,KAAK4Y,WACpE5Y,KAAKgQ,MAAM4I,UAAY5Y,KAAK4Y,WAG5B5Y,KAAK+Y,YAAc/Y,KAAKgQ,MAAM+I,YAC9B/Y,KAAKb,GAAG2a,cAAc9Z,KAAKmB,OAAQnB,KAAKb,GAAG6a,mBAAoBha,KAAK+Y,WACpE/Y,KAAKgQ,MAAM+I,UAAY/Y,KAAK+Y,WAG5B/Y,KAAKsY,QAAUtY,KAAKgQ,MAAMsI,QAC1BtY,KAAKb,GAAG2a,cAAc9Z,KAAKmB,OAAQnB,KAAKb,GAAG8a,eAAgBja,KAAKsY,OAChEtY,KAAKgQ,MAAMsI,MAAQtY,KAAKsY,OAGxBtY,KAAKwY,QAAUxY,KAAKgQ,MAAMwI,QAC1BxY,KAAKb,GAAG2a,cAAc9Z,KAAKmB,OAAQnB,KAAKb,GAAG+a,eAAgBla,KAAKwY,OAChExY,KAAKgQ,MAAMwI,MAAQxY,KAAKwY,OAGxBxY,KAAKyY,QAAUzY,KAAKgQ,MAAMyI,QAC1BzY,KAAKb,GAAG2a,cAAc9Z,KAAKmB,OAAQnB,KAAKb,GAAGgb,eAAgBna,KAAKyY,OAChEzY,KAAKgQ,MAAMyI,MAAQzY,KAAKyY,OAGxBzY,KAAKiZ,YAAcjZ,KAAKiZ,aAAejZ,KAAKgQ,MAAMiJ,aAClDjZ,KAAKb,GAAGib,cAAcpa,KAAKmB,OAAQnB,KAAKb,GAAGmM,SAASgJ,aAAa,kCAAkC+F,2BAA4Bra,KAAKiZ,YACpIjZ,KAAKgQ,MAAMiJ,WAAajZ,KAAKiZ,YAG7BjZ,KAAKgY,MAAO,CAMZ,GALIhY,KAAKgY,MAAMpF,QACX5S,KAAK4S,MAAQ5S,KAAKgY,MAAMpF,MACxB5S,KAAK6S,OAAS7S,KAAKgY,MAAMnF,QAGzB7S,KAAKmB,SAAWnB,KAAKb,GAAGwZ,iBAExB,IAAK,IAAI9W,EAAI,EAAGA,EAAI,EAAGA,IACnB7B,KAAKb,GAAGmb,WAAWta,KAAKb,GAAGob,4BAA8B1Y,EAAG7B,KAAKkZ,MAAOlZ,KAAKqY,eAAgBrY,KAAKmY,OAAQnY,KAAKK,KAAML,KAAKgY,MAAMnW,SAEjI,GAAI2Y,YAAYC,OAAOza,KAAKgY,OAE3BhY,KAAKmB,SAAWnB,KAAKb,GAAG8Y,WACxBjY,KAAKb,GAAGmb,WAAWta,KAAKmB,OAAQnB,KAAKkZ,MAAOlZ,KAAKqY,eAAgBrY,KAAK4S,MAAO5S,KAAK6S,OAAQ,EAAG7S,KAAKmY,OAAQnY,KAAKK,KAAML,KAAKgY,OACnHhY,KAAKmB,SAAWnB,KAAKb,GAAGub,kBAAoB1a,KAAKmB,SAAWnB,KAAKb,GAAG6Z,YAC3EhZ,KAAKb,GAAGwb,WAAW3a,KAAKmB,OAAQnB,KAAKkZ,MAAOlZ,KAAKqY,eAAgBrY,KAAK4S,MAAO5S,KAAK6S,OAAQ7S,KAAKgF,OAAQ,EAAGhF,KAAKmY,OAAQnY,KAAKK,KAAML,KAAKgY,YAExI,GAAIhY,KAAKgY,MAAM4C,oBAElB,IAAK,IAAI1B,EAAQ,EAAGA,EAAQlZ,KAAKgY,MAAMhT,OAAQkU,IAC3ClZ,KAAKb,GAAG0b,qBAAqB7a,KAAKmB,OAAQ+X,EAAOlZ,KAAKqY,eAAgBrY,KAAKgY,MAAMkB,GAAOtG,MAAO5S,KAAKgY,MAAMkB,GAAOrG,OAAQ,EAAG7S,KAAKgY,MAAMkB,GAAO4B,WAI9I9a,KAAKmB,SAAWnB,KAAKb,GAAG8Y,WACxBjY,KAAKb,GAAGmb,WAAWta,KAAKmB,OAAQnB,KAAKkZ,MAAOlZ,KAAKqY,eAAgBrY,KAAKmY,OAAQnY,KAAKK,KAAML,KAAKgY,OAE9FhY,KAAKb,GAAGwb,WAAW3a,KAAKmB,OAAQnB,KAAKkZ,MAAOlZ,KAAKqY,eAAgBrY,KAAK4S,MAAO5S,KAAK6S,OAAQ7S,KAAKgF,OAAQ,EAAGhF,KAAKmY,OAAQnY,KAAKK,KAAML,KAAKgY,OAI3IhY,KAAK0Y,kBAEA1Y,KAAKb,GAAGmM,SAASmI,UAAcqE,EAAW9X,KAAKgY,MAAMpF,QAAWkF,EAAW9X,KAAKgY,MAAMnF,QAKvF7S,KAAKb,GAAG4b,eAAe/a,KAAKmB,SAJ5BnB,KAAK0Y,iBAAkB,EACvB1Y,KAAKsY,MAAQtY,KAAKwY,MAAQxY,KAAKb,GAAGoZ,cAClCvY,KAAK4Y,UAAY5Y,KAAKb,GAAG2Z,SAOjC9Y,KAAKgb,UAAYhb,KAAKgb,UAC1B,MACI,GAAIhb,KAAKmB,SAAWnB,KAAKb,GAAGwZ,iBAExB,IAAK,IAAI9W,EAAI,EAAGA,EAAI,EAAGA,IACnB7B,KAAKb,GAAGmb,WAAWta,KAAKb,GAAGob,4BAA8B1Y,EAAG,EAAG7B,KAAKb,GAAGiZ,KAAM,EAAG,EAAG,EAAGpY,KAAKb,GAAGiZ,KAAMpY,KAAKb,GAAG+Y,cAAeN,QAExH5X,KAAK4S,MAER5S,KAAKmB,SAAWnB,KAAKb,GAAG8Y,WACxBjY,KAAKb,GAAGmb,WAAWta,KAAKmB,OAAQnB,KAAKkZ,MAAOlZ,KAAKqY,eAAgBrY,KAAK4S,MAAO5S,KAAK6S,OAAQ,EAAG7S,KAAKmY,OAAQnY,KAAKK,KAAM,MAErHL,KAAKb,GAAGwb,WAAW3a,KAAKmB,OAAQnB,KAAKkZ,MAAOlZ,KAAKqY,eAAgBrY,KAAK4S,MAAO5S,KAAK6S,OAAQ7S,KAAKgF,OAAQ,EAAGhF,KAAKmY,OAAQnY,KAAKK,KAAM,MAItIL,KAAKb,GAAGmb,WAAWta,KAAKmB,OAAQ,EAAGnB,KAAKb,GAAGiZ,KAAM,EAAG,EAAG,EAAGpY,KAAKb,GAAGiZ,KAAMpY,KAAKb,GAAG+Y,cAAeN,GAGvG5X,KAAKqZ,MAAMrB,MAAQhY,KAAKgY,KA/GA,CAgH5B,E,gDCpKG,SAAShX,EAASgC,EAAKC,EAAGC,GAC7B,IAAI+X,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GACPmY,EAAKnY,EAAE,GACPoY,EAAKnY,EAAE,GACPoY,EAAKpY,EAAE,GACPqY,EAAKrY,EAAE,GACPsY,EAAKtY,EAAE,GAMX,OAJAF,EAAI,GAAKiY,EAAKO,EAAKJ,EAAKC,EAAKH,EAAKK,EAAKJ,EAAKG,EAC5CtY,EAAI,GAAKkY,EAAKM,EAAKJ,EAAKE,EAAKH,EAAKE,EAAKJ,EAAKM,EAC5CvY,EAAI,GAAKmY,EAAKK,EAAKJ,EAAKG,EAAKN,EAAKK,EAAKJ,EAAKG,EAC5CrY,EAAI,GAAKoY,EAAKI,EAAKP,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,EACrCvY,CACX,CAoRO,MAAM,ECrUN,SAAcA,EAAKC,GAKtB,OAJAD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACJD,CACX,ED4Ua,EChUN,SAAaA,EAAKkC,EAAGC,EAAGc,EAAGC,GAK9B,OAJAlD,EAAI,GAAKkC,EACTlC,EAAI,GAAKmC,EACTnC,EAAI,GAAKiD,EACTjD,EAAI,GAAKkD,EACFlD,CACX,ED0Va,EC5QN,SAAaC,EAAGC,GACnB,OAAOD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,EAC9D,EDwSa,ECjUN,SAAmBF,EAAKC,GAC3B,IAAIiC,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GACNiD,EAAIjD,EAAE,GACNwY,EAAMvW,EAAIA,EAAIC,EAAIA,EAAIc,EAAIA,EAAIC,EAAIA,EAQtC,OAPIuV,EAAM,IACNA,EAAM,EAAIhb,KAAKib,KAAKD,IAExBzY,EAAI,GAAKkC,EAAIuW,EACbzY,EAAI,GAAKmC,EAAIsW,EACbzY,EAAI,GAAKiD,EAAIwV,EACbzY,EAAI,GAAKkD,EAAIuV,EACNzY,CACX,ECpGO,MAAM2Y,UAAarX,MACtB,WAAApF,CAAYgG,EAAI,EAAGC,EAAI,EAAGc,EAAI,EAAGC,EAAI,GACjCrG,MAAMqF,EAAGC,EAAGc,EAAGC,GACflG,KAAK4b,SAAW,OAGhB5b,KAAK6b,QAAU7b,KAGf,MAAM8b,EAAe,CAAC,IAAK,IAAK,IAAK,KACrC,OAAO,IAAIC,MAAM/b,KAAM,CACnB,GAAA2B,CAAIR,EAAQ6a,GACR,MAAMC,EAAUC,QAAQva,OAAOwa,WAE/B,OADIF,GAAWH,EAAaM,SAASJ,IAAW7a,EAAOya,WAChDK,CACX,GAER,CAEA,KAAI/W,GACA,OAAOlF,KAAK,EAChB,CAEA,KAAImF,GACA,OAAOnF,KAAK,EAChB,CAEA,KAAIiG,GACA,OAAOjG,KAAK,EAChB,CAEA,KAAIkG,GACA,OAAOlG,KAAK,EAChB,CAEA,KAAIkF,CAAE7D,GACFrB,KAAK6b,QAAQ,GAAKxa,EAClBrB,KAAK4b,UACT,CAEA,KAAIzW,CAAE9D,GACFrB,KAAK6b,QAAQ,GAAKxa,EAClBrB,KAAK4b,UACT,CAEA,KAAI3V,CAAE5E,GACFrB,KAAK6b,QAAQ,GAAKxa,EAClBrB,KAAK4b,UACT,CAEA,KAAI1V,CAAE7E,GACFrB,KAAK6b,QAAQ,GAAKxa,EAClBrB,KAAK4b,UACT,CAEA,QAAA/V,GFjDG,IAAkB7C,EEoDjB,OFpDiBA,EEkDChD,KAAK6b,SFjDvB,GAAK,EACT7Y,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EE+CLhD,KAAK4b,WACE5b,IACX,CAEA,GAAA2B,CAAIuD,EAAGC,EAAGc,EAAGC,GACT,OAAIhB,EAAEF,OAAehF,KAAK0C,KAAKwC,IAC/B,EAAalF,KAAK6b,QAAS3W,EAAGC,EAAGc,EAAGC,GACpClG,KAAK4b,WACE5b,KACX,CAEA,OAAAqc,CAAQpZ,GAGJ,OFLD,SAAiBD,EAAKC,EAAGoC,GAC5BA,GAAO,GAEP,IAAI4V,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GACPmY,EAAKnY,EAAE,GACPoY,EAAK5a,KAAK8E,IAAIF,GACdmW,EAAK/a,KAAKgF,IAAIJ,GAElBrC,EAAI,GAAKiY,EAAKO,EAAKJ,EAAKC,EACxBrY,EAAI,GAAKkY,EAAKM,EAAKL,EAAKE,EACxBrY,EAAI,GAAKmY,EAAKK,EAAKN,EAAKG,EACxBrY,EAAI,GAAKoY,EAAKI,EAAKP,EAAKI,CAE5B,CEZQ,CAAiBrb,KAAK6b,QAAS7b,KAAK6b,QAAS5Y,GAC7CjD,KAAK4b,WACE5b,IACX,CAEA,OAAAsc,CAAQrZ,GAGJ,OFcD,SAAiBD,EAAKC,EAAGoC,GAC5BA,GAAO,GAEP,IAAI4V,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GACPmY,EAAKnY,EAAE,GACPqY,EAAK7a,KAAK8E,IAAIF,GACdmW,EAAK/a,KAAKgF,IAAIJ,GAElBrC,EAAI,GAAKiY,EAAKO,EAAKL,EAAKG,EACxBtY,EAAI,GAAKkY,EAAKM,EAAKJ,EAAKE,EACxBtY,EAAI,GAAKmY,EAAKK,EAAKP,EAAKK,EACxBtY,EAAI,GAAKoY,EAAKI,EAAKN,EAAKI,CAE5B,CE/BQ,CAAiBtb,KAAK6b,QAAS7b,KAAK6b,QAAS5Y,GAC7CjD,KAAK4b,WACE5b,IACX,CAEA,OAAAuc,CAAQtZ,GAGJ,OFiCD,SAAiBD,EAAKC,EAAGoC,GAC5BA,GAAO,GAEP,IAAI4V,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GACPmY,EAAKnY,EAAE,GACPsY,EAAK9a,KAAK8E,IAAIF,GACdmW,EAAK/a,KAAKgF,IAAIJ,GAElBrC,EAAI,GAAKiY,EAAKO,EAAKN,EAAKK,EACxBvY,EAAI,GAAKkY,EAAKM,EAAKP,EAAKM,EACxBvY,EAAI,GAAKmY,EAAKK,EAAKJ,EAAKG,EACxBvY,EAAI,GAAKoY,EAAKI,EAAKL,EAAKI,CAE5B,CElDQ,CAAiBvb,KAAK6b,QAAS7b,KAAK6b,QAAS5Y,GAC7CjD,KAAK4b,WACE5b,IACX,CAEA,OAAAa,CAAQmF,EAAIhG,KAAK6b,SAGb,OF0GD,SAAgB7Y,EAAKC,GACxB,IAAIuZ,EAAKvZ,EAAE,GACPwZ,EAAKxZ,EAAE,GACPyZ,EAAKzZ,EAAE,GACP0Z,EAAK1Z,EAAE,GACPF,EAAMyZ,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EACzCC,EAAS7Z,EAAM,EAAMA,EAAM,EAI/BC,EAAI,IAAMwZ,EAAKI,EACf5Z,EAAI,IAAMyZ,EAAKG,EACf5Z,EAAI,IAAM0Z,EAAKE,EACf5Z,EAAI,GAAK2Z,EAAKC,CAElB,CE3HQ,CAAgB5c,KAAK6b,QAAS7V,GAC9BhG,KAAK4b,WACE5b,IACX,CAEA,SAAA6c,CAAU7W,EAAIhG,KAAK6b,SFgIhB,IAAmB7Y,EAAKC,EE7HvB,OF6HkBD,EE/HChD,KAAK6b,QF+HD5Y,EE/HU+C,EFgIrChD,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACZD,EAAI,GAAKC,EAAE,GElIPjD,KAAK4b,WACE5b,IACX,CAEA,IAAA0C,CAAKsD,GAGD,OAFA,EAAchG,KAAK6b,QAAS7V,GAC5BhG,KAAK4b,WACE5b,IACX,CAEA,SAAA8c,CAAU9W,EAAIhG,KAAK6b,SAGf,OAFA,EAAmB7b,KAAK6b,QAAS7V,GACjChG,KAAK4b,WACE5b,IACX,CAEA,QAAAgB,CAAS+b,EAAIC,GAOT,OANIA,EACA,EAAkBhd,KAAK6b,QAASkB,EAAIC,GAEpC,EAAkBhd,KAAK6b,QAAS7b,KAAK6b,QAASkB,GAElD/c,KAAK4b,WACE5b,IACX,CAEA,GAAA+C,CAAI1B,GACA,OAAO,EAAarB,KAAK6b,QAASxa,EACtC,CAEA,WAAA4b,CAAYC,GAGR,OFgHD,SAAkBla,EAAKtB,GAG1B,IACIyb,EADAC,EAAS1b,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAG7B,GAAI0b,EAAS,EAETD,EAAQ1c,KAAKib,KAAK0B,EAAS,GAC3Bpa,EAAI,GAAK,GAAMma,EACfA,EAAQ,GAAMA,EACdna,EAAI,IAAMtB,EAAE,GAAKA,EAAE,IAAMyb,EACzBna,EAAI,IAAMtB,EAAE,GAAKA,EAAE,IAAMyb,EACzBna,EAAI,IAAMtB,EAAE,GAAKA,EAAE,IAAMyb,MACtB,CAEH,IAAItb,EAAI,EACJH,EAAE,GAAKA,EAAE,KAAIG,EAAI,GACjBH,EAAE,GAAKA,EAAM,EAAJG,EAAQA,KAAIA,EAAI,GAC7B,IAAIwb,GAAKxb,EAAI,GAAK,EACdyb,GAAKzb,EAAI,GAAK,EAElBsb,EAAQ1c,KAAKib,KAAKha,EAAM,EAAJG,EAAQA,GAAKH,EAAM,EAAJ2b,EAAQA,GAAK3b,EAAM,EAAJ4b,EAAQA,GAAK,GAC/Dta,EAAInB,GAAK,GAAMsb,EACfA,EAAQ,GAAMA,EACdna,EAAI,IAAMtB,EAAM,EAAJ2b,EAAQC,GAAK5b,EAAM,EAAJ4b,EAAQD,IAAMF,EACzCna,EAAIqa,IAAM3b,EAAM,EAAJ2b,EAAQxb,GAAKH,EAAM,EAAJG,EAAQwb,IAAMF,EACzCna,EAAIsa,IAAM5b,EAAM,EAAJ4b,EAAQzb,GAAKH,EAAM,EAAJG,EAAQyb,IAAMH,CAC7C,CAGJ,CEjJQ,CAAkBnd,KAAK6b,QAASqB,GAChCld,KAAK4b,WACE5b,IACX,CAEA,SAAAud,CAAUC,EAAOC,GAIb,OFmJD,SAAmBza,EAAKwa,EAAOE,EAAQ,OAC1C,IAAIC,EAAKld,KAAK8E,IAAe,GAAXiY,EAAM,IACpBI,EAAKnd,KAAKgF,IAAe,GAAX+X,EAAM,IACpBK,EAAKpd,KAAK8E,IAAe,GAAXiY,EAAM,IACpBM,EAAKrd,KAAKgF,IAAe,GAAX+X,EAAM,IACpBO,EAAKtd,KAAK8E,IAAe,GAAXiY,EAAM,IACpBQ,EAAKvd,KAAKgF,IAAe,GAAX+X,EAAM,IAEV,QAAVE,GACA1a,EAAI,GAAK2a,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClC/a,EAAI,GAAK4a,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClC/a,EAAI,GAAK4a,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClChb,EAAI,GAAK4a,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACP1a,EAAI,GAAK2a,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClC/a,EAAI,GAAK4a,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClC/a,EAAI,GAAK4a,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClChb,EAAI,GAAK4a,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACP1a,EAAI,GAAK2a,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClC/a,EAAI,GAAK4a,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClC/a,EAAI,GAAK4a,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClChb,EAAI,GAAK4a,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACP1a,EAAI,GAAK2a,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClC/a,EAAI,GAAK4a,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClC/a,EAAI,GAAK4a,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClChb,EAAI,GAAK4a,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,GACP1a,EAAI,GAAK2a,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClC/a,EAAI,GAAK4a,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClC/a,EAAI,GAAK4a,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClChb,EAAI,GAAK4a,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,GACjB,QAAVL,IACP1a,EAAI,GAAK2a,EAAKG,EAAKE,EAAKJ,EAAKC,EAAKE,EAClC/a,EAAI,GAAK4a,EAAKC,EAAKG,EAAKL,EAAKG,EAAKC,EAClC/a,EAAI,GAAK4a,EAAKE,EAAKC,EAAKJ,EAAKE,EAAKG,EAClChb,EAAI,GAAK4a,EAAKE,EAAKE,EAAKL,EAAKE,EAAKE,EAI1C,CE/LQ,CAAmB/d,KAAK6b,QAAS2B,EAAOA,EAAME,OAEzCD,GAAYzd,KAAK4b,WACf5b,IACX,CAEA,aAAAie,CAAcC,EAAMjb,GAGhB,OFrHD,SAAsBD,EAAKkb,EAAM7Y,GACpCA,GAAY,GACZ,IAAIC,EAAI7E,KAAK8E,IAAIF,GACjBrC,EAAI,GAAKsC,EAAI4Y,EAAK,GAClBlb,EAAI,GAAKsC,EAAI4Y,EAAK,GAClBlb,EAAI,GAAKsC,EAAI4Y,EAAK,GAClBlb,EAAI,GAAKvC,KAAKgF,IAAIJ,EAEtB,CE2GQ,CAAsBrF,KAAK6b,QAASqC,EAAMjb,GAC1CjD,KAAK4b,WACE5b,IACX,CAEA,KAAAme,CAAMnY,EAAGoY,GAGL,OFJD,SAAepb,EAAKC,EAAGC,EAAGkb,GAG7B,IASIC,EAAOC,EAAOC,EAAOC,EAAQC,EAT7BxD,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GACPmY,EAAKnY,EAAE,GACPoY,EAAKnY,EAAE,GACPoY,EAAKpY,EAAE,GACPqY,EAAKrY,EAAE,GACPsY,EAAKtY,EAAE,GAKXob,EAAQrD,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,EAAKH,EAAKI,EAEvC8C,EAAQ,IACRA,GAASA,EACTjD,GAAMA,EACNC,GAAMA,EACNC,GAAMA,EACNC,GAAMA,GAGN,EAAM8C,EAAQ,MAEdD,EAAQ5d,KAAKie,KAAKJ,GAClBC,EAAQ9d,KAAK8E,IAAI8Y,GACjBG,EAAS/d,KAAK8E,KAAK,EAAM6Y,GAAKC,GAASE,EACvCE,EAAShe,KAAK8E,IAAI6Y,EAAIC,GAASE,IAI/BC,EAAS,EAAMJ,EACfK,EAASL,GAGbpb,EAAI,GAAKwb,EAASvD,EAAKwD,EAASpD,EAChCrY,EAAI,GAAKwb,EAAStD,EAAKuD,EAASnD,EAChCtY,EAAI,GAAKwb,EAASrD,EAAKsD,EAASlD,EAChCvY,EAAI,GAAKwb,EAASpD,EAAKqD,EAASjD,CAGpC,CE1CQ,CAAexb,KAAK6b,QAAS7b,KAAK6b,QAAS7V,EAAGoY,GAC9Cpe,KAAK4b,WACE5b,IACX,CAEA,SAAA2e,CAAU1b,EAAG2b,EAAI,GAMb,OALA5e,KAAK6b,QAAQ,GAAK5Y,EAAE2b,GACpB5e,KAAK6b,QAAQ,GAAK5Y,EAAE2b,EAAI,GACxB5e,KAAK6b,QAAQ,GAAK5Y,EAAE2b,EAAI,GACxB5e,KAAK6b,QAAQ,GAAK5Y,EAAE2b,EAAI,GACxB5e,KAAK4b,WACE5b,IACX,CAEA,OAAA6e,CAAQ5b,EAAI,GAAI2b,EAAI,GAKhB,OAJA3b,EAAE2b,GAAK5e,KAAK,GACZiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GACTiD,CACX,E,cCnKJ,MAAM6b,EAA0B,IAAI9V,EAAA,EAE7B,MAAM+V,UAAcza,MACvB,WAAApF,CAAYgG,EAAI,EAAGC,EAAID,EAAGe,EAAIf,EAAGwY,EAAQ,OACrC7d,MAAMqF,EAAGC,EAAGc,GACZjG,KAAK0d,MAAQA,EACb1d,KAAK4b,SAAW,OAGhB5b,KAAK6b,QAAU7b,KAGf,MAAM8b,EAAe,CAAC,IAAK,IAAK,KAChC,OAAO,IAAIC,MAAM/b,KAAM,CACnB,GAAA2B,CAAIR,EAAQ6a,GACR,MAAMC,EAAUC,QAAQva,OAAOwa,WAE/B,OADIF,GAAWH,EAAaM,SAASJ,IAAW7a,EAAOya,WAChDK,CACX,GAER,CAEA,KAAI/W,GACA,OAAOlF,KAAK,EAChB,CAEA,KAAImF,GACA,OAAOnF,KAAK,EAChB,CAEA,KAAIiG,GACA,OAAOjG,KAAK,EAChB,CAEA,KAAIkF,CAAE7D,GACFrB,KAAK6b,QAAQ,GAAKxa,EAClBrB,KAAK4b,UACT,CAEA,KAAIzW,CAAE9D,GACFrB,KAAK6b,QAAQ,GAAKxa,EAClBrB,KAAK4b,UACT,CAEA,KAAI3V,CAAE5E,GACFrB,KAAK6b,QAAQ,GAAKxa,EAClBrB,KAAK4b,UACT,CAEA,GAAAja,CAAIuD,EAAGC,EAAID,EAAGe,EAAIf,GACd,OAAIA,EAAEF,OAAehF,KAAK0C,KAAKwC,IAC/BlF,KAAK6b,QAAQ,GAAK3W,EAClBlF,KAAK6b,QAAQ,GAAK1W,EAClBnF,KAAK6b,QAAQ,GAAK5V,EAClBjG,KAAK4b,WACE5b,KACX,CAEA,IAAA0C,CAAKrB,GAKD,OAJArB,KAAK6b,QAAQ,GAAKxa,EAAE,GACpBrB,KAAK6b,QAAQ,GAAKxa,EAAE,GACpBrB,KAAK6b,QAAQ,GAAKxa,EAAE,GACpBrB,KAAK4b,WACE5b,IACX,CAEA,OAAAgf,CAAQtB,GAGJ,OAFA1d,KAAK6b,QAAQ6B,MAAQA,EACrB1d,KAAK4b,WACE5b,IACX,CAEA,kBAAAif,CAAmBvd,EAAGgc,EAAQ1d,KAAK0d,OAG/B,OC7ED,SAA4B1a,EAAKtB,EAAGgc,EAAQ,OACjC,QAAVA,GACA1a,EAAI,GAAKvC,KAAKye,KAAKze,KAAK0Y,IAAI1Y,KAAK0e,IAAIzd,EAAE,IAAK,GAAI,IAC5CjB,KAAK2e,IAAI1d,EAAE,IAAM,QACjBsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,KAC7BsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,MAE7BsB,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,IAC5BsB,EAAI,GAAK,IAEI,QAAV0a,GACP1a,EAAI,GAAKvC,KAAKye,MAAMze,KAAK0Y,IAAI1Y,KAAK0e,IAAIzd,EAAE,IAAK,GAAI,IAC7CjB,KAAK2e,IAAI1d,EAAE,IAAM,QACjBsB,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,KAC5BsB,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,MAE5BsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,IAC7BsB,EAAI,GAAK,IAEI,QAAV0a,GACP1a,EAAI,GAAKvC,KAAKye,KAAKze,KAAK0Y,IAAI1Y,KAAK0e,IAAIzd,EAAE,IAAK,GAAI,IAC5CjB,KAAK2e,IAAI1d,EAAE,IAAM,QACjBsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,KAC7BsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,MAE7BsB,EAAI,GAAK,EACTA,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,MAEf,QAAVgc,GACP1a,EAAI,GAAKvC,KAAKye,MAAMze,KAAK0Y,IAAI1Y,KAAK0e,IAAIzd,EAAE,IAAK,GAAI,IAC7CjB,KAAK2e,IAAI1d,EAAE,IAAM,QACjBsB,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,KAC5BsB,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,MAE5BsB,EAAI,GAAK,EACTA,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,MAEhB,QAAVgc,GACP1a,EAAI,GAAKvC,KAAKye,KAAKze,KAAK0Y,IAAI1Y,KAAK0e,IAAIzd,EAAE,IAAK,GAAI,IAC5CjB,KAAK2e,IAAI1d,EAAE,IAAM,QACjBsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,IAC7BsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,MAE7BsB,EAAI,GAAK,EACTA,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,OAEf,QAAVgc,IACP1a,EAAI,GAAKvC,KAAKye,MAAMze,KAAK0Y,IAAI1Y,KAAK0e,IAAIzd,EAAE,IAAK,GAAI,IAC7CjB,KAAK2e,IAAI1d,EAAE,IAAM,QACjBsB,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,IAC5BsB,EAAI,GAAKvC,KAAK4e,MAAM3d,EAAE,GAAIA,EAAE,MAE5BsB,EAAI,GAAKvC,KAAK4e,OAAO3d,EAAE,GAAIA,EAAE,KAC7BsB,EAAI,GAAK,GAKrB,CDiBQ,CAA6BhD,KAAK6b,QAASna,EAAGgc,GAC9C1d,KAAK4b,WACE5b,IACX,CAEA,cAAA+F,CAAeC,EAAG0X,EAAQ1d,KAAK0d,MAAOD,GAKlC,OAJAqB,EAAQ/Y,eAAeC,GACvBhG,KAAK6b,QAAQoD,mBAAmBH,EAASpB,GAEpCD,GAAYzd,KAAK4b,WACf5b,IACX,CAEA,SAAA2e,CAAU1b,EAAG2b,EAAI,GAIb,OAHA5e,KAAK6b,QAAQ,GAAK5Y,EAAE2b,GACpB5e,KAAK6b,QAAQ,GAAK5Y,EAAE2b,EAAI,GACxB5e,KAAK6b,QAAQ,GAAK5Y,EAAE2b,EAAI,GACjB5e,IACX,CAEA,OAAA6e,CAAQ5b,EAAI,GAAI2b,EAAI,GAIhB,OAHA3b,EAAE2b,GAAK5e,KAAK,GACZiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GACTiD,CACX,EEhGG,MAAMoF,EACT,WAAAnJ,GACIc,KAAKsf,OAAS,KACdtf,KAAKuf,SAAW,GAChBvf,KAAKmX,SAAU,EAEfnX,KAAKwf,OAAS,IAAIxW,EAAA,EAClBhJ,KAAKc,YAAc,IAAIkI,EAAA,EACvBhJ,KAAKyf,kBAAmB,EACxBzf,KAAK0f,wBAAyB,EAE9B1f,KAAKoC,SAAW,IAAIud,EAAA,EACpB3f,KAAK4f,WAAa,IAAIjE,EACtB3b,KAAK0F,MAAQ,IAAIia,EAAA,EAAK,GACtB3f,KAAK6f,SAAW,IAAId,EACpB/e,KAAK8f,GAAK,IAAIH,EAAA,EAAK,EAAG,EAAG,GAEzB3f,KAAK6f,SAAShE,QAAQD,SAAW,IAAM5b,KAAK4f,WAAWrC,UAAUvd,KAAK6f,UAAU,GAChF7f,KAAK4f,WAAW/D,QAAQD,SAAW,IAAM5b,KAAK6f,SAAS9Z,eAAe/F,KAAK4f,gBAAYtP,GAAW,EACtG,CAEA,SAAAyP,CAAUT,EAAQU,GAAe,GACzBhgB,KAAKsf,QAAUA,IAAWtf,KAAKsf,QAAQtf,KAAKsf,OAAOW,YAAYjgB,MAAM,GACzEA,KAAKsf,OAASA,EACVU,GAAgBV,GAAQA,EAAOY,SAASlgB,MAAM,EACtD,CAEA,QAAAkgB,CAASC,EAAOC,GAAc,IACpBpgB,KAAKuf,SAASc,QAAQF,IAAQngB,KAAKuf,SAASjW,KAAK6W,GACnDC,GAAaD,EAAMJ,UAAU/f,MAAM,EAC3C,CAEA,WAAAigB,CAAYE,EAAOC,GAAc,IACtBpgB,KAAKuf,SAASc,QAAQF,IAAQngB,KAAKuf,SAASe,OAAOtgB,KAAKuf,SAASc,QAAQF,GAAQ,GACpFC,GAAaD,EAAMJ,UAAU,MAAM,EAC3C,CAEA,iBAAAnf,CAAkB2f,GACVvgB,KAAKyf,kBAAkBzf,KAAKwgB,gBAC5BxgB,KAAK0f,wBAA0Ba,KACX,OAAhBvgB,KAAKsf,OAAiBtf,KAAKc,YAAY4B,KAAK1C,KAAKwf,QAChDxf,KAAKc,YAAYE,SAAShB,KAAKsf,OAAOxe,YAAad,KAAKwf,QAC7Dxf,KAAK0f,wBAAyB,EAC9Ba,GAAQ,GAGZ,IAAK,IAAI1e,EAAI,EAAGuP,EAAIpR,KAAKuf,SAASva,OAAQnD,EAAIuP,EAAGvP,IAC7C7B,KAAKuf,SAAS1d,GAAGjB,kBAAkB2f,EAE3C,CAEA,YAAAC,GACIxgB,KAAKwf,OAAOiB,QAAQzgB,KAAK4f,WAAY5f,KAAKoC,SAAUpC,KAAK0F,OACzD1F,KAAK0f,wBAAyB,CAClC,CAEA,QAAAxI,CAASwJ,GAEL,IAAIA,EAAS1gB,MACb,IAAK,IAAI6B,EAAI,EAAGuP,EAAIpR,KAAKuf,SAASva,OAAQnD,EAAIuP,EAAGvP,IAC7C7B,KAAKuf,SAAS1d,GAAGqV,SAASwJ,EAElC,CAEA,SAAAC,GACI3gB,KAAKwf,OAAOmB,UAAU3gB,KAAK4f,WAAW/D,QAAS7b,KAAKoC,SAAUpC,KAAK0F,OACnE1F,KAAK6f,SAAS9Z,eAAe/F,KAAK4f,WACtC,CAEA,MAAA1e,CAAOC,EAAQyf,GAAS,GAChBA,EAAQ5gB,KAAKwf,OAAOte,OAAOlB,KAAKoC,SAAUjB,EAAQnB,KAAK8f,IACtD9f,KAAKwf,OAAOte,OAAOC,EAAQnB,KAAKoC,SAAUpC,KAAK8f,IACpD9f,KAAKwf,OAAOqB,YAAY7gB,KAAK4f,WAAW/D,SACxC7b,KAAK6f,SAAS9Z,eAAe/F,KAAK4f,WACtC,E,gDC3DJ,MAAMpN,EAA2B,IAAImN,EAAA,EAErC,IAAIxX,EAAK,EACL2Y,EAAU,EAGVC,GAAiB,EAEd,MAAMC,EACT,WAAA9hB,CAAYC,EAAIgD,EAAa,CAAC,GACrBhD,EAAGwJ,QAAQC,QAAQC,MAAM,+CAC9B7I,KAAKb,GAAKA,EACVa,KAAKmC,WAAaA,EAClBnC,KAAK8I,GAAKX,IAGVnI,KAAKihB,KAAO,CAAC,EAEbjhB,KAAKkhB,UAAY,CAAEC,MAAO,EAAGC,MAAO,GACpCphB,KAAKqhB,eAAiB,EAGtBrhB,KAAKb,GAAGmM,SAASqJ,gBAAgB,MACjC3U,KAAKb,GAAGmM,SAASgW,gBAAkB,KAGnCthB,KAAKsZ,QAAUtZ,KAAKb,GAAGmM,SAAS0E,MAGhC,IAAK,IAAIuR,KAAOpf,EACZnC,KAAKwhB,aAAaD,EAAKpf,EAAWof,GAE1C,CAEA,YAAAC,CAAaD,EAAKE,GA4Bd,GA3BAzhB,KAAKmC,WAAWof,GAAOE,EAGvBA,EAAK3Y,GAAKgY,IACVW,EAAKC,KAAOD,EAAKC,MAAQ,EACzBD,EAAKphB,KACDohB,EAAKphB,OACJohB,EAAK3G,KAAK5b,cAAgB8R,aACrBhR,KAAKb,GAAGwiB,MACRF,EAAK3G,KAAK5b,cAAgB0iB,YAC1B5hB,KAAKb,GAAG0iB,eACR7hB,KAAKb,GAAG2iB,cAClBL,EAAKtgB,OAAiB,UAARogB,EAAkBvhB,KAAKb,GAAG4iB,qBAAuB/hB,KAAKb,GAAG6iB,aACvEP,EAAKQ,WAAaR,EAAKQ,aAAc,EACrCR,EAAKS,OAAST,EAAKS,QAAU,EAC7BT,EAAKU,OAASV,EAAKU,QAAU,EAC7BV,EAAKL,MAAQK,EAAKL,QAAUK,EAAKS,OAAST,EAAK3G,KAAKsH,WAAaX,EAAKS,OAAST,EAAK3G,KAAK9V,OAASyc,EAAKC,MACvGD,EAAKY,QAAUZ,EAAKa,WAAa,EACjCb,EAAKhI,aAAc,EACnBgI,EAAKc,MAAQd,EAAKc,OAASviB,KAAKb,GAAGqjB,YAE9Bf,EAAKrL,QAENpW,KAAKyiB,gBAAgBhB,GAIrBA,EAAKY,QAAS,CAEd,GADAriB,KAAK0iB,aAAc,EACf1iB,KAAKqhB,gBAAkBrhB,KAAKqhB,iBAAmBI,EAAKL,MAAQK,EAAKY,QAEjE,OADAzZ,QAAQoC,KAAK,+DACLhL,KAAKqhB,eAAiB5gB,KAAK0Y,IAAInZ,KAAKqhB,eAAgBI,EAAKL,MAAQK,EAAKY,SAElFriB,KAAKqhB,eAAiBI,EAAKL,MAAQK,EAAKY,OAC5C,KAAmB,UAARd,EACPvhB,KAAKkhB,UAAUE,MAAQK,EAAKL,MACpBphB,KAAKmC,WAAWwgB,QACxB3iB,KAAKkhB,UAAUE,MAAQ3gB,KAAK0e,IAAInf,KAAKkhB,UAAUE,MAAOK,EAAKL,OAEnE,CAEA,eAAAqB,CAAgBhB,GACZ,MAAMmB,GAAenB,EAAKrL,OACtBwM,IAAanB,EAAKrL,OAASpW,KAAKb,GAAG0jB,gBACnC7iB,KAAKsZ,QAAQlF,cAAgBqN,EAAKrL,SAClCpW,KAAKb,GAAG2jB,WAAWrB,EAAKtgB,OAAQsgB,EAAKrL,QACrCpW,KAAKsZ,QAAQlF,YAAcqN,EAAKrL,QAEhCwM,EACA5iB,KAAKb,GAAG4jB,WAAWtB,EAAKtgB,OAAQsgB,EAAK3G,KAAM2G,EAAKc,OAEhDviB,KAAKb,GAAG6jB,cAAcvB,EAAKtgB,OAAQ,EAAGsgB,EAAK3G,MAE/C2G,EAAKhI,aAAc,CACvB,CAEA,QAAAwJ,CAASrZ,GACL5J,KAAKwhB,aAAa,QAAS5X,EAC/B,CAEA,YAAAsZ,CAAa/B,EAAOC,GAChBphB,KAAKkhB,UAAUC,MAAQA,EACvBnhB,KAAKkhB,UAAUE,MAAQA,CAC3B,CAEA,iBAAA+B,CAAkBvZ,GACd5J,KAAKqhB,eAAiBzX,CAC1B,CAEA,SAAAwZ,CAAU9a,GACNtI,KAAKihB,KAAK3Y,EAAQ6F,gBAAkBnO,KAAKb,GAAGmM,SAASoJ,oBACrD1U,KAAKb,GAAGmM,SAASqJ,gBAAgB3U,KAAKihB,KAAK3Y,EAAQ6F,iBACnDnO,KAAKqjB,eAAe/a,EACxB,CAEA,cAAA+a,CAAe/a,GAEXA,EAAQoF,mBAAmB5D,SAAQ,CAACmE,GAAYb,OAAM/M,WAElD,IAAKL,KAAKmC,WAAWiL,GAEjB,YADAxE,QAAQoC,KAAK,oBAAoBoC,wBAIrC,MAAMqU,EAAOzhB,KAAKmC,WAAWiL,GAE7BpN,KAAKb,GAAG2jB,WAAWrB,EAAKtgB,OAAQsgB,EAAKrL,QACrCpW,KAAKsZ,QAAQlF,YAAcqN,EAAKrL,OAGhC,IAAIkN,EAAS,EACA,QAATjjB,IAAgBijB,EAAS,GAChB,QAATjjB,IAAgBijB,EAAS,GAChB,QAATjjB,IAAgBijB,EAAS,GAE7B,MAAM5B,EAAOD,EAAKC,KAAO4B,EACnBpB,EAAoB,IAAXoB,EAAe,EAAIA,EAASA,EAAS,EAC9CnB,EAAoB,IAAXmB,EAAe,EAAa,EAATA,EAElC,IAAK,IAAIzhB,EAAI,EAAGA,EAAIyhB,EAAQzhB,IACxB7B,KAAKb,GAAGokB,oBAAoBtV,EAAWpM,EAAG6f,EAAMD,EAAKphB,KAAMohB,EAAKQ,WAAYR,EAAKS,OAASA,EAAQT,EAAKU,OAAStgB,EAAIsgB,GACpHniB,KAAKb,GAAGqkB,wBAAwBvV,EAAWpM,GAI3C7B,KAAKb,GAAGmM,SAASiJ,oBAAoBtG,EAAWpM,EAAG4f,EAAKY,QAC5D,IAIAriB,KAAKmC,WAAWwgB,OAAO3iB,KAAKb,GAAG2jB,WAAW9iB,KAAKb,GAAG4iB,qBAAsB/hB,KAAKmC,WAAWwgB,MAAMvM,OACtG,CAEA,IAAA5M,EAAK,QAAElB,EAAO,KAAEC,EAAOvI,KAAKb,GAAGqJ,YACvBxI,KAAKb,GAAGmM,SAASgW,kBAAoB,GAAGthB,KAAK8I,MAAMR,EAAQ6F,mBACtDnO,KAAKihB,KAAK3Y,EAAQ6F,iBAAiBnO,KAAKojB,UAAU9a,GACvDtI,KAAKb,GAAGmM,SAASqJ,gBAAgB3U,KAAKihB,KAAK3Y,EAAQ6F,iBACnDnO,KAAKb,GAAGmM,SAASgW,gBAAkB,GAAGthB,KAAK8I,MAAMR,EAAQ6F,kBAI7D7F,EAAQoF,mBAAmB5D,SAAQ,CAACmE,GAAYb,WAC5C,MAAMqU,EAAOzhB,KAAKmC,WAAWiL,GACzBqU,EAAKhI,aAAazZ,KAAKyiB,gBAAgBhB,EAAK,IAIpD,IAAIgC,EAAuB,EACvBzjB,KAAKmC,WAAWwgB,OAAOtiB,OAASL,KAAKb,GAAG2iB,eAAc2B,EAAuB,GAE7EzjB,KAAK0iB,YACD1iB,KAAKmC,WAAWwgB,MAChB3iB,KAAKb,GAAGmM,SAASmJ,sBACblM,EACAvI,KAAKkhB,UAAUE,MACfphB,KAAKmC,WAAWwgB,MAAMtiB,KACtBL,KAAKmC,WAAWwgB,MAAMR,OAASniB,KAAKkhB,UAAUC,MAAQsC,EACtDzjB,KAAKqhB,gBAGTrhB,KAAKb,GAAGmM,SAASkJ,oBAAoBjM,EAAMvI,KAAKkhB,UAAUC,MAAOnhB,KAAKkhB,UAAUE,MAAOphB,KAAKqhB,gBAG5FrhB,KAAKmC,WAAWwgB,MAChB3iB,KAAKb,GAAGukB,aACJnb,EACAvI,KAAKkhB,UAAUE,MACfphB,KAAKmC,WAAWwgB,MAAMtiB,KACtBL,KAAKmC,WAAWwgB,MAAMR,OAASniB,KAAKkhB,UAAUC,MAAQsC,GAG1DzjB,KAAKb,GAAGwkB,WAAWpb,EAAMvI,KAAKkhB,UAAUC,MAAOnhB,KAAKkhB,UAAUE,MAG1E,CAEA,WAAAwC,GAEI,MAAMnC,EAAOzhB,KAAKmC,WAAWC,SAE7B,OAAIqf,EAAK3G,KAAa2G,EAClBV,OAAJ,GACAnY,QAAQoC,KAAK,mDACL+V,GAAiB,EAC7B,CAEA,kBAAA8C,CAAmBpC,GACVA,IAAMA,EAAOzhB,KAAK4jB,eACvB,MAAME,EAAQrC,EAAK3G,KAGboH,EAAST,EAAKC,KAEf1hB,KAAKqC,SACNrC,KAAKqC,OAAS,CACV8W,IAAK,IAAIwG,EAAA,EACTR,IAAK,IAAIQ,EAAA,EACTld,OAAQ,IAAIkd,EAAA,EACZja,MAAO,IAAIia,EAAA,EACXrd,OAAQC,MAIhB,MAAM4W,EAAMnZ,KAAKqC,OAAO8W,IAClBgG,EAAMnf,KAAKqC,OAAO8c,IAClB1c,EAASzC,KAAKqC,OAAOI,OACrBiD,EAAQ1F,KAAKqC,OAAOqD,MAE1ByT,EAAIxX,IAAKY,KACT4c,EAAIxd,KAAKY,KAGT,IAAK,IAAIV,EAAI,EAAGuP,EAAI0S,EAAM9e,OAAQnD,EAAIuP,EAAGvP,GAAKqgB,EAAQ,CAClD,MAAMhd,EAAI4e,EAAMjiB,GACVsD,EAAI2e,EAAMjiB,EAAI,GACdoE,EAAI6d,EAAMjiB,EAAI,GAEpBsX,EAAIjU,EAAIzE,KAAK0Y,IAAIjU,EAAGiU,EAAIjU,GACxBiU,EAAIhU,EAAI1E,KAAK0Y,IAAIhU,EAAGgU,EAAIhU,GACxBgU,EAAIlT,EAAIxF,KAAK0Y,IAAIlT,EAAGkT,EAAIlT,GAExBkZ,EAAIja,EAAIzE,KAAK0e,IAAIja,EAAGia,EAAIja,GACxBia,EAAIha,EAAI1E,KAAK0e,IAAIha,EAAGga,EAAIha,GACxBga,EAAIlZ,EAAIxF,KAAK0e,IAAIlZ,EAAGkZ,EAAIlZ,EAC5B,CAEAP,EAAMqe,IAAI5E,EAAKhG,GACf1W,EAAOuhB,IAAI7K,EAAKgG,GAAK8E,OAAO,EAChC,CAEA,qBAAAzhB,CAAsBif,GACbA,IAAMA,EAAOzhB,KAAK4jB,eACvB,MAAME,EAAQrC,EAAK3G,KAGboH,EAAST,EAAKC,KAEf1hB,KAAKqC,QAAQrC,KAAK6jB,mBAAmBpC,GAE1C,IAAIyC,EAAc,EAClB,IAAK,IAAIriB,EAAI,EAAGuP,EAAI0S,EAAM9e,OAAQnD,EAAIuP,EAAGvP,GAAKqgB,EAC1C1P,EAASmM,UAAUmF,EAAOjiB,GAC1BqiB,EAAczjB,KAAK0e,IAAI+E,EAAalkB,KAAKqC,OAAOI,OAAO0hB,gBAAgB3R,IAG3ExS,KAAKqC,OAAOC,OAAS7B,KAAKib,KAAKwI,EACnC,CAEA,MAAAtT,GACI,IAAK,IAAI2Q,KAAOvhB,KAAKihB,KACjBjhB,KAAKb,GAAGmM,SAASsJ,kBAAkB5U,KAAKihB,KAAKM,WACtCvhB,KAAKihB,KAAKM,GAErB,IAAK,IAAIA,KAAOvhB,KAAKmC,WACjBnC,KAAKb,GAAGilB,aAAapkB,KAAKmC,WAAWof,GAAKnL,eACnCpW,KAAKmC,WAAWof,EAE/B,EClSG,MAAM8C,UAAcrD,EACvB,WAAA9hB,CAAYC,GAAI,MAAEyT,EAAQ,EAAC,OAAEC,EAAS,EAAC,cAAEyR,EAAgB,EAAC,eAAEC,EAAiB,EAAC,WAAEpiB,EAAa,CAAC,GAAM,CAAC,GACjG,MAAMqiB,EAAQF,EACRG,EAAQF,EAGRG,GAAOF,EAAQ,IAAMC,EAAQ,GAC7BE,EAAaH,EAAQC,EAAQ,EAG7BriB,EAAW,IAAI4O,aAAmB,EAAN0T,GAC5B7hB,EAAS,IAAImO,aAAmB,EAAN0T,GAC1BE,EAAK,IAAI5T,aAAmB,EAAN0T,GACtB/B,EAAQgC,EAAa,MAAQ,IAAIE,YAAYF,GAAc,IAAI/C,YAAY+C,GAEjFN,EAAMS,WAAW1iB,EAAUS,EAAQ+hB,EAAIjC,EAAO/P,EAAOC,EAAQ,EAAG2R,EAAOC,GAEvE3kB,OAAOC,OAAOoC,EAAY,CACtBC,SAAU,CAAEsf,KAAM,EAAG5G,KAAM1Y,GAC3BS,OAAQ,CAAE6e,KAAM,EAAG5G,KAAMjY,GACzB+hB,GAAI,CAAElD,KAAM,EAAG5G,KAAM8J,GACrBjC,MAAO,CAAE7H,KAAM6H,KAGnB9iB,MAAMV,EAAIgD,EACd,CAEA,iBAAO2iB,CAAW1iB,EAAUS,EAAQ+hB,EAAIjC,EAAO/P,EAAOC,EAAQG,EAAOwR,EAAOC,EAAOM,EAAI,EAAG1jB,EAAI,EAAG6E,EAAI,EAAG8e,EAAO,EAAGC,GAAO,EAAIpjB,EAAI,EAAGqjB,EAAK,GACrI,MAAMC,EAAKtjB,EACLujB,EAAOxS,EAAQ4R,EACfa,EAAOxS,EAAS4R,EAEtB,IAAK,IAAIa,EAAK,EAAGA,GAAMb,EAAOa,IAAM,CAChC,IAAIngB,EAAImgB,EAAKD,EAAOxS,EAAS,EAC7B,IAAK,IAAI0S,EAAK,EAAGA,GAAMf,EAAOe,IAAM1jB,IAAK,CACrC,IAAIqD,EAAIqgB,EAAKH,EAAOxS,EAAQ,EAa5B,GAXAxQ,EAAa,EAAJP,EAAQkjB,GAAK7f,EAAI8f,EAC1B5iB,EAAa,EAAJP,EAAQR,GAAK8D,EAAI8f,EAC1B7iB,EAAa,EAAJP,EAAQqE,GAAK8M,EAAQ,EAE9BnQ,EAAW,EAAJhB,EAAQkjB,GAAK,EACpBliB,EAAW,EAAJhB,EAAQR,GAAK,EACpBwB,EAAW,EAAJhB,EAAQqE,GAAK8M,GAAS,EAAI,GAAK,EAEtC4R,EAAO,EAAJ/iB,GAAS0jB,EAAKf,EACjBI,EAAO,EAAJ/iB,EAAQ,GAAK,EAAIyjB,EAAKb,EAErBa,IAAOb,GAASc,IAAOf,EAAO,SAClC,IAAIvhB,EAAIkiB,EAAKI,EAAKD,GAAMd,EAAQ,GAC5BthB,EAAIiiB,EAAKI,GAAMD,EAAK,IAAMd,EAAQ,GAClChf,EAAI2f,EAAKI,GAAMD,EAAK,IAAMd,EAAQ,GAAK,EACvCgB,EAAIL,EAAKI,EAAKD,GAAMd,EAAQ,GAAK,EAErC7B,EAAW,EAALuC,GAAUjiB,EAChB0f,EAAW,EAALuC,EAAS,GAAKhiB,EACpByf,EAAW,EAALuC,EAAS,GAAKM,EACpB7C,EAAW,EAALuC,EAAS,GAAKhiB,EACpByf,EAAW,EAALuC,EAAS,GAAK1f,EACpBmd,EAAW,EAALuC,EAAS,GAAKM,EACpBN,GACJ,CACJ,CACJ,E,gDC6IG,SAAShb,EAAYjH,GACxB,IAAIE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRoE,EAAMpE,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRqE,EAAMrE,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,IACRsE,EAAMtE,EAAE,IACRuE,EAAMvE,EAAE,IACRwE,EAAMxE,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IAgBZ,OAdUE,EAAMI,EAAMH,EAAME,IAWlBK,EAAMgE,EAAMJ,EAAMG,IAVlBvE,EAAMK,EAAMH,EAAMC,IASlBI,EAAMiE,EAAMJ,EAAME,IARlBtE,EAAMmE,EAAMD,EAAM/D,IAOlBI,EAAMgE,EAAM/D,EAAM8D,IANlBrE,EAAMI,EAAMH,EAAME,IAKlBE,EAAMkE,EAAMJ,EAAMC,IAJlBpE,EAAMkE,EAAMD,EAAM9D,IAGlBE,EAAMiE,EAAM/D,EAAM6D,IAFlBnE,EAAMiE,EAAMD,EAAM7D,IAClBC,EAAMgE,EAAM/D,EAAM8D,EAShC,CAUO,SAASxG,EAASgC,EAAKC,EAAGC,GAC7B,IAAIC,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRoE,EAAMpE,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRqE,EAAMrE,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,IACRsE,EAAMtE,EAAE,IACRuE,EAAMvE,EAAE,IACRwE,EAAMxE,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IAGRwiB,EAAKviB,EAAE,GACPwiB,EAAKxiB,EAAE,GACPyiB,EAAKziB,EAAE,GACP0iB,EAAK1iB,EAAE,GAgCX,OA/BAF,EAAI,GAAKyiB,EAAKtiB,EAAMuiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKpe,EAC/CxE,EAAI,GAAKyiB,EAAKriB,EAAMsiB,EAAKniB,EAAMoiB,EAAKjiB,EAAMkiB,EAAKne,EAC/CzE,EAAI,GAAKyiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKhiB,EAAMiiB,EAAKle,EAC/C1E,EAAI,GAAKyiB,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKje,EAE/C8d,EAAKviB,EAAE,GACPwiB,EAAKxiB,EAAE,GACPyiB,EAAKziB,EAAE,GACP0iB,EAAK1iB,EAAE,GACPF,EAAI,GAAKyiB,EAAKtiB,EAAMuiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKpe,EAC/CxE,EAAI,GAAKyiB,EAAKriB,EAAMsiB,EAAKniB,EAAMoiB,EAAKjiB,EAAMkiB,EAAKne,EAC/CzE,EAAI,GAAKyiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKhiB,EAAMiiB,EAAKle,EAC/C1E,EAAI,GAAKyiB,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKje,EAE/C8d,EAAKviB,EAAE,GACPwiB,EAAKxiB,EAAE,GACPyiB,EAAKziB,EAAE,IACP0iB,EAAK1iB,EAAE,IACPF,EAAI,GAAKyiB,EAAKtiB,EAAMuiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKpe,EAC/CxE,EAAI,GAAKyiB,EAAKriB,EAAMsiB,EAAKniB,EAAMoiB,EAAKjiB,EAAMkiB,EAAKne,EAC/CzE,EAAI,IAAMyiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKhiB,EAAMiiB,EAAKle,EAChD1E,EAAI,IAAMyiB,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKje,EAEhD8d,EAAKviB,EAAE,IACPwiB,EAAKxiB,EAAE,IACPyiB,EAAKziB,EAAE,IACP0iB,EAAK1iB,EAAE,IACPF,EAAI,IAAMyiB,EAAKtiB,EAAMuiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKpe,EAChDxE,EAAI,IAAMyiB,EAAKriB,EAAMsiB,EAAKniB,EAAMoiB,EAAKjiB,EAAMkiB,EAAKne,EAChDzE,EAAI,IAAMyiB,EAAKpiB,EAAMqiB,EAAKliB,EAAMmiB,EAAKhiB,EAAMiiB,EAAKle,EAChD1E,EAAI,IAAMyiB,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKpe,EAAMqe,EAAKje,EACzC3E,CACX,CAyMO,SAAS6iB,EAAW7iB,EAAK8iB,GAC5B,IAAInhB,EAAMmhB,EAAI,GACVlhB,EAAMkhB,EAAI,GACVC,EAAMD,EAAI,GACVhhB,EAAMghB,EAAI,GACV/gB,EAAM+gB,EAAI,GACVE,EAAMF,EAAI,GACVG,EAAMH,EAAI,GACVI,EAAMJ,EAAI,GACVK,EAAML,EAAI,IAMd,OAJA9iB,EAAI,GAAKvC,KAAK2lB,MAAMzhB,EAAKC,EAAKmhB,GAC9B/iB,EAAI,GAAKvC,KAAK2lB,MAAMthB,EAAKC,EAAKihB,GAC9BhjB,EAAI,GAAKvC,KAAK2lB,MAAMH,EAAKC,EAAKC,GAEvBnjB,CACX,CA6BO,MAAM6d,EAAc,WACvB,MAAMwF,EAAO,CAAC,EAAG,EAAG,GAEpB,OAAO,SAAUrjB,EAAK8iB,GAClB,IAAIQ,EAAUD,EACdR,EAAWS,EAASR,GAEpB,IAAIS,EAAM,EAAID,EAAQ,GAClBE,EAAM,EAAIF,EAAQ,GAClBG,EAAM,EAAIH,EAAQ,GAElBI,EAAOZ,EAAI,GAAKS,EAChBI,EAAOb,EAAI,GAAKU,EAChBI,EAAOd,EAAI,GAAKW,EAChBI,EAAOf,EAAI,GAAKS,EAChBO,EAAOhB,EAAI,GAAKU,EAChBO,EAAOjB,EAAI,GAAKW,EAChBO,EAAOlB,EAAI,GAAKS,EAChBU,EAAOnB,EAAI,GAAKU,EAChBU,EAAOpB,EAAI,IAAMW,EAEjBU,EAAQT,EAAOI,EAAOI,EACtBE,EAAI,EA4BR,OA1BID,EAAQ,GACRC,EAA6B,EAAzB3mB,KAAKib,KAAKyL,EAAQ,GACtBnkB,EAAI,GAAK,IAAOokB,EAChBpkB,EAAI,IAAM+jB,EAAOE,GAAQG,EACzBpkB,EAAI,IAAMgkB,EAAOJ,GAAQQ,EACzBpkB,EAAI,IAAM2jB,EAAOE,GAAQO,GAClBV,EAAOI,GAAQJ,EAAOQ,GAC7BE,EAA0C,EAAtC3mB,KAAKib,KAAK,EAAMgL,EAAOI,EAAOI,GAClClkB,EAAI,IAAM+jB,EAAOE,GAAQG,EACzBpkB,EAAI,GAAK,IAAOokB,EAChBpkB,EAAI,IAAM2jB,EAAOE,GAAQO,EACzBpkB,EAAI,IAAMgkB,EAAOJ,GAAQQ,GAClBN,EAAOI,GACdE,EAA0C,EAAtC3mB,KAAKib,KAAK,EAAMoL,EAAOJ,EAAOQ,GAClClkB,EAAI,IAAMgkB,EAAOJ,GAAQQ,EACzBpkB,EAAI,IAAM2jB,EAAOE,GAAQO,EACzBpkB,EAAI,GAAK,IAAOokB,EAChBpkB,EAAI,IAAM+jB,EAAOE,GAAQG,IAEzBA,EAA0C,EAAtC3mB,KAAKib,KAAK,EAAMwL,EAAOR,EAAOI,GAClC9jB,EAAI,IAAM2jB,EAAOE,GAAQO,EACzBpkB,EAAI,IAAMgkB,EAAOJ,GAAQQ,EACzBpkB,EAAI,IAAM+jB,EAAOE,GAAQG,EACzBpkB,EAAI,GAAK,IAAOokB,GAGbpkB,CACX,CACH,CApD0B,GA6apB,SAASghB,EAAIhhB,EAAKC,EAAGC,GAiBxB,OAhBAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACbF,CACX,CAUO,SAASqkB,EAASrkB,EAAKC,EAAGC,GAiB7B,OAhBAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACpBF,EAAI,IAAMC,EAAE,IAAMC,EAAE,IACbF,CACX,CC//BO,MAAMgG,UAAa1E,MACtB,WAAApF,CACIqF,EAAM,EACNC,EAAM,EACNC,EAAM,EACN6iB,EAAM,EACN5iB,EAAM,EACNC,EAAM,EACNC,EAAM,EACNmhB,EAAM,EACNlhB,EAAM,EACNC,EAAM,EACNC,EAAM,EACNihB,EAAM,EACNuB,EAAM,EACNtB,EAAM,EACNC,EAAM,EACNC,EAAM,GAGN,OADAtmB,MAAM0E,EAAKC,EAAKC,EAAK6iB,EAAK5iB,EAAKC,EAAKC,EAAKmhB,EAAKlhB,EAAKC,EAAKC,EAAKihB,EAAKuB,EAAKtB,EAAKC,EAAKC,GAC1EnmB,IACX,CAEA,KAAIkF,GACA,OAAOlF,KAAK,GAChB,CAEA,KAAImF,GACA,OAAOnF,KAAK,GAChB,CAEA,KAAIiG,GACA,OAAOjG,KAAK,GAChB,CAEA,KAAIkG,GACA,OAAOlG,KAAK,GAChB,CAEA,KAAIkF,CAAE7D,GACFrB,KAAK,IAAMqB,CACf,CAEA,KAAI8D,CAAE9D,GACFrB,KAAK,IAAMqB,CACf,CAEA,KAAI4E,CAAE5E,GACFrB,KAAK,IAAMqB,CACf,CAEA,KAAI6E,CAAE7E,GACFrB,KAAK,IAAMqB,CACf,CAEA,GAAAM,CAAI4C,EAAKC,EAAKC,EAAK6iB,EAAK5iB,EAAKC,EAAKC,EAAKmhB,EAAKlhB,EAAKC,EAAKC,EAAKihB,EAAKuB,EAAKtB,EAAKC,EAAKC,GAC3E,OAAI5hB,EAAIS,OAAehF,KAAK0C,KAAK6B,IDrBlC,SAAavB,EAAKuB,EAAKC,EAAKC,EAAK6iB,EAAK5iB,EAAKC,EAAKC,EAAKmhB,EAAKlhB,EAAKC,EAAKC,EAAKihB,EAAKuB,EAAKtB,EAAKC,EAAKC,GAChGnjB,EAAI,GAAKuB,EACTvB,EAAI,GAAKwB,EACTxB,EAAI,GAAKyB,EACTzB,EAAI,GAAKskB,EACTtkB,EAAI,GAAK0B,EACT1B,EAAI,GAAK2B,EACT3B,EAAI,GAAK4B,EACT5B,EAAI,GAAK+iB,EACT/iB,EAAI,GAAK6B,EACT7B,EAAI,GAAK8B,EACT9B,EAAI,IAAM+B,EACV/B,EAAI,IAAMgjB,EACVhjB,EAAI,IAAMukB,EACVvkB,EAAI,IAAMijB,EACVjjB,EAAI,IAAMkjB,EACVljB,EAAI,IAAMmjB,CAEd,CCIQ,CAAanmB,KAAMuE,EAAKC,EAAKC,EAAK6iB,EAAK5iB,EAAKC,EAAKC,EAAKmhB,EAAKlhB,EAAKC,EAAKC,EAAKihB,EAAKuB,EAAKtB,EAAKC,EAAKC,GACvFnmB,KACX,CAEA,SAAAiF,CAAU5D,EAAGK,EAAI1B,MAEb,ODyPD,SAAmBgD,EAAKC,EAAG5B,GAC9B,IAGI8B,EAAKC,EAAKC,EAAKgE,EACf/D,EAAKC,EAAKC,EAAK8D,EACf7D,EAAKC,EAAKC,EAAK4D,EALfrC,EAAI7D,EAAE,GACN8D,EAAI9D,EAAE,GACN4E,EAAI5E,EAAE,GAKN4B,IAAMD,GACNA,EAAI,IAAMC,EAAE,GAAKiC,EAAIjC,EAAE,GAAKkC,EAAIlC,EAAE,GAAKgD,EAAIhD,EAAE,IAC7CD,EAAI,IAAMC,EAAE,GAAKiC,EAAIjC,EAAE,GAAKkC,EAAIlC,EAAE,GAAKgD,EAAIhD,EAAE,IAC7CD,EAAI,IAAMC,EAAE,GAAKiC,EAAIjC,EAAE,GAAKkC,EAAIlC,EAAE,IAAMgD,EAAIhD,EAAE,IAC9CD,EAAI,IAAMC,EAAE,GAAKiC,EAAIjC,EAAE,GAAKkC,EAAIlC,EAAE,IAAMgD,EAAIhD,EAAE,MAE9CE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRoE,EAAMpE,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRqE,EAAMrE,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,IACRsE,EAAMtE,EAAE,IAERD,EAAI,GAAKG,EACTH,EAAI,GAAKI,EACTJ,EAAI,GAAKK,EACTL,EAAI,GAAKqE,EACTrE,EAAI,GAAKM,EACTN,EAAI,GAAKO,EACTP,EAAI,GAAKQ,EACTR,EAAI,GAAKsE,EACTtE,EAAI,GAAKS,EACTT,EAAI,GAAKU,EACTV,EAAI,IAAMW,EACVX,EAAI,IAAMuE,EAEVvE,EAAI,IAAMG,EAAM+B,EAAI5B,EAAM6B,EAAI1B,EAAMwC,EAAIhD,EAAE,IAC1CD,EAAI,IAAMI,EAAM8B,EAAI3B,EAAM4B,EAAIzB,EAAMuC,EAAIhD,EAAE,IAC1CD,EAAI,IAAMK,EAAM6B,EAAI1B,EAAM2B,EAAIxB,EAAMsC,EAAIhD,EAAE,IAC1CD,EAAI,IAAMqE,EAAMnC,EAAIoC,EAAMnC,EAAIoC,EAAMtB,EAAIhD,EAAE,IAIlD,CCzSQ,CAAmBjD,KAAM0B,EAAGL,GACrBrB,IACX,CAEA,MAAAoF,CAAO/D,EAAG6c,EAAMxc,EAAI1B,MAEhB,OD8UD,SAAgBgD,EAAKC,EAAGoC,EAAK6Y,GAChC,IAII5Y,EAAGE,EAAG4Y,EACNjb,EAAKC,EAAKC,EAAKgE,EACf/D,EAAKC,EAAKC,EAAK8D,EACf7D,EAAKC,EAAKC,EAAK4D,EACf3D,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,EACVC,EAAKC,EAAKC,EAVVc,EAAIgZ,EAAK,GACT/Y,EAAI+Y,EAAK,GACTjY,EAAIiY,EAAK,GACTzC,EAAMhb,KAAK2lB,MAAMlhB,EAAGC,EAAGc,GASvBxF,KAAK2e,IAAI3D,GA/ZD,OAmaZA,EAAM,EAAIA,EACVvW,GAAKuW,EACLtW,GAAKsW,EACLxV,GAAKwV,EAELnW,EAAI7E,KAAK8E,IAAIF,GACbG,EAAI/E,KAAKgF,IAAIJ,GACb+Y,EAAI,EAAI5Y,EAERrC,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRoE,EAAMpE,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRqE,EAAMrE,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,IACRsE,EAAMtE,EAAE,IAGRW,EAAMsB,EAAIA,EAAIkZ,EAAI5Y,EAClB3B,EAAMsB,EAAID,EAAIkZ,EAAInY,EAAIX,EACtBxB,EAAMmC,EAAIf,EAAIkZ,EAAIjZ,EAAIG,EACtBvB,EAAMmB,EAAIC,EAAIiZ,EAAInY,EAAIX,EACtBtB,EAAMmB,EAAIA,EAAIiZ,EAAI5Y,EAClBvB,EAAMgC,EAAId,EAAIiZ,EAAIlZ,EAAII,EACtBpB,EAAMgB,EAAIe,EAAImY,EAAIjZ,EAAIG,EACtBnB,EAAMgB,EAAIc,EAAImY,EAAIlZ,EAAII,EACtBlB,EAAM6B,EAAIA,EAAImY,EAAI5Y,EAGlBxC,EAAI,GAAKG,EAAMS,EAAMN,EAAMO,EAAMJ,EAAMK,EACvCd,EAAI,GAAKI,EAAMQ,EAAML,EAAMM,EAAMH,EAAMI,EACvCd,EAAI,GAAKK,EAAMO,EAAMJ,EAAMK,EAAMF,EAAMG,EACvCd,EAAI,GAAKqE,EAAMzD,EAAM0D,EAAMzD,EAAM0D,EAAMzD,EACvCd,EAAI,GAAKG,EAAMY,EAAMT,EAAMU,EAAMP,EAAMQ,EACvCjB,EAAI,GAAKI,EAAMW,EAAMR,EAAMS,EAAMN,EAAMO,EACvCjB,EAAI,GAAKK,EAAMU,EAAMP,EAAMQ,EAAML,EAAMM,EACvCjB,EAAI,GAAKqE,EAAMtD,EAAMuD,EAAMtD,EAAMuD,EAAMtD,EACvCjB,EAAI,GAAKG,EAAMe,EAAMZ,EAAMa,EAAMV,EAAMW,EACvCpB,EAAI,GAAKI,EAAMc,EAAMX,EAAMY,EAAMT,EAAMU,EACvCpB,EAAI,IAAMK,EAAMa,EAAMV,EAAMW,EAAMR,EAAMS,EACxCpB,EAAI,IAAMqE,EAAMnD,EAAMoD,EAAMnD,EAAMoD,EAAMnD,EAEpCnB,IAAMD,IAENA,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,KAGpB,CCvZQ,CAAgBjD,KAAM0B,EAAGL,EAAG6c,GACrBle,IACX,CAEA,KAAA0F,CAAMrE,EAAGK,EAAI1B,MAET,ODwSD,SAAegD,EAAKC,EAAG5B,GAC1B,IAAI6D,EAAI7D,EAAE,GACN8D,EAAI9D,EAAE,GACN4E,EAAI5E,EAAE,GAEV2B,EAAI,GAAKC,EAAE,GAAKiC,EAChBlC,EAAI,GAAKC,EAAE,GAAKiC,EAChBlC,EAAI,GAAKC,EAAE,GAAKiC,EAChBlC,EAAI,GAAKC,EAAE,GAAKiC,EAChBlC,EAAI,GAAKC,EAAE,GAAKkC,EAChBnC,EAAI,GAAKC,EAAE,GAAKkC,EAChBnC,EAAI,GAAKC,EAAE,GAAKkC,EAChBnC,EAAI,GAAKC,EAAE,GAAKkC,EAChBnC,EAAI,GAAKC,EAAE,GAAKgD,EAChBjD,EAAI,GAAKC,EAAE,GAAKgD,EAChBjD,EAAI,IAAMC,EAAE,IAAMgD,EAClBjD,EAAI,IAAMC,EAAE,IAAMgD,EAClBjD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,GAEhB,CC/TQ,CAAejD,KAAM0B,EAAgB,iBAANL,EAAiB,CAACA,EAAGA,EAAGA,GAAKA,GACrDrB,IACX,CAEA,GAAAgkB,CAAIre,EAAIC,GAGJ,OAFIA,EAAI,EAAa5F,KAAM2F,EAAIC,GAC1B,EAAa5F,KAAMA,KAAM2F,GACvB3F,IACX,CAEA,GAAA+jB,CAAIpe,EAAIC,GAGJ,OAFIA,EAAI,EAAkB5F,KAAM2F,EAAIC,GAC/B,EAAkB5F,KAAMA,KAAM2F,GAC5B3F,IACX,CAEA,QAAAgB,CAAS2E,EAAIC,GDi7BV,IAAwB5C,EAAKC,EAAGC,ECz6B/B,OAPKyC,EAAGX,OAEGY,EACP,EAAkB5F,KAAM2F,EAAIC,GAE5B,EAAkB5F,KAAMA,KAAM2F,ID26BN1C,EC/6BMjD,KD+6BHkD,EC/6BSyC,GD+6BjB3C,EC/6BKhD,MDg7B5B,GAAKiD,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,EAClBF,EAAI,IAAMC,EAAE,IAAMC,GCz7BPlD,IACX,CAEA,QAAA6F,GDtCG,IAAkB7C,ECwCjB,ODxCiBA,ECuCChD,MDtClB,GAAK,EACTgD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,ECwBChD,IACX,CAEA,IAAA0C,CAAKhB,GD/FF,IAAcsB,EAAKC,ECiGlB,ODjGkBA,ECgGEvB,GDhGPsB,ECgGChD,MD/Fd,GAAKiD,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,IACZD,EAAI,IAAMC,EAAE,ICiFDjD,IACX,CAEA,eAAAQ,EAAgB,IAAElB,EAAG,OAAEC,EAAM,KAAEH,EAAI,IAAEC,GAAQ,CAAC,GAE1C,ODstBD,SAAqB2D,EAAKwkB,EAAMjoB,EAAQH,EAAMC,GACjD,IAAIgK,EAAI,EAAM5I,KAAKgnB,IAAID,EAAO,GAC1BE,EAAK,GAAKtoB,EAAOC,GACrB2D,EAAI,GAAKqG,EAAI9J,EACbyD,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKqG,EACTrG,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO3D,EAAMD,GAAQsoB,EACzB1kB,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAAI3D,EAAMD,EAAOsoB,EAC3B1kB,EAAI,IAAM,CAEd,CC3uBQ,CAAqBhD,KAAMV,EAAKC,EAAQH,EAAMC,GACvCW,IACX,CAEA,cAAAW,EAAe,KAAEnB,EAAI,MAAEC,EAAK,OAAEC,EAAM,IAAEC,EAAG,KAAEP,EAAI,IAAEC,IAE7C,ODmvBD,SAAe2D,EAAKxD,EAAMC,EAAOC,EAAQC,EAAKP,EAAMC,GACvD,IAAIsoB,EAAK,GAAKnoB,EAAOC,GACjBmoB,EAAK,GAAKloB,EAASC,GACnB+nB,EAAK,GAAKtoB,EAAOC,GACrB2D,EAAI,IAAM,EAAI2kB,EACd3kB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAI4kB,EACd5kB,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EAAI0kB,EACd1kB,EAAI,IAAM,EACVA,EAAI,KAAOxD,EAAOC,GAASkoB,EAC3B3kB,EAAI,KAAOrD,EAAMD,GAAUkoB,EAC3B5kB,EAAI,KAAO3D,EAAMD,GAAQsoB,EACzB1kB,EAAI,IAAM,CAEd,CCzwBQ,CAAehD,KAAMR,EAAMC,EAAOC,EAAQC,EAAKP,EAAMC,GAC9CW,IACX,CAEA,cAAA+F,CAAeC,GAEX,ODwpBD,SAAkBhD,EAAKgD,GAC1B,IAAId,EAAIc,EAAE,GACNb,EAAIa,EAAE,GACNC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAKjB,EAAIA,EACTkB,EAAKjB,EAAIA,EACTkB,EAAKJ,EAAIA,EAETK,EAAKpB,EAAIiB,EACTI,EAAKpB,EAAIgB,EACTK,EAAKrB,EAAIiB,EACTK,EAAKR,EAAIE,EACTO,EAAKT,EAAIG,EACTO,EAAKV,EAAII,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAEbrD,EAAI,GAAK,EAAIwD,EAAKG,EAClB3D,EAAI,GAAKuD,EAAKO,EACd9D,EAAI,GAAKyD,EAAKI,EACd7D,EAAI,GAAK,EAETA,EAAI,GAAKuD,EAAKO,EACd9D,EAAI,GAAK,EAAIsD,EAAKK,EAClB3D,EAAI,GAAK0D,EAAKE,EACd5D,EAAI,GAAK,EAETA,EAAI,GAAKyD,EAAKI,EACd7D,EAAI,GAAK0D,EAAKE,EACd5D,EAAI,IAAM,EAAIsD,EAAKE,EACnBxD,EAAI,IAAM,EAEVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,CAGd,CCjsBQ,CAAkBhD,KAAMgG,GACjBhG,IACX,CAEA,WAAA6nB,CAAYxmB,GAIR,OAHArB,KAAKkF,EAAI7D,EAAE,GACXrB,KAAKmF,EAAI9D,EAAE,GACXrB,KAAKiG,EAAI5E,EAAE,GACJrB,IACX,CAEA,OAAAa,CAAQa,EAAI1B,MAER,ODMD,SAAgBgD,EAAKC,GACxB,IAAIE,EAAMF,EAAE,GACRG,EAAMH,EAAE,GACRI,EAAMJ,EAAE,GACRoE,EAAMpE,EAAE,GACRK,EAAML,EAAE,GACRM,EAAMN,EAAE,GACRO,EAAMP,EAAE,GACRqE,EAAMrE,EAAE,GACRQ,EAAMR,EAAE,GACRS,EAAMT,EAAE,GACRU,EAAMV,EAAE,IACRsE,EAAMtE,EAAE,IACRuE,EAAMvE,EAAE,IACRwE,EAAMxE,EAAE,IACRyE,EAAMzE,EAAE,IACR0E,EAAM1E,EAAE,IAERW,EAAMT,EAAMI,EAAMH,EAAME,EACxBO,EAAMV,EAAMK,EAAMH,EAAMC,EACxBQ,EAAMX,EAAMmE,EAAMD,EAAM/D,EACxBsE,EAAMxE,EAAMI,EAAMH,EAAME,EACxBsE,EAAMzE,EAAMkE,EAAMD,EAAM9D,EACxBuE,EAAMzE,EAAMiE,EAAMD,EAAM7D,EACxBuE,EAAMtE,EAAMgE,EAAM/D,EAAM8D,EACxBQ,EAAMvE,EAAMiE,EAAM/D,EAAM6D,EACxBS,EAAMxE,EAAMkE,EAAMJ,EAAMC,EACxBU,EAAMxE,EAAMgE,EAAM/D,EAAM8D,EACxB1D,EAAML,EAAMiE,EAAMJ,EAAME,EACxBzD,EAAML,EAAMgE,EAAMJ,EAAMG,EAGxBP,EAAMvD,EAAMI,EAAMH,EAAME,EAAMD,EAAMoE,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAEvEZ,IAGLA,EAAM,EAAMA,EAEZnE,EAAI,IAAMO,EAAMS,EAAMR,EAAMO,EAAMuD,EAAMY,GAAOf,EAC/CnE,EAAI,IAAMK,EAAMU,EAAMX,EAAMY,EAAMqD,EAAMa,GAAOf,EAC/CnE,EAAI,IAAMyE,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,GAAOT,EAC/CnE,EAAI,IAAMW,EAAMkE,EAAMnE,EAAMoE,EAAMP,EAAMK,GAAOT,EAC/CnE,EAAI,IAAMQ,EAAMyE,EAAM3E,EAAMU,EAAMsD,EAAMU,GAAOb,EAC/CnE,EAAI,IAAMG,EAAMa,EAAMX,EAAM4E,EAAMZ,EAAMW,GAAOb,EAC/CnE,EAAI,IAAM0E,EAAM5D,EAAM0D,EAAMM,EAAMH,EAAM9D,GAAOsD,EAC/CnE,EAAI,IAAMS,EAAMqE,EAAMnE,EAAMG,EAAMyD,EAAM1D,GAAOsD,EAC/CnE,EAAI,IAAMM,EAAMS,EAAMR,EAAM0E,EAAMX,EAAMS,GAAOZ,EAC/CnE,EAAI,IAAMI,EAAM6E,EAAM9E,EAAMY,EAAMsD,EAAMU,GAAOZ,EAC/CnE,EAAI,KAAOwE,EAAMK,EAAMJ,EAAM3D,EAAM6D,EAAM/D,GAAOuD,EAChDnE,EAAI,KAAOU,EAAMI,EAAML,EAAMoE,EAAMN,EAAM3D,GAAOuD,EAChDnE,EAAI,KAAOO,EAAMyE,EAAM1E,EAAM4E,EAAM1E,EAAMuE,GAAOZ,EAChDnE,EAAI,KAAOG,EAAM+E,EAAM9E,EAAM4E,EAAM3E,EAAM0E,GAAOZ,EAChDnE,EAAI,KAAOyE,EAAM5D,EAAM2D,EAAMI,EAAMF,EAAM9D,GAAOuD,EAChDnE,EAAI,KAAOS,EAAMmE,EAAMlE,EAAMG,EAAMF,EAAMC,GAAOuD,EAGpD,CChEQ,CAAgBnH,KAAM0B,GACf1B,IACX,CAEA,OAAAygB,CAAQza,EAAG8hB,EAAKpiB,GAEZ,ODohBD,SAAiBqiB,EAAQC,EAAaC,EAAgBC,GACzD,MAAMC,EAAKJ,EAEL7iB,EAAI8iB,EAAY,GAClB7iB,EAAI6iB,EAAY,GAChB/hB,EAAI+hB,EAAY,GAChB9hB,EAAI8hB,EAAY,GACd7hB,EAAKjB,EAAIA,EACXkB,EAAKjB,EAAIA,EACTkB,EAAKJ,EAAIA,EACPK,EAAKpB,EAAIiB,EACXiiB,EAAKljB,EAAIkB,EACTiiB,EAAKnjB,EAAImB,EACPG,EAAKrB,EAAIiB,EACXkiB,EAAKnjB,EAAIkB,EACTM,EAAKV,EAAII,EACPO,EAAKV,EAAIC,EACXU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EAEPsX,EAAKuK,EAAS,GAChBrK,EAAKqK,EAAS,GACdnK,EAAKmK,EAAS,GAElBC,EAAG,IAAM,GAAK3hB,EAAKG,IAAOgX,EAC1BwK,EAAG,IAAMC,EAAKthB,GAAM6W,EACpBwK,EAAG,IAAME,EAAKxhB,GAAM8W,EACpBwK,EAAG,GAAK,EAERA,EAAG,IAAMC,EAAKthB,GAAM+W,EACpBsK,EAAG,IAAM,GAAK7hB,EAAKK,IAAOkX,EAC1BsK,EAAG,IAAMG,EAAK1hB,GAAMiX,EACpBsK,EAAG,GAAK,EAERA,EAAG,IAAME,EAAKxhB,GAAMkX,EACpBoK,EAAG,IAAMG,EAAK1hB,GAAMmX,EACpBoK,EAAG,KAAO,GAAK7hB,EAAKE,IAAOuX,EAC3BoK,EAAG,IAAM,EAETA,EAAG,IAAMF,EAAe,GACxBE,EAAG,IAAMF,EAAe,GACxBE,EAAG,IAAMF,EAAe,GACxBE,EAAG,IAAM,CAGb,CClkBQ,CAAiBnoB,KAAMgG,EAAG8hB,EAAKpiB,GACxB1F,IACX,CAEA,SAAA2gB,CAAU3a,EAAG8hB,EAAKpiB,GAEd,ODydD,SAAmB6iB,EAAQC,EAAaC,EAAgBC,GAC3D,IAAI/K,EAAK,KAAY,CAAC4K,EAAO,GAAIA,EAAO,GAAIA,EAAO,KACnD,MAAM1K,EAAK,KAAY,CAAC0K,EAAO,GAAIA,EAAO,GAAIA,EAAO,KAC/CxK,EAAK,KAAY,CAACwK,EAAO,GAAIA,EAAO,GAAIA,EAAO,MAGzCre,EAAYqe,GACd,IAAG5K,GAAMA,GAEnB8K,EAAe,GAAKF,EAAO,IAC3BE,EAAe,GAAKF,EAAO,IAC3BE,EAAe,GAAKF,EAAO,IAG3B,MAAMI,EAAMJ,EAAO9a,QAEbmb,EAAQ,EAAIjL,EACZkL,EAAQ,EAAIhL,EACZiL,EAAQ,EAAI/K,EAElB4K,EAAI,IAAMC,EACVD,EAAI,IAAMC,EACVD,EAAI,IAAMC,EAEVD,EAAI,IAAME,EACVF,EAAI,IAAME,EACVF,EAAI,IAAME,EAEVF,EAAI,IAAMG,EACVH,EAAI,IAAMG,EACVH,EAAI,KAAOG,EAEXjI,EAAY2H,EAAaG,GAEzBD,EAAS,GAAK/K,EACd+K,EAAS,GAAK7K,EACd6K,EAAS,GAAK3K,CAClB,CC/fQ,CAAmB/d,KAAMgG,EAAG8hB,EAAKpiB,GAC1B1F,IACX,CAEA,WAAA6gB,CAAY7a,GAER,OADA,EAAqBA,EAAGhG,MACjBA,IACX,CAEA,cAAAe,CAAe+mB,GD8UZ,IAAwB9kB,EAAK8iB,EC5U5B,OD4U4BA,EC7UC9lB,MD6UNgD,EC7UC8kB,GD8UxB,GAAKhC,EAAI,IACb9iB,EAAI,GAAK8iB,EAAI,IACb9iB,EAAI,GAAK8iB,EAAI,IC/UF9lB,IACX,CAEA,UAAA6lB,CAAWngB,GAEP,OADA,EAAoBA,EAAO1F,MACpBA,IACX,CAEA,iBAAA2C,GACI,ODuWD,SAA2BmjB,GAC9B,IAAInhB,EAAMmhB,EAAI,GACVlhB,EAAMkhB,EAAI,GACVC,EAAMD,EAAI,GACVhhB,EAAMghB,EAAI,GACV/gB,EAAM+gB,EAAI,GACVE,EAAMF,EAAI,GACVG,EAAMH,EAAI,GACVI,EAAMJ,EAAI,GACVK,EAAML,EAAI,IAEd,MAAM5gB,EAAIP,EAAMA,EAAMC,EAAMA,EAAMmhB,EAAMA,EAClC5gB,EAAIL,EAAMA,EAAMC,EAAMA,EAAMihB,EAAMA,EAClC/f,EAAIggB,EAAMA,EAAMC,EAAMA,EAAMC,EAAMA,EAExC,OAAO1lB,KAAKib,KAAKjb,KAAK0e,IAAIja,EAAGC,EAAGc,GACpC,CCvXe,CAA2BjG,KACtC,CAEA,MAAAkB,CAAO6nB,EAAK5nB,EAAQ2e,GAEhB,ODguBD,SAAkB9c,EAAK+lB,EAAK5nB,EAAQ2e,GACvC,IAAIkJ,EAAOD,EAAI,GACXE,EAAOF,EAAI,GACXG,EAAOH,EAAI,GACXI,EAAMrJ,EAAG,GACTsJ,EAAMtJ,EAAG,GACTuJ,EAAMvJ,EAAG,GAETwJ,EAAKN,EAAO7nB,EAAO,GACnBooB,EAAKN,EAAO9nB,EAAO,GACnBkF,EAAK6iB,EAAO/nB,EAAO,GAEnBsa,EAAM6N,EAAKA,EAAKC,EAAKA,EAAKljB,EAAKA,EACvB,IAARoV,EAEApV,EAAK,GAELoV,EAAM,EAAIhb,KAAKib,KAAKD,GACpB6N,GAAM7N,EACN8N,GAAM9N,EACNpV,GAAMoV,GAGV,IAAI+N,EAAKJ,EAAM/iB,EAAKgjB,EAAME,EACtBE,EAAKJ,EAAMC,EAAKH,EAAM9iB,EACtBF,EAAKgjB,EAAMI,EAAKH,EAAME,EAE1B7N,EAAM+N,EAAKA,EAAKC,EAAKA,EAAKtjB,EAAKA,EACnB,IAARsV,IAEI4N,EACAF,GAAO,KACAC,EACPC,GAAO,KAEPD,GAAO,KAEVI,EAAKJ,EAAM/iB,EAAKgjB,EAAME,EAAME,EAAKJ,EAAMC,EAAKH,EAAM9iB,EAAMF,EAAKgjB,EAAMI,EAAKH,EAAME,EAE/E7N,EAAM+N,EAAKA,EAAKC,EAAKA,EAAKtjB,EAAKA,GAGnCsV,EAAM,EAAIhb,KAAKib,KAAKD,GACpB+N,GAAM/N,EACNgO,GAAMhO,EACNtV,GAAMsV,EAENzY,EAAI,GAAKwmB,EACTxmB,EAAI,GAAKymB,EACTzmB,EAAI,GAAKmD,EACTnD,EAAI,GAAK,EACTA,EAAI,GAAKumB,EAAKpjB,EAAKE,EAAKojB,EACxBzmB,EAAI,GAAKqD,EAAKmjB,EAAKF,EAAKnjB,EACxBnD,EAAI,GAAKsmB,EAAKG,EAAKF,EAAKC,EACxBxmB,EAAI,GAAK,EACTA,EAAI,GAAKsmB,EACTtmB,EAAI,GAAKumB,EACTvmB,EAAI,IAAMqD,EACVrD,EAAI,IAAM,EACVA,EAAI,IAAMgmB,EACVhmB,EAAI,IAAMimB,EACVjmB,EAAI,IAAMkmB,EACVlmB,EAAI,IAAM,CAEd,CCjyBQ,CAAkBhD,KAAM+oB,EAAK5nB,EAAQ2e,GAC9B9f,IACX,CAEA,WAAAkK,GACI,OAAO,EAAqBlK,KAChC,CAEA,SAAA2e,CAAU1b,EAAG2b,EAAI,GAiBb,OAhBA5e,KAAK,GAAKiD,EAAE2b,GACZ5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,IAAMiD,EAAE2b,EAAI,IACjB5e,KAAK,IAAMiD,EAAE2b,EAAI,IACjB5e,KAAK,IAAMiD,EAAE2b,EAAI,IACjB5e,KAAK,IAAMiD,EAAE2b,EAAI,IACjB5e,KAAK,IAAMiD,EAAE2b,EAAI,IACjB5e,KAAK,IAAMiD,EAAE2b,EAAI,IACV5e,IACX,CAEA,OAAA6e,CAAQ5b,EAAI,GAAI2b,EAAI,GAiBhB,OAhBA3b,EAAE2b,GAAK5e,KAAK,GACZiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,IAAM5e,KAAK,IACjBiD,EAAE2b,EAAI,IAAM5e,KAAK,IACjBiD,EAAE2b,EAAI,IAAM5e,KAAK,IACjBiD,EAAE2b,EAAI,IAAM5e,KAAK,IACjBiD,EAAE2b,EAAI,IAAM5e,KAAK,IACjBiD,EAAE2b,EAAI,IAAM5e,KAAK,IACViD,CACX,E,gDCpNG,MAAM0c,UAAarb,MACtB,WAAApF,CAAYgG,EAAI,EAAGC,EAAID,EAAGe,EAAIf,GAE1B,OADArF,MAAMqF,EAAGC,EAAGc,GACLjG,IACX,CAEA,KAAIkF,GACA,OAAOlF,KAAK,EAChB,CAEA,KAAImF,GACA,OAAOnF,KAAK,EAChB,CAEA,KAAIiG,GACA,OAAOjG,KAAK,EAChB,CAEA,KAAIkF,CAAE7D,GACFrB,KAAK,GAAKqB,CACd,CAEA,KAAI8D,CAAE9D,GACFrB,KAAK,GAAKqB,CACd,CAEA,KAAI4E,CAAE5E,GACFrB,KAAK,GAAKqB,CACd,CAEA,GAAAM,CAAIuD,EAAGC,EAAID,EAAGe,EAAIf,GACd,OAAIA,EAAEF,OAAehF,KAAK0C,KAAKwC,IAC/B,KAAalF,KAAMkF,EAAGC,EAAGc,GAClBjG,KACX,CAEA,IAAA0C,CAAKrB,GAED,OADA,IAAcrB,KAAMqB,GACbrB,IACX,CAEA,GAAAgkB,CAAI0F,EAAIC,GAGJ,OAFIA,EAAI,KAAa3pB,KAAM0pB,EAAIC,GAC1B,KAAa3pB,KAAMA,KAAM0pB,GACvB1pB,IACX,CAEA,GAAA+jB,CAAI2F,EAAIC,GAGJ,OAFIA,EAAI,KAAkB3pB,KAAM0pB,EAAIC,GAC/B,KAAkB3pB,KAAMA,KAAM0pB,GAC5B1pB,IACX,CAEA,QAAAgB,CAASK,GAGL,OAFIA,EAAE2D,OAAQ,KAAkBhF,KAAMA,KAAMqB,GACvC,KAAerB,KAAMA,KAAMqB,GACzBrB,IACX,CAEA,MAAAikB,CAAO5iB,GAGH,OAFIA,EAAE2D,OAAQ,KAAgBhF,KAAMA,KAAMqB,GACrC,KAAerB,KAAMA,KAAM,EAAIqB,GAC7BrB,IACX,CAEA,OAAAa,CAAQQ,EAAIrB,MAER,OADA,KAAiBA,KAAMqB,GAChBrB,IACX,CAGA,GAAAyb,GACI,OAAO,KAAgBzb,KAC3B,CAEA,QAAA+B,CAASV,GACL,OAAIA,EAAU,KAAkBrB,KAAMqB,GAC1B,KAAgBrB,KAChC,CAEA,UAAA4pB,GACI,OAAO,KAAuB5pB,KAClC,CAEA,eAAAmkB,CAAgB9iB,GACZ,OAAIA,EAAU,KAAyBrB,KAAMqB,GACjC,KAAuBrB,KACvC,CAEA,MAAA6pB,CAAOxoB,EAAIrB,MAEP,OADA,KAAgBA,KAAMqB,GACfrB,IACX,CAEA,KAAA8pB,CAAMJ,EAAIC,GAGN,OAFIA,EAAI,KAAe3pB,KAAM0pB,EAAIC,GAC5B,KAAe3pB,KAAMA,KAAM0pB,GACzB1pB,IACX,CAEA,KAAA0F,CAAMrE,GAEF,OADA,KAAerB,KAAMA,KAAMqB,GACpBrB,IACX,CAEA,SAAA8c,GAEI,OADA,KAAmB9c,KAAMA,MAClBA,IACX,CAEA,GAAA+C,CAAI1B,GACA,OAAO,KAAarB,KAAMqB,EAC9B,CAEA,MAAA0oB,CAAO1oB,GACH,OAAO,KAAqBrB,KAAMqB,EACtC,CAEA,YAAA2oB,CAAaC,GAET,OADA,KAAuBjqB,KAAMA,KAAMiqB,GAC5BjqB,IACX,CAEA,YAAAsB,CAAa4oB,GAET,OADA,KAAuBlqB,KAAMA,KAAMkqB,GAC5BlqB,IACX,CAEA,kBAAAmqB,CAAmBD,GAEf,OADA,KAAyBlqB,KAAMA,KAAMkqB,GAC9BlqB,IACX,CAEA,eAAAoqB,CAAgBpkB,GAEZ,OADA,KAAuBhG,KAAMA,KAAMgG,GAC5BhG,IACX,CAEA,KAAAqqB,CAAMhpB,GACF,OAAO,KAAerB,KAAMqB,EAChC,CAEA,IAAAipB,CAAKjpB,EAAG+c,GAEJ,OADA,KAAcpe,KAAMA,KAAMqB,EAAG+c,GACtBpe,IACX,CAEA,UAAAuqB,CAAWlpB,EAAGmpB,EAAOC,GAEjB,OADA,KAAoBzqB,KAAMA,KAAMqB,EAAGmpB,EAAOC,GACnCzqB,IACX,CAEA,KAAA0qB,GACI,OAAO,IAAI/K,EAAK3f,KAAK,GAAIA,KAAK,GAAIA,KAAK,GAC3C,CAEA,SAAA2e,CAAU1b,EAAG2b,EAAI,GAIb,OAHA5e,KAAK,GAAKiD,EAAE2b,GACZ5e,KAAK,GAAKiD,EAAE2b,EAAI,GAChB5e,KAAK,GAAKiD,EAAE2b,EAAI,GACT5e,IACX,CAEA,OAAA6e,CAAQ5b,EAAI,GAAI2b,EAAI,GAIhB,OAHA3b,EAAE2b,GAAK5e,KAAK,GACZiD,EAAE2b,EAAI,GAAK5e,KAAK,GAChBiD,EAAE2b,EAAI,GAAK5e,KAAK,GACTiD,CACX,CAEA,kBAAA0nB,CAAmBT,GACf,MAAMhlB,EAAIlF,KAAK,GACTmF,EAAInF,KAAK,GACTiG,EAAIjG,KAAK,GAMf,OAJAA,KAAK,GAAKkqB,EAAK,GAAKhlB,EAAIglB,EAAK,GAAK/kB,EAAI+kB,EAAK,GAAKjkB,EAChDjG,KAAK,GAAKkqB,EAAK,GAAKhlB,EAAIglB,EAAK,GAAK/kB,EAAI+kB,EAAK,GAAKjkB,EAChDjG,KAAK,GAAKkqB,EAAK,GAAKhlB,EAAIglB,EAAK,GAAK/kB,EAAI+kB,EAAK,IAAMjkB,EAE1CjG,KAAK8c,WAChB,E,iPC9KG,SAAS9X,EAAO/B,GACnB,IAAIiC,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GACV,OAAOxC,KAAKib,KAAKxW,EAAIA,EAAIC,EAAIA,EAAIc,EAAIA,EACzC,CASO,SAASvD,EAAKM,EAAKC,GAItB,OAHAD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACXD,EAAI,GAAKC,EAAE,GACJD,CACX,CAWO,SAASrB,EAAIqB,EAAKkC,EAAGC,EAAGc,GAI3B,OAHAjD,EAAI,GAAKkC,EACTlC,EAAI,GAAKmC,EACTnC,EAAI,GAAKiD,EACFjD,CACX,CAUO,SAASghB,EAAIhhB,EAAKC,EAAGC,GAIxB,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAASqkB,EAASrkB,EAAKC,EAAGC,GAI7B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAAShC,EAASgC,EAAKC,EAAGC,GAI7B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAASihB,EAAOjhB,EAAKC,EAAGC,GAI3B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GAClBF,EAAI,GAAKC,EAAE,GAAKC,EAAE,GACXF,CACX,CAUO,SAAS0C,EAAM1C,EAAKC,EAAGC,GAI1B,OAHAF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EAChBF,EAAI,GAAKC,EAAE,GAAKC,EACTF,CACX,CASO,SAASjB,EAASkB,EAAGC,GACxB,IAAIgC,EAAIhC,EAAE,GAAKD,EAAE,GACbkC,EAAIjC,EAAE,GAAKD,EAAE,GACbgD,EAAI/C,EAAE,GAAKD,EAAE,GACjB,OAAOxC,KAAKib,KAAKxW,EAAIA,EAAIC,EAAIA,EAAIc,EAAIA,EACzC,CASO,SAASke,EAAgBlhB,EAAGC,GAC/B,IAAIgC,EAAIhC,EAAE,GAAKD,EAAE,GACbkC,EAAIjC,EAAE,GAAKD,EAAE,GACbgD,EAAI/C,EAAE,GAAKD,EAAE,GACjB,OAAOiC,EAAIA,EAAIC,EAAIA,EAAIc,EAAIA,CAC/B,CAQO,SAAS2kB,EAAc3nB,GAC1B,IAAIiC,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GACV,OAAOiC,EAAIA,EAAIC,EAAIA,EAAIc,EAAIA,CAC/B,CASO,SAAS4jB,EAAO7mB,EAAKC,GAIxB,OAHAD,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACZD,EAAI,IAAMC,EAAE,GACLD,CACX,CASO,SAASnC,EAAQmC,EAAKC,GAIzB,OAHAD,EAAI,GAAK,EAAMC,EAAE,GACjBD,EAAI,GAAK,EAAMC,EAAE,GACjBD,EAAI,GAAK,EAAMC,EAAE,GACVD,CACX,CASO,SAAS8Z,EAAU9Z,EAAKC,GAC3B,IAAIiC,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GACNwY,EAAMvW,EAAIA,EAAIC,EAAIA,EAAIc,EAAIA,EAQ9B,OAPIwV,EAAM,IAENA,EAAM,EAAIhb,KAAKib,KAAKD,IAExBzY,EAAI,GAAKC,EAAE,GAAKwY,EAChBzY,EAAI,GAAKC,EAAE,GAAKwY,EAChBzY,EAAI,GAAKC,EAAE,GAAKwY,EACTzY,CACX,CASO,SAASD,EAAIE,EAAGC,GACnB,OAAOD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,GAAKD,EAAE,GAAKC,EAAE,EAChD,CAUO,SAAS4mB,EAAM9mB,EAAKC,EAAGC,GAC1B,IAAI+X,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GACPoY,EAAKnY,EAAE,GACPoY,EAAKpY,EAAE,GACPqY,EAAKrY,EAAE,GAKX,OAHAF,EAAI,GAAKkY,EAAKK,EAAKJ,EAAKG,EACxBtY,EAAI,GAAKmY,EAAKE,EAAKJ,EAAKM,EACxBvY,EAAI,GAAKiY,EAAKK,EAAKJ,EAAKG,EACjBrY,CACX,CAWO,SAASsnB,EAAKtnB,EAAKC,EAAGC,EAAGkb,GAC5B,IAAInD,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GAIX,OAHAD,EAAI,GAAKiY,EAAKmD,GAAKlb,EAAE,GAAK+X,GAC1BjY,EAAI,GAAKkY,EAAKkD,GAAKlb,EAAE,GAAKgY,GAC1BlY,EAAI,GAAKmY,EAAKiD,GAAKlb,EAAE,GAAKiY,GACnBnY,CACX,CAYO,SAASunB,EAAWvnB,EAAKC,EAAGC,EAAGsnB,EAAOC,GACzC,MAAMI,EAAMpqB,KAAKoqB,KAAKL,EAAQC,GAC9B,IAAIxP,EAAKhY,EAAE,GACPiY,EAAKjY,EAAE,GACPkY,EAAKlY,EAAE,GAKX,OAHAD,EAAI,GAAKE,EAAE,IAAM+X,EAAK/X,EAAE,IAAM2nB,EAC9B7nB,EAAI,GAAKE,EAAE,IAAMgY,EAAKhY,EAAE,IAAM2nB,EAC9B7nB,EAAI,GAAKE,EAAE,IAAMiY,EAAKjY,EAAE,IAAM2nB,EACvB7nB,CACX,CAWO,SAAS8nB,EAAc9nB,EAAKC,EAAGvB,GAClC,IAAIwD,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GACNiD,EAAIxE,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,IAAMuE,EAAIvE,EAAE,IAK5C,OAJAwE,EAAIA,GAAK,EACTlD,EAAI,IAAMtB,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,GAAKuE,EAAIvE,EAAE,KAAOwE,EACpDlD,EAAI,IAAMtB,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,GAAKuE,EAAIvE,EAAE,KAAOwE,EACpDlD,EAAI,IAAMtB,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,IAAMuE,EAAIvE,EAAE,KAAOwE,EAC9ClD,CACX,CAMO,SAAS+nB,EAAgB/nB,EAAKC,EAAGvB,GACpC,IAAIwD,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GACNiD,EAAIxE,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,IAAMuE,EAAIvE,EAAE,IAK5C,OAJAwE,EAAIA,GAAK,EACTlD,EAAI,IAAMtB,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,GAAKuE,GAAKC,EAC5ClD,EAAI,IAAMtB,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,GAAKuE,GAAKC,EAC5ClD,EAAI,IAAMtB,EAAE,GAAKwD,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,IAAMuE,GAAKC,EACtClD,CACX,CAUO,SAASgoB,EAAchoB,EAAKC,EAAGvB,GAClC,IAAIwD,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GAIV,OAHAD,EAAI,GAAKkC,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,GAAKuE,EAAIvE,EAAE,GACrCsB,EAAI,GAAKkC,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,GAAKuE,EAAIvE,EAAE,GACrCsB,EAAI,GAAKkC,EAAIxD,EAAE,GAAKyD,EAAIzD,EAAE,GAAKuE,EAAIvE,EAAE,GAC9BsB,CACX,CAUO,SAASioB,EAAcjoB,EAAKC,EAAG+C,GAGlC,IAAId,EAAIjC,EAAE,GACNkC,EAAIlC,EAAE,GACNgD,EAAIhD,EAAE,GACNioB,EAAKllB,EAAE,GACPmlB,EAAKnlB,EAAE,GACPolB,EAAKplB,EAAE,GAGPqlB,EAAMF,EAAKllB,EAAImlB,EAAKjmB,EACpBmmB,EAAMF,EAAKlmB,EAAIgmB,EAAKjlB,EACpBslB,EAAML,EAAK/lB,EAAIgmB,EAAKjmB,EAEpBsmB,EAAOL,EAAKI,EAAMH,EAAKE,EACvBG,EAAOL,EAAKC,EAAMH,EAAKK,EACvBG,EAAOR,EAAKI,EAAMH,EAAKE,EAEvBM,EAAU,EAVL3lB,EAAE,GAsBX,OAXAqlB,GAAOM,EACPL,GAAOK,EACPJ,GAAOI,EAEPH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAER1oB,EAAI,GAAKkC,EAAImmB,EAAMG,EACnBxoB,EAAI,GAAKmC,EAAImmB,EAAMG,EACnBzoB,EAAI,GAAKiD,EAAIslB,EAAMG,EACZ1oB,CACX,CAQO,MAAMqnB,EAAQ,WACjB,MAAMuB,EAAQ,CAAC,EAAG,EAAG,GACfC,EAAQ,CAAC,EAAG,EAAG,GAErB,OAAO,SAAU5oB,EAAGC,GAChBR,EAAKkpB,EAAO3oB,GACZP,EAAKmpB,EAAO3oB,GAEZ4Z,EAAU8O,EAAOA,GACjB9O,EAAU+O,EAAOA,GAEjB,IAAIC,EAAS/oB,EAAI6oB,EAAOC,GAExB,OAAIC,EAAS,EACF,EACAA,GAAU,EACVrrB,KAAKC,GAELD,KAAKie,KAAKoN,EAEzB,CACH,CArBoB,GA8Bd,SAASC,EAAY9oB,EAAGC,GAC3B,OAAOD,EAAE,KAAOC,EAAE,IAAMD,EAAE,KAAOC,EAAE,IAAMD,EAAE,KAAOC,EAAE,EACxD,C","sources":["webpack://my-3d-portfolio/./node_modules/ogl/src/core/Camera.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Mat3Func.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Mat3.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Mesh.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Program.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Renderer.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Texture.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/QuatFunc.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Vec4Func.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Quat.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Euler.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/EulerFunc.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Transform.js","webpack://my-3d-portfolio/./node_modules/ogl/src/core/Geometry.js","webpack://my-3d-portfolio/./node_modules/ogl/src/extras/Plane.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Mat4Func.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Mat4.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/Vec3.js","webpack://my-3d-portfolio/./node_modules/ogl/src/math/functions/Vec3Func.js"],"sourcesContent":["import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\nconst tempVec3a = /* @__PURE__ */ new Vec3();\nconst tempVec3b = /* @__PURE__ */ new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left || -1,\n        right = this.right || 1,\n        bottom = this.bottom || -1,\n        top = this.top || 1,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    updateProjectionMatrix() {\n        if (this.type === 'perspective') {\n            return this.perspective();\n        } else {\n            return this.orthographic();\n        }\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(worldMatrix);\n\n        const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LEQUAL,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n        this.stencilFunc = {};\n        this.stencilOp = {}\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n\n        // Compile shaders with source\n        this.setShaders({ vertex, fragment });\n    }\n\n    setShaders({ vertex, fragment }) {\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n            }\n        }\n\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n            }\n        }\n\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    setStencilFunc(func, ref, mask) {\n        this.stencilRef = ref;\n        this.stencilFunc.func = func;\n        this.stencilFunc.ref = ref;\n        this.stencilFunc.mask = mask;\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        this.stencilOp.stencilFail = stencilFail;\n        this.stencilOp.depthFail = depthFail;\n        this.stencilOp.depthPass = depthPass;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n\n        if(this.stencilFunc.func || this.stencilOp.stencilFail) this.gl.renderer.enable(this.gl.STENCIL_TEST)\n            else this.gl.renderer.disable(this.gl.STENCIL_TEST)\n\n        this.gl.renderer.setStencilFunc(this.stencilFunc.func, this.stencilFunc.ref, this.stencilFunc.mask)\n        this.gl.renderer.setStencilOp(this.stencilOp.stencilFail, this.stencilOp.depthFail, this.stencilOp.depthPass)\n\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let uniform = this.uniforms[activeUniform.uniformName];\n\n            for (const component of activeUniform.nameComponents) {\n                if (!uniform) break;\n\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 36306: // U_SAMPLER_2D\n        case 35680: // SAMPLER_CUBE\n        case 36289: // SAMPLER_2D_ARRAY\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    setStencilMask(value) {\n        if(this.state.stencilMask === value) return;\n        this.state.stencilMask = value;\n        this.gl.stencilMask(value)\n    }\n\n    setStencilFunc(func, ref, mask) {\n\n        if((this.state.stencilFunc === func) &&\n            (this.state.stencilRef === ref) &&\n            (this.state.stencilFuncMask === mask)\n        ) return;\n\n        this.state.stencilFunc = func || this.gl.ALWAYS;\n        this.state.stencilRef = ref || 0;\n        this.state.stencilFuncMask = mask || 0;\n\n        this.gl.stencilFunc(func || this.gl.ALWAYS, ref || 0, mask || 0);\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n\n        if(this.state.stencilFail === stencilFail &&\n            this.state.stencilDepthFail === depthFail &&\n            this.state.stencilDepthPass === depthPass\n        ) return;\n\n        this.state.stencilFail = stencilFail;\n        this.state.stencilDepthFail = depthFail;\n        this.state.stencilDepthPass = depthPass;\n        \n        this.gl.stencilOp(stencilFail, depthFail, depthPass);\n        \n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n\n            // Same for stencil\n            if(this.stencil || (!target || target.stencil)) {\n                this.enable(this.gl.STENCIL_TEST);\n                this.setStencilMask(0xff)\n            }\n\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            wrapR = gl.CLAMP_TO_EDGE,\n            generateMipmaps = target === (gl.TEXTURE_2D || gl.TEXTURE_CUBE_MAP),\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == (gl.TEXTURE_2D || gl.TEXTURE_3D) ? true : false,\n            anisotropy = 0,\n            level = 0,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n            length = 1,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.wrapR = wrapR;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.length = length;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.wrapR !== this.state.wrapR) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_R, this.wrapR);\n            this.state.wrapR = this.wrapR;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(this.target, this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT, this.anisotropy);\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, this.level, this.internalFormat, this.format, this.type, this.image[i]);\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                if (this.target === this.gl.TEXTURE_2D) {\n                    this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\n                } else if (this.target === this.gl.TEXTURE_2D_ARRAY || this.target === this.gl.TEXTURE_3D) {\n                    this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.length, 0, this.format, this.type, this.image);\n                }\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage2D(this.target, level, this.internalFormat, this.image[level].width, this.image[level].height, 0, this.image[level].data);\n                }\n            } else {\n                // Regular texture\n                if (this.target === this.gl.TEXTURE_2D) {\n                    this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n                } else {\n                    this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.length, 0, this.format, this.type, this.image);\n                }\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                if (this.target === this.gl.TEXTURE_2D) {\n                    this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n                } else {\n                    this.gl.texImage3D(this.target, this.level, this.internalFormat, this.width, this.height, this.length, 0, this.format, this.type, null);\n                }\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2', '3'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this._target);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this._target) {\n        QuatFunc.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this._target) {\n        QuatFunc.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this._target) {\n        QuatFunc.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this._target, qA, qB);\n        } else {\n            QuatFunc.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this._target, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler, isInternal) {\n        QuatFunc.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = /* @__PURE__ */ new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order, isInternal) {\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation._target.onChange = () => this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = () => this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement\n                );\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Plane extends Geometry {\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n\n        // Determine length of arrays\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        // Generate empty arrays once\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = numIndices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n        const io = i;\n        const segW = width / wSegs;\n        const segH = height / hSegs;\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let y = iy * segH - height / 2;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let x = ix * segW - width / 2;\n\n                position[i * 3 + u] = x * uDir;\n                position[i * 3 + v] = y * vDir;\n                position[i * 3 + w] = depth / 2;\n\n                normal[i * 3 + u] = 0;\n                normal[i * 3 + v] = 0;\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n                uv[i * 2] = ix / wSegs;\n                uv[i * 2 + 1] = 1 - iy / hSegs;\n\n                if (iy === hSegs || ix === wSegs) continue;\n                let a = io + ix + iy * (wSegs + 1);\n                let b = io + ix + (iy + 1) * (wSegs + 1);\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n                let d = io + ix + iy * (wSegs + 1) + 1;\n\n                index[ii * 6] = a;\n                index[ii * 6 + 1] = b;\n                index[ii * 6 + 2] = d;\n                index[ii * 6 + 3] = b;\n                index[ii * 6 + 4] = c;\n                index[ii * 6 + 5] = d;\n                ii++;\n            }\n        }\n    }\n}\n","import * as vec3 from './Vec3Func.js';\n\nconst EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [1, 1, 1];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */\nexport function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = vec3.length([srcMat[0], srcMat[1], srcMat[2]]);\n    const sy = vec3.length([srcMat[4], srcMat[5], srcMat[6]]);\n    const sz = vec3.length([srcMat[8], srcMat[9], srcMat[10]]);\n\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n\n    getRotation(dstRotation, _m1);\n\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */\nexport function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n\n    const x = srcRotation[0],\n        y = srcRotation[1],\n        z = srcRotation[2],\n        w = srcRotation[3];\n    const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    const sx = srcScale[0],\n        sy = srcScale[1],\n        sz = srcScale[2];\n\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n\n    return te;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    add(ma, mb) {\n        if (mb) Mat4Func.add(this, ma, mb);\n        else Mat4Func.add(this, this, ma);\n        return this;\n    }\n\n    sub(ma, mb) {\n        if (mb) Mat4Func.subtract(this, ma, mb);\n        else Mat4Func.subtract(this, this, ma);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (!ma.length) {\n            Mat4Func.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.compose(this, q, pos, scale);\n        return this;\n    }\n\n    decompose(q, pos, scale) {\n        Mat4Func.decompose(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    smoothLerp(v, decay, dt) {\n        Vec3Func.smoothLerp(this, this, v, decay, dt);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Performs a frame rate independant, linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\n * @param {Number} dt delta time\n * @returns {vec3} out\n */\nexport function smoothLerp(out, a, b, decay, dt) {\n    const exp = Math.exp(-decay * dt);\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n\n    out[0] = b[0] + (ax - b[0]) * exp;\n    out[1] = b[1] + (ay - b[1]) * exp;\n    out[2] = b[2] + (az - b[2]) * exp;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n"],"names":["tempMat4","tempVec3a","tempVec3b","Camera","constructor","gl","near","far","fov","aspect","left","right","bottom","top","zoom","super","Object","assign","this","projectionMatrix","viewMatrix","projectionViewMatrix","worldPosition","type","orthographic","perspective","fromPerspective","Math","PI","fromOrthogonal","updateMatrixWorld","inverse","worldMatrix","getTranslation","multiply","updateProjectionMatrix","lookAt","target","project","v","applyMatrix4","unproject","updateFrustum","frustum","m","set","constant","i","invLen","distance","frustumIntersectsMesh","node","geometry","attributes","position","bounds","radius","Infinity","computeBoundingSphere","center","copy","getMaxScaleOnAxis","frustumIntersectsSphere","normal","plane","dot","out","a","b","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","Mat3","Array","m00","m01","m02","m10","m11","m12","m20","m21","m22","length","translate","x","y","rotate","rad","s","sin","c","cos","scale","ma","mb","identity","fromMatrix4","fromQuaternion","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","fromBasis","vec3a","vec3b","vec3c","det","getNormalMatrix","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","ID","Mesh","Transform","program","mode","TRIANGLES","frustumCulled","renderOrder","canvas","console","error","id","modelViewMatrix","Mat4","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","onBeforeRender","f","push","onAfterRender","draw","camera","uniforms","modelMatrix","value","cameraPosition","forEach","mesh","flipFaces","cullFace","determinant","use","arrayCacheF32","Program","vertex","fragment","transparent","BACK","frontFace","CCW","depthTest","depthWrite","depthFunc","LEQUAL","warn","blendFunc","blendEquation","stencilFunc","stencilOp","src","renderer","premultipliedAlpha","setBlendFunc","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","setShaders","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformLocations","Map","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","getUniformLocation","name","split","match","uniformName","nameComponents","slice","attributeLocations","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","location","getAttribLocation","attributeOrder","join","dst","srcAlpha","dstAlpha","setBlendEquation","modeRGB","modeAlpha","setStencilFunc","func","ref","mask","stencilRef","setStencilOp","stencilFail","depthFail","depthPass","applyState","enable","DEPTH_TEST","disable","CULL_FACE","BLEND","setCullFace","setFrontFace","setDepthMask","setDepthFunc","STENCIL_TEST","textureUnit","state","currentProgram","useProgram","activeUniform","component","isArray","undefined","texture","update","setUniform","textureUnits","CW","remove","deleteProgram","arrayLen","valueLen","Float32Array","flatten","setValue","get","l","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","warnCount","message","tempVec3","Renderer","document","createElement","width","height","dpr","alpha","depth","stencil","antialias","preserveDrawingBuffer","powerPreference","autoClear","webgl","color","getContext","isWebgl2","setSize","ZERO","FUNC_ADD","depthMask","premultiplyAlpha","flipY","unpackAlignment","framebuffer","viewport","activeTextureUnit","boundBuffer","extensions","getExtension","vertexAttribDivisor","drawArraysInstanced","drawElementsInstanced","createVertexArray","bindVertexArray","deleteVertexArray","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","style","setViewport","setScissor","scissor","blendFuncSeparate","blendEquationSeparate","setStencilMask","stencilMask","stencilFuncMask","ALWAYS","stencilDepthFail","stencilDepthPass","activeTexture","TEXTURE0","bindFramebuffer","FRAMEBUFFER","buffer","extension","webgl2Func","extFunc","bind","sortOpaque","zDepth","sortTransparent","sortUI","getRenderList","scene","frustumCull","sort","renderList","traverse","visible","opaque","ui","concat","render","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","emptyPixel","Uint8Array","isPowerOf2","Texture","image","TEXTURE_2D","UNSIGNED_BYTE","format","RGBA","internalFormat","wrapS","CLAMP_TO_EDGE","wrapT","wrapR","generateMipmaps","TEXTURE_CUBE_MAP","minFilter","NEAREST_MIPMAP_LINEAR","LINEAR","magFilter","TEXTURE_3D","anisotropy","level","min","createTexture","store","glState","REPEAT","bindTexture","needsUpdate","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","ArrayBuffer","isView","TEXTURE_2D_ARRAY","texImage3D","isCompressedTexture","compressedTexImage2D","data","generateMipmap","onUpdate","ax","ay","az","aw","bx","by","bz","bw","len","sqrt","Quat","onChange","_target","triggerProps","Proxy","property","success","Reflect","arguments","includes","rotateX","rotateY","rotateZ","a0","a1","a2","a3","invDot","conjugate","normalize","qA","qB","fromMatrix3","matrix3","fRoot","fTrace","j","k","fromEuler","euler","isInternal","order","sx","cx","sy","cy","sz","cz","fromAxisAngle","axis","slerp","t","omega","cosom","sinom","scale0","scale1","acos","fromArray","o","toArray","tmpMat4","Euler","reorder","fromRotationMatrix","asin","max","abs","atan2","parent","children","matrix","matrixAutoUpdate","worldMatrixNeedsUpdate","Vec3","quaternion","rotation","up","setParent","notifyParent","removeChild","addChild","child","notifyChild","indexOf","splice","force","updateMatrix","compose","callback","decompose","invert","getRotation","ATTR_ID","isBoundsWarned","Geometry","VAOs","drawRange","start","count","instancedCount","currentGeometry","key","addAttribute","attr","size","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","offset","byteLength","divisor","instanced","usage","STATIC_DRAW","updateAttribute","isInstanced","index","isNewBuffer","createBuffer","bindBuffer","bufferData","bufferSubData","setIndex","setDrawRange","setInstancedCount","createVAO","bindAttributes","numLoc","vertexAttribPointer","enableVertexAttribArray","indexBytesPerElement","drawElements","drawArrays","getPosition","computeBoundingBox","array","sub","add","divide","maxRadiusSq","squaredDistance","deleteBuffer","Plane","widthSegments","heightSegments","wSegs","hSegs","num","numIndices","uv","Uint32Array","buildPlane","u","uDir","vDir","ii","io","segW","segH","iy","ix","d","b0","b1","b2","b3","getScaling","mat","m13","m23","m31","m32","m33","hypot","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","subtract","m03","m30","fovy","tan","nf","lr","bt","setPosition","pos","dstMat","srcRotation","srcTranslation","srcScale","te","xy","xz","yz","srcMat","dstRotation","dstTranslation","dstScale","_m1","invSX","invSY","invSZ","eye","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","va","vb","squaredLen","negate","cross","equals","applyMatrix3","mat3","mat4","scaleRotateMatrix4","applyQuaternion","angle","lerp","smoothLerp","decay","dt","clone","transformDirection","squaredLength","exp","transformMat4","scaleRotateMat4","transformMat3","transformQuat","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","exactEquals"],"sourceRoot":""}