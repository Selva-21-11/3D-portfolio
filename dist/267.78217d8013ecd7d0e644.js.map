{"version":3,"file":"267.78217d8013ecd7d0e644.js","mappings":"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","sources":["webpack://my-3d-portfolio/./src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { gsap } from 'gsap';\r\nimport { throttle } from 'lodash';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({\r\n      antialias: true,\r\n      preserveDrawingBuffer: true,\r\n      alpha: true,  // Set alpha to true for transparency\r\n    });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.setClearColor(0x000000, 0); // Set the background to transparent (alpha = 0)\r\n    renderer.outputEncoding = THREE.LinearSRGBColorSpace;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n    camera.position.z = 5;\r\n\r\n    // Set up the loading manager\r\n    renderer.render(scene, camera);\r\n    const loadingManager = new THREE.LoadingManager();\r\n    loadingManager.onStart = () => console.log(\"Loading started...\");\r\n    loadingManager.onLoad = () => {\r\n      console.log(\"Loading complete!\");\r\n      setIsLoading(false);\r\n\r\n      // Trigger popup animation after loading\r\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\r\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\r\n    };\r\n\r\n    // Load MatCap textures\r\n    const textureLoader = new THREE.TextureLoader(loadingManager);\r\n    const matCapTextureBig = textureLoader.load('./assets/mattext.webp'); // Replace with your matcap texture\r\n    const matCapTextureSmall = textureLoader.load('./assets/mattext.webp'); // Replace with your matcap texture\r\n\r\n    // Set texture wrapping\r\n    matCapTextureBig.wrapS = matCapTextureBig.wrapT = THREE.ClampToEdgeWrapping;\r\n    matCapTextureSmall.wrapS = matCapTextureSmall.wrapT = THREE.ClampToEdgeWrapping;\r\n\r\n    const shaderMaterialBig = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        tMatCap: { type: 't', value: matCapTextureBig },\r\n      },\r\n      vertexShader: `\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n    \r\n        void main() {\r\n          vNormal = normalize(normalMatrix * normal);\r\n          vPosition = position;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D tMatCap;\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n    \r\n        void main() {\r\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\r\n          gl_FragColor = vec4(matCapColor, 1.0);\r\n        }\r\n      `,\r\n    });\r\n    \r\n    // Same change for the small sphere material:\r\n    const shaderMaterialSmall = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        tMatCap: { type: 't', value: matCapTextureSmall },\r\n      },\r\n      vertexShader: `\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n    \r\n        void main() {\r\n          vNormal = normalize(normalMatrix * normal);\r\n          vPosition = position;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D tMatCap;\r\n        varying vec3 vNormal;\r\n        varying vec3 vPosition;\r\n    \r\n        void main() {\r\n          vec3 matCapColor = texture2D(tMatCap, vec2(vNormal.x * 0.5 + 0.5, vNormal.y * 0.5 + 0.5)).rgb;\r\n          gl_FragColor = vec4(matCapColor, 1.0);\r\n        }\r\n      `,\r\n    });\r\n\r\n    // Create sphere geometries\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1.5, 32, 32);\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\r\n\r\n    // Create meshes with ShaderMaterial\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, shaderMaterialBig);\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, shaderMaterialSmall);\r\n\r\n    // Group the spheres for easier management\r\n    const sphereGroup = new THREE.Group();\r\n    sphereGroup.add(bigSphere);\r\n    sphereGroup.add(smallSphere);\r\n    scene.add(sphereGroup);\r\n\r\n    bigSphereRef.current = bigSphere;\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    const handleMouseMove = throttle((event) => {\r\n      // Get mouse position relative to the center of the window\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;  // Normalized -1 to 1\r\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;  // Normalized -1 to 1\r\n    \r\n      // Set a radius for the circular movement\r\n      const radius = 1.6;\r\n    \r\n      // Calculate the angle for the small sphere's position\r\n      // Use the mouse position to compute a circular path angle (not just position)\r\n      const angle = Math.atan2(mouseYPosition, mouseXPosition);  // Get the angle between mouse and center\r\n      \r\n      // Now map this angle to a circular path\r\n      const targetX = radius * Math.cos(angle);  // Calculate X position along the circular path\r\n      const targetY = radius * Math.sin(angle);  // Calculate Y position along the circular path\r\n    \r\n      // Update small sphere's position based on the calculated target\r\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: -1, duration: 0.5, ease: 'power3.out' });\r\n    \r\n      // Optional: Move the camera to give the feeling of interactivity\r\n      const parallaxX = mouseXPosition * 0.1;\r\n      const parallaxY = mouseYPosition * 0.1;\r\n      gsap.to(camera.position, { x: parallaxX, y: parallaxY, z: 5, duration: 0.6, ease: 'power3.out' });\r\n    }, 60);  // Reduced throttle delay for better responsiveness\r\n    \r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      if (!isLoading) {\r\n        renderer.render(scene, camera);\r\n      }\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize handling\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    // Cleanup function (unload)\r\n    const unload = () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n\r\n      // Dispose of materials, geometries, and textures\r\n      matCapTextureBig.dispose();\r\n      matCapTextureSmall.dispose();\r\n      bigSphereGeometry.dispose();\r\n      smallSphereGeometry.dispose();\r\n      bigSphere.material.dispose();\r\n      smallSphere.material.dispose();\r\n\r\n      // Clear scene\r\n      scene.clear();\r\n      renderer.dispose();\r\n    };\r\n\r\n    // Call unload function on component unmount\r\n    return () => {\r\n      unload();\r\n    };\r\n  }, [isLoading]);\r\n\r\n  return (\r\n    <div>\r\n      {isLoading && (\r\n        <div className=\"loading-screen\">\r\n          <h3>Loading...</h3>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleBG;\r\n"],"names":["TitleBG","sceneRef","useRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","isLoading","setIsLoading","useState","useEffect","scene","THREE","aspect","window","innerWidth","innerHeight","camera","renderer","antialias","preserveDrawingBuffer","alpha","setSize","setClearColor","outputEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","render","loadingManager","onStart","console","log","onLoad","gsap","fromTo","scale","x","y","duration","ease","textureLoader","matCapTextureBig","load","matCapTextureSmall","wrapS","wrapT","shaderMaterialBig","uniforms","tMatCap","type","value","vertexShader","fragmentShader","shaderMaterialSmall","bigSphereGeometry","smallSphereGeometry","bigSphere","smallSphere","sphereGroup","add","handleMouseMove","throttle","event","mouseXPosition","clientX","mouseYPosition","clientY","angle","Math","atan2","targetX","cos","targetY","sin","to","parallaxX","parallaxY","addEventListener","animate","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","material","clear","React","className"],"sourceRoot":""}