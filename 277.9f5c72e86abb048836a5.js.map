{"version":3,"file":"277.9f5c72e86abb048836a5.js","mappings":"+MAIA,MAyDA,EAzDiBA,KAEf,MAAM,MAAEC,EAAK,QAAEC,EAAO,OAAEC,EAAM,YAAEC,IAAgBC,EAAAA,EAAAA,GAAQ,qBAClD,IAAEC,EAAG,OAAEC,EAAM,GAAEC,IAAOC,EAAAA,EAAAA,KA8C5B,OA5CAC,EAAAA,EAAAA,YAAU,KAEJR,EAAQS,OAAS,GACnBL,EAAI,CAAEC,OAAQL,EAAQ,KACtBU,QAAQC,IAAI,+BAAgC,CAC1CC,IAAKZ,EAAQ,GAAGY,IAChBC,SAAUb,EAAQ,GAAGa,SAASC,UAC9BC,KAAMf,EAAQ,GAAGe,KACjBC,IAAKhB,EAAQ,GAAGgB,QAIlBX,EAAOQ,SAAST,IAAI,EAAG,EAAG,GAC1BC,EAAOY,OAAO,EAAG,EAAG,GACpBP,QAAQC,IAAI,iDAAkD,CAC5DC,IAAKP,EAAOO,IACZC,SAAUR,EAAOQ,SAASC,UAC1BC,KAAMV,EAAOU,KACbC,IAAKX,EAAOW,OAKhBjB,EAAMmB,UAAUC,IACVA,EAAMC,WAEJD,EAAME,cAAgBF,EAAMG,aAAeH,EAAMI,sBAEnDJ,EAAMK,UAAY,IAClBd,QAAQC,IAAI,gCAADc,OAAiCN,EAAMK,aAEpDzB,EAAM2B,IAAIP,GACZ,IAIEjB,IACFH,EAAMG,YAAcA,EACpBI,EAAGqB,kBAAkB5B,EAAMG,aAC3BQ,QAAQC,IAAI,wCACd,GAEC,CAACX,EAASI,EAAKC,EAAQN,EAAOE,EAAQC,EAAaI,IAGpDsB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAWC,OAAQ9B,IACnB6B,EAAAA,cAACE,EAAAA,EAAa,CAACC,YAAY,IAC1B,ECGP,EAxDkBC,KAChB,MAAM,MAAEjC,EAAK,QAAEC,EAAO,OAAEC,EAAM,YAAEC,IAAgBC,EAAAA,EAAAA,GAAQ,sBAClD,IAAEC,EAAG,OAAEC,EAAM,GAAEC,IAAOC,EAAAA,EAAAA,KA8C5B,OA5CAC,EAAAA,EAAAA,YAAU,KAEJR,EAAQS,OAAS,GACnBL,EAAI,CAAEC,OAAQL,EAAQ,KACtBU,QAAQC,IAAI,gCAAiC,CAC3CC,IAAKZ,EAAQ,GAAGY,IAChBC,SAAUb,EAAQ,GAAGa,SAASC,UAC9BC,KAAMf,EAAQ,GAAGe,KACjBC,IAAKhB,EAAQ,GAAGgB,QAIlBX,EAAOQ,SAAST,IAAI,EAAG,EAAG,GAC1BC,EAAOY,OAAO,EAAG,EAAG,GACpBP,QAAQC,IAAI,iDAAkD,CAC5DC,IAAKP,EAAOO,IACZC,SAAUR,EAAOQ,SAASC,UAC1BC,KAAMV,EAAOU,KACbC,IAAKX,EAAOW,OAKhBjB,EAAMmB,UAAUC,IACVA,EAAMC,WAEJD,EAAME,cAAgBF,EAAMG,aAAeH,EAAMI,sBAEnDJ,EAAMK,UAAY,IAClBd,QAAQC,IAAI,gCAADc,OAAiCN,EAAMK,aAEpDzB,EAAM2B,IAAIP,GACZ,IAIEjB,IACFH,EAAMG,YAAcA,EACpBI,EAAGqB,kBAAkB5B,EAAMG,aAC3BQ,QAAQC,IAAI,wCACd,GAEC,CAACX,EAASI,EAAKC,EAAQN,EAAOE,EAAQC,EAAaI,IAGpDsB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAWC,OAAQ9B,IACnB6B,EAAAA,cAACE,EAAAA,EAAa,CAACC,YAAY,IAC1B,EC3CP,EAToBE,IAAmB,IAAlB,UAAEC,GAAWD,EAChC,OACEL,EAAAA,cAAAA,EAAAA,SAAA,KACiB,QAAdM,GAAuBN,EAAAA,cAAC9B,EAAQ,MAClB,SAAdoC,GAAwBN,EAAAA,cAACI,EAAS,MAClC,ECJDG,EAAS,CACX,CACIC,KAAM,UACNC,UAAW,6BACXH,UAAW,MACXI,SAAU,6BAEd,CACIF,KAAM,aACNC,UAAW,8BACXH,UAAW,OACXI,SAAU,6BAEd,CACIF,KAAM,aACNC,UAAW,8BACXH,UAAW,OACXI,SAAU,8BAgElB,EA5DsBC,KAClB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,OAC5CC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,GAEvDG,EAAW,CACbC,YAAY,EACZC,cAAe,MACfC,aAAc,EACdC,UAAU,EACVC,MAAO,IACPC,QAAQ,EACRC,eAAe,EACfC,aAAcA,CAACC,EAASC,KACpBX,EAAsBW,EAAK,GAUnC,OACI3B,EAAAA,cAAA,OAAK4B,UAAU,kBACX5B,EAAAA,cAAA,MAAI4B,UAAU,iBAAgB,sBAE9B5B,EAAAA,cAAC6B,EAAAA,EAAWZ,EACPV,EAAOuB,KAAI,CAACC,EAAOC,IAChBhC,EAAAA,cAAA,OACIiC,IAAKD,EACLJ,UAAU,aACVM,QAASA,IAfHF,KAClBA,IAAUjB,GACVF,EAAiBN,EAAOyB,GAC5B,EAY+BG,CAAiBH,GAChCI,MAAO,CACHC,cAAeL,IAAUjB,EAAqB,OAAS,SAG3Df,EAAAA,cAAA,OAAKsC,IAAKP,EAAMtB,UAAW8B,IAAKR,EAAMvB,KAAMoB,UAAU,cACtD5B,EAAAA,cAAA,OAAK4B,UAAU,cACX5B,EAAAA,cAAA,UAAK+B,EAAMvB,MACXR,EAAAA,cAAA,SAAI+B,EAAMrB,eAMzBE,GACGZ,EAAAA,cAAA,OAAK4B,UAAU,eACX5B,EAAAA,cAACwC,EAAAA,SAAQ,CAACC,SAAUzC,EAAAA,cAAA,WAAK,wBACrBA,EAAAA,cAAC0C,EAAAA,GAAM,CAACjE,OAAQ,CAAEQ,SAAU,CAAC,EAAG,EAAG,KAC/Be,EAAAA,cAAC2C,EAAW,CAACrC,UAAWM,EAAcN,cAG9CN,EAAAA,cAAA,UAAQ4B,UAAU,YAAYM,QAASA,IAAMrB,EAAiB,OAAO,MAG3E,C","sources":["webpack://my-3d-portfolio/./src/components/BMWScene.js","webpack://my-3d-portfolio/./src/components/BikeScene.js","webpack://my-3d-portfolio/./src/components/ModelViewer.js","webpack://my-3d-portfolio/./src/components/ModelsSection.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useGLTF, OrbitControls } from '@react-three/drei';\nimport { useThree } from '@react-three/fiber';\n\nconst BMWScene = () => {\n  // Load the GLB model (BMW.glb)\n  const { scene, cameras, lights, environment } = useGLTF('./assets/BMW.glb');\n  const { set, camera, gl } = useThree();\n\n  useEffect(() => {\n    // Use the camera from the GLB model if available\n    if (cameras.length > 0) {\n      set({ camera: cameras[0] });\n      console.log(\"üöÄ Using GLB Camera for BMW:\", {\n        fov: cameras[0].fov,\n        position: cameras[0].position.toArray(),\n        near: cameras[0].near,\n        far: cameras[0].far\n      });\n    } else {\n      // Fallback to a default camera if no camera is found in the GLB model\n      camera.position.set(4, 3, 6);\n      camera.lookAt(0, 0, 0);\n      console.log(\"‚ö†Ô∏è No GLB Camera found! Using fallback camera:\", {\n        fov: camera.fov,\n        position: camera.position.toArray(),\n        near: camera.near,\n        far: camera.far\n      });\n    }\n\n    // Traverse through the scene and add punctual lights from GLB model\n    scene.traverse((child) => {\n      if (child.isLight) {\n        // Check if the light is punctual (e.g., point, spot, or directional light)\n        if (child.isPointLight || child.isSpotLight || child.isDirectionalLight) {\n          // Adjust intensity (you can customize the intensity control here)\n          child.intensity = 500; // Set the intensity to a desired level (you can change this value)\n          console.log(`üí° Adjusted light intensity: ${child.intensity}`);\n        }\n        scene.add(child); // Add the light to the scene as it is in the GLB\n      }\n    });\n\n    // Apply environment map if available in the GLB\n    if (environment) {\n      scene.environment = environment;\n      gl.setEnvironmentMap(scene.environment);\n      console.log(\"üåç Environment Map Applied from GLB!\");\n    }\n\n  }, [cameras, set, camera, scene, lights, environment, gl]);\n\n  return (\n    <>\n      <primitive object={scene} />\n      <OrbitControls enableZoom={true} />\n    </>\n  );\n};\n\nexport default BMWScene;\n","import React, { useEffect } from 'react';\nimport { useGLTF, OrbitControls } from '@react-three/drei';\nimport { useThree } from '@react-three/fiber';\n\nconst BikeScene = () => {\n  const { scene, cameras, lights, environment } = useGLTF('./assets/Bike.glb');\n  const { set, camera, gl } = useThree();\n\n  useEffect(() => {\n    // Use the camera from the GLB model if available\n    if (cameras.length > 0) {\n      set({ camera: cameras[0] });\n      console.log(\"üöÄ Using GLB Camera for Bike:\", {\n        fov: cameras[0].fov,\n        position: cameras[0].position.toArray(),\n        near: cameras[0].near,\n        far: cameras[0].far\n      });\n    } else {\n      // Fallback to a default camera if no camera is found in the GLB model\n      camera.position.set(3, 2, 5);\n      camera.lookAt(0, 0, 0);\n      console.log(\"‚ö†Ô∏è No GLB Camera found! Using fallback camera:\", {\n        fov: camera.fov,\n        position: camera.position.toArray(),\n        near: camera.near,\n        far: camera.far\n      });\n    }\n\n    // Traverse through the scene and add punctual lights from GLB model\n    scene.traverse((child) => {\n      if (child.isLight) {\n        // Check if the light is punctual (e.g., point, spot, or directional light)\n        if (child.isPointLight || child.isSpotLight || child.isDirectionalLight) {\n          // Adjust intensity (you can customize the intensity control here)\n          child.intensity = 1.5; // Set the intensity to a desired level (you can change this value)\n          console.log(`üí° Adjusted light intensity: ${child.intensity}`);\n        }\n        scene.add(child); // Add the light to the scene as it is in the GLB\n      }\n    });\n\n    // Apply environment map if available in the GLB\n    if (environment) {\n      scene.environment = environment;\n      gl.setEnvironmentMap(scene.environment);\n      console.log(\"üåç Environment Map Applied from GLB!\");\n    }\n\n  }, [cameras, set, camera, scene, lights, environment, gl]);\n\n  return (\n    <>\n      <primitive object={scene} />\n      <OrbitControls enableZoom={true} />\n    </>\n  );\n};\n\nexport default BikeScene;\n","import React from 'react';\nimport BMWScene from './BMWScene';\nimport BikeScene from './BikeScene';\n\nconst ModelViewer = ({ modelName }) => {\n  return (\n    <>\n      {modelName === 'bmw' && <BMWScene />}\n      {modelName === 'bike' && <BikeScene />}\n    </>\n  );\n};\n\nexport default ModelViewer;\n","import React, { Suspense, useState } from \"react\";\nimport Slider from \"react-slick\";\nimport { Canvas } from \"@react-three/fiber\";\nimport ModelViewer from \"./ModelViewer\";\n\nconst models = [\n    {\n        name: \"BMW Car\",\n        thumbnail: \"./assets/BMW_thumbnail.png\",\n        modelName: \"bmw\",\n        metadata: \"Modeled in Blender | 2024\",\n    },\n    {\n        name: \"Sport Bike\",\n        thumbnail: \"./assets/Bike_thumbnail.png\",\n        modelName: \"bike\",\n        metadata: \"Modeled in Blender | 2023\",\n    },\n    {\n        name: \"Sport Bike\",\n        thumbnail: \"./assets/Bike_thumbnail.png\",\n        modelName: \"bike\",\n        metadata: \"Modeled in Blender | 2023\",\n    },\n];\n\nconst ModelsSection = () => {\n    const [selectedModel, setSelectedModel] = useState(null);\n    const [centeredModelIndex, setCenteredModelIndex] = useState(0); // Track centered model index\n\n    const settings = {\n        centerMode: true,\n        centerPadding: \"0px\",\n        slidesToShow: 1,\n        infinite: true,\n        speed: 500,\n        arrows: true,\n        focusOnSelect: true,\n        beforeChange: (current, next) => {\n            setCenteredModelIndex(next); // Update centered model index on slide change\n        },\n    };\n\n    const handleModelClick = (index) => {\n        if (index === centeredModelIndex) {\n            setSelectedModel(models[index]);\n        }\n    };\n\n    return (\n        <div className=\"models-section\">\n            <h2 className=\"section-title\">3D Models Showcase</h2>\n\n            <Slider {...settings}>\n                {models.map((model, index) => (\n                    <div\n                        key={index}\n                        className=\"model-card\"\n                        onClick={() => handleModelClick(index)} // Only click if centered\n                        style={{\n                            pointerEvents: index === centeredModelIndex ? \"auto\" : \"none\", // Disable pointer events for non-centered models\n                        }}\n                    >\n                        <img src={model.thumbnail} alt={model.name} className=\"thumbnail\" />\n                        <div className=\"model-info\">\n                            <h3>{model.name}</h3>\n                            <p>{model.metadata}</p>\n                        </div>\n                    </div>\n                ))}\n            </Slider>\n\n            {selectedModel && (\n                <div className=\"model-popup\">\n                    <Suspense fallback={<div>Loading 3D Model...</div>}>\n                        <Canvas camera={{ position: [0, 1, 3] }}>\n                            <ModelViewer modelName={selectedModel.modelName} />\n                        </Canvas>\n                    </Suspense>\n                    <button className=\"close-btn\" onClick={() => setSelectedModel(null)}>‚úñ</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ModelsSection;\n"],"names":["BMWScene","scene","cameras","lights","environment","useGLTF","set","camera","gl","useThree","useEffect","length","console","log","fov","position","toArray","near","far","lookAt","traverse","child","isLight","isPointLight","isSpotLight","isDirectionalLight","intensity","concat","add","setEnvironmentMap","React","object","OrbitControls","enableZoom","BikeScene","_ref","modelName","models","name","thumbnail","metadata","ModelsSection","selectedModel","setSelectedModel","useState","centeredModelIndex","setCenteredModelIndex","settings","centerMode","centerPadding","slidesToShow","infinite","speed","arrows","focusOnSelect","beforeChange","current","next","className","Slider","map","model","index","key","onClick","handleModelClick","style","pointerEvents","src","alt","Suspense","fallback","Canvas","ModelViewer"],"sourceRoot":""}