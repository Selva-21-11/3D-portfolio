{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Set up post-processing\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n\n    // Add Bloom effect for realistic lighting\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5,\n    // Strength of bloom effect\n    0.4,\n    // Bloom radius\n    0.85 // Bloom threshold\n    );\n    composer.addPass(bloomPass);\n    composerRef.current = composer;\n\n    // Set up lighting (Ambient + Directional Light)\n    const ambientLight = new THREE.AmbientLight(0x404040, 1); // Soft white light\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5);\n    scene.add(directionalLight);\n\n    // Create materials with shiny orange color\n    const shinyMaterial = new THREE.MeshStandardMaterial({\n      color: 0xffa500,\n      // Orange color\n      metalness: 1,\n      // Shiny surface\n      roughness: 0.1,\n      // Slight roughness for reflection\n      emissive: 0xffa500 // Orange glow effect\n    });\n\n    // Create two spheres\n    const largeSphereGeometry = new THREE.SphereGeometry(1);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5);\n    const largeSphere = new THREE.Mesh(largeSphereGeometry, shinyMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, shinyMaterial);\n\n    // Position the spheres (small sphere behind large sphere)\n    largeSphere.position.set(0, 0, 0);\n    smallSphere.position.set(0, 0, -2); // Behind the large sphere\n\n    // Add spheres to the scene\n    scene.add(largeSphere);\n    scene.add(smallSphere);\n\n    // Animation loop\n    const animate = () => {\n      largeSphere.rotation.x += 0.01;\n      largeSphere.rotation.y += 0.01;\n      smallSphere.rotation.x += 0.01;\n      smallSphere.rotation.y += 0.01;\n\n      // Use post-processing for final render\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Cleanup when component unmounts\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      scene.remove(largeSphere);\n      scene.remove(smallSphere);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TitleBG, \"w0SYJzZvUoBElA5+HhwO5CsX2LE=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","EffectComposer","RenderPass","UnrealBloomPass","Fragment","_Fragment","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cameraRef","composerRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","current","renderer","WebGLRenderer","antialias","setSize","document","getElementById","appendChild","domElement","composer","addPass","bloomPass","Vector2","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","shinyMaterial","MeshStandardMaterial","color","metalness","roughness","emissive","largeSphereGeometry","SphereGeometry","smallSphereGeometry","largeSphere","Mesh","smallSphere","animate","rotation","x","y","render","requestAnimationFrame","dispose","remove","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.z = 5;\r\n    cameraRef.current = camera;\r\n    \r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n\r\n    // Set up post-processing\r\n    const composer = new EffectComposer(renderer);\r\n    composer.addPass(new RenderPass(scene, camera));\r\n\r\n    // Add Bloom effect for realistic lighting\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n      1.5, // Strength of bloom effect\r\n      0.4, // Bloom radius\r\n      0.85 // Bloom threshold\r\n    );\r\n    composer.addPass(bloomPass);\r\n    composerRef.current = composer;\r\n\r\n    // Set up lighting (Ambient + Directional Light)\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 1); // Soft white light\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    directionalLight.position.set(5, 5, 5);\r\n    scene.add(directionalLight);\r\n\r\n    // Create materials with shiny orange color\r\n    const shinyMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0xffa500, // Orange color\r\n      metalness: 1, // Shiny surface\r\n      roughness: 0.1, // Slight roughness for reflection\r\n      emissive: 0xffa500, // Orange glow effect\r\n    });\r\n\r\n    // Create two spheres\r\n    const largeSphereGeometry = new THREE.SphereGeometry(1);\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.5);\r\n\r\n    const largeSphere = new THREE.Mesh(largeSphereGeometry, shinyMaterial);\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, shinyMaterial);\r\n\r\n    // Position the spheres (small sphere behind large sphere)\r\n    largeSphere.position.set(0, 0, 0);\r\n    smallSphere.position.set(0, 0, -2); // Behind the large sphere\r\n\r\n    // Add spheres to the scene\r\n    scene.add(largeSphere);\r\n    scene.add(smallSphere);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      largeSphere.rotation.x += 0.01;\r\n      largeSphere.rotation.y += 0.01;\r\n      smallSphere.rotation.x += 0.01;\r\n      smallSphere.rotation.y += 0.01;\r\n\r\n      // Use post-processing for final render\r\n      composer.render();\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Cleanup when component unmounts\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      scene.remove(largeSphere);\r\n      scene.remove(smallSphere);\r\n    };\r\n  }, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}