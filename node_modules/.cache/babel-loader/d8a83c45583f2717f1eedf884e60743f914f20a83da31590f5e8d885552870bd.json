{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n\n    // Set camera position\n    camera.position.z = 5;\n\n    // Load HDR for lighting only\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture; // Use HDR for lighting\n      scene.background = new THREE.Color(0x000000); // Set the background to black\n    });\n\n    // Create spheres with MeshPhysicalMaterial\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xffffff,\n      metalness: 0.5,\n      roughness: 0.1,\n      clearcoat: 0.3,\n      // Adds a clear coat layer\n      clearcoatRoughness: 0.05 // Slight roughness for the clear coat\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xff0000,\n      metalness: 0.8,\n      roughness: 0.2,\n      clearcoat: 0.5,\n      // Stronger clear coat\n      transmission: 0.9,\n      // Makes the material partially transparent\n      thickness: 0.5 // Thickness for transparency effect\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1.5, 0, 0); // Place it next to the big sphere\n    scene.add(smallSphere);\n\n    // Animation loop\n    const animate = () => {\n      bigSphere.rotation.y += 0.01;\n      smallSphere.rotation.y -= 0.02;\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TitleBG, \"OvuDCD3NAd1JRRnJX2FBMZFa5ds=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","Fragment","_Fragment","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cameraRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshPhysicalMaterial","color","metalness","roughness","clearcoat","clearcoatRoughness","bigSphere","Mesh","add","smallSphereGeometry","smallSphereMaterial","transmission","thickness","smallSphere","set","animate","rotation","y","render","requestAnimationFrame","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    // Set camera position\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting only\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture; // Use HDR for lighting\r\n      scene.background = new THREE.Color(0x000000); // Set the background to black\r\n    });\r\n\r\n    // Create spheres with MeshPhysicalMaterial\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const bigSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xffffff,\r\n      metalness: 0.5,\r\n      roughness: 0.1,\r\n      clearcoat: 0.3, // Adds a clear coat layer\r\n      clearcoatRoughness: 0.05, // Slight roughness for the clear coat\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n    const smallSphereMaterial = new THREE.MeshPhysicalMaterial({\r\n      color: 0xff0000,\r\n      metalness: 0.8,\r\n      roughness: 0.2,\r\n      clearcoat: 0.5, // Stronger clear coat\r\n      transmission: 0.9, // Makes the material partially transparent\r\n      thickness: 0.5, // Thickness for transparency effect\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(1.5, 0, 0); // Place it next to the big sphere\r\n    scene.add(smallSphere);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      bigSphere.rotation.y += 0.01;\r\n      smallSphere.rotation.y -= 0.02;\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}