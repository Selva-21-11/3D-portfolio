{"ast":null,"code":"var _jsxFileName = \"F:\\\\Portfolio\\\\3D-portfolio\\\\src\\\\components\\\\TitleBG.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Set up the loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n      gsap.fromTo(smallSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n    };\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matCapTexture\n    });\n\n    // Create sphere geometries with lower detail (to optimize)\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Lower segments\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Create parallax layers (2D grids)\n    const createParallaxLayer = zPosition => {\n      const geometry = new THREE.PlaneGeometry(10, 10, 10, 10);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0x888888,\n        wireframe: true,\n        opacity: 0.3,\n        transparent: true\n      });\n      const plane = new THREE.Mesh(geometry, material);\n      plane.position.z = zPosition;\n      scene.add(plane);\n      return plane;\n    };\n\n    // Add multiple parallax layers\n    const layer1 = createParallaxLayer(-2);\n    const layer2 = createParallaxLayer(-1.5);\n    const layer3 = createParallaxLayer(-1);\n    const layer4 = createParallaxLayer(-0.5);\n\n    // Throttle mouse events to reduce load (improved throttle)\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = event.clientY / window.innerHeight * 2 - 1;\n\n      // Parallax effect based on cursor position\n      const movementFactor = 0.1;\n      gsap.to(layer1.position, {\n        x: mouseXPosition * movementFactor,\n        y: -mouseYPosition * movementFactor,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n      gsap.to(layer2.position, {\n        x: mouseXPosition * movementFactor * 0.8,\n        y: -mouseYPosition * movementFactor * 0.8,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n      gsap.to(layer3.position, {\n        x: mouseXPosition * movementFactor * 0.6,\n        y: -mouseYPosition * movementFactor * 0.6,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n      gsap.to(layer4.position, {\n        x: mouseXPosition * movementFactor * 0.4,\n        y: -mouseYPosition * movementFactor * 0.4,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 50); // Increased throttle to reduce frequency\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup (optimized FilmPass)\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.05, 648, false)); // Adjusted strength for less computation\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (!isLoading) {\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup function (unload)\n    const unload = () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Dispose of materials, geometries, and textures\n      matCapTexture.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n\n      // Dispose of post-processing composer\n      composerRef.current && composerRef.current.dispose();\n\n      // Clear scene\n      scene.clear();\n      renderer.dispose();\n    };\n\n    // Call unload function on component unmount\n    return () => {\n      unload();\n    };\n  }, [isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(TitleBG, \"bhGcFzZqcdM/+x5OKU2uwn5Q7fM=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","gsap","throttle","EffectComposer","RenderPass","FilmPass","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","isLoading","setIsLoading","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","LoadingManager","onStart","console","log","onLoad","fromTo","scale","x","y","duration","ease","textureLoader","TextureLoader","matCapTexture","load","matCapMaterial","MeshMatcapMaterial","matcap","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","sphereGroup","Group","add","ambientLight","AmbientLight","createParallaxLayer","zPosition","geometry","PlaneGeometry","material","MeshBasicMaterial","color","wireframe","opacity","transparent","plane","layer1","layer2","layer3","layer4","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","movementFactor","to","angleX","Math","PI","angleY","radius","targetX","cos","targetY","sin","targetZ","addEventListener","composer","addPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","unload","removeEventListener","dispose","clear","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\n\nconst TitleBG = () => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Set up the loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n    };\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({ matcap: matCapTexture });\n\n    // Create sphere geometries with lower detail (to optimize)\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);  // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);  // Lower segments\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Create parallax layers (2D grids)\n    const createParallaxLayer = (zPosition) => {\n      const geometry = new THREE.PlaneGeometry(10, 10, 10, 10);\n      const material = new THREE.MeshBasicMaterial({\n        color: 0x888888, \n        wireframe: true, \n        opacity: 0.3,\n        transparent: true,\n      });\n      const plane = new THREE.Mesh(geometry, material);\n      plane.position.z = zPosition;\n      scene.add(plane);\n      return plane;\n    };\n\n    // Add multiple parallax layers\n    const layer1 = createParallaxLayer(-2);\n    const layer2 = createParallaxLayer(-1.5);\n    const layer3 = createParallaxLayer(-1);\n    const layer4 = createParallaxLayer(-0.5);\n\n    // Throttle mouse events to reduce load (improved throttle)\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n\n      // Parallax effect based on cursor position\n      const movementFactor = 0.1;\n      gsap.to(layer1.position, { x: mouseXPosition * movementFactor, y: -mouseYPosition * movementFactor, duration: 0.5, ease: 'power3.out' });\n      gsap.to(layer2.position, { x: mouseXPosition * movementFactor * 0.8, y: -mouseYPosition * movementFactor * 0.8, duration: 0.5, ease: 'power3.out' });\n      gsap.to(layer3.position, { x: mouseXPosition * movementFactor * 0.6, y: -mouseYPosition * movementFactor * 0.6, duration: 0.5, ease: 'power3.out' });\n      gsap.to(layer4.position, { x: mouseXPosition * movementFactor * 0.4, y: -mouseYPosition * movementFactor * 0.4, duration: 0.5, ease: 'power3.out' });\n\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: targetZ, duration: 0.5, ease: 'power3.out' });\n    }, 50);  // Increased throttle to reduce frequency\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup (optimized FilmPass)\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.05, 648, false));  // Adjusted strength for less computation\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (!isLoading) {\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup function (unload)\n    const unload = () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Dispose of materials, geometries, and textures\n      matCapTexture.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n\n      // Dispose of post-processing composer\n      composerRef.current && composerRef.current.dispose();\n\n      // Clear scene\n      scene.clear();\n      renderer.dispose();\n    };\n\n    // Call unload function on component unmount\n    return () => {\n      unload();\n    };\n  }, [isLoading]);\n\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"loading-screen\">\n          <h3>Loading...</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitleBG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}