{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null); // Define composer reference\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect,\n    // left\n    2 * aspect,\n    // right\n    2,\n    // top\n    -2,\n    // bottom\n    0.1,\n    // near\n    1000 // far\n    );\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for lighting\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Load Image Texture for Big Sphere\n    const textureLoader = new THREE.TextureLoader();\n    const bigSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg'); // Replace with your image path\n\n    // Big Sphere (Stationary) with Smooth Matte Material and Subtle Shine\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\n      map: bigSphereTexture,\n      // Apply the loaded texture\n      metalness: 0.1,\n      // Slightly metallic for subtle reflections\n      roughness: 0.85,\n      // High roughness for a smooth matte effect\n      envMapIntensity: 0.4 // Low intensity for the reflection, smooth and not too bright\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    scene.add(bigSphere);\n    bigSphereRef.current = bigSphere;\n\n    // Load Image Texture for Small Sphere\n    const smallSphereTexture = textureLoader.load('/assets/your-small-sphere-texture.jpg'); // Replace with your image path\n\n    // Small Sphere (Will rotate around Z-axis) with Smooth Matte Material and Subtle Shine\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\n      map: smallSphereTexture,\n      // Apply the loaded texture\n      metalness: 0.1,\n      // Slightly metallic for subtle reflections\n      roughness: 0.85,\n      // High roughness for a smooth matte effect\n      envMapIntensity: 0.4 // Low intensity for the reflection, smooth and not too bright\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\n    scene.add(smallSphere);\n    smallSphereRef.current = smallSphere;\n\n    // Add Two Directional Lights to the scene\n\n    // First Directional Light (Soft)\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.1); // White light with moderate intensity\n    directionalLight1.position.set(3, 3, 3); // Position it diagonally above and to the right\n    directionalLight1.target.position.set(0, 0, 0); // Pointing towards the origin (scene center)\n    scene.add(directionalLight1);\n    scene.add(directionalLight1.target); // Add target for directional light\n\n    // Second Directional Light (Harder)\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5); // White light with lower intensity\n    directionalLight2.position.set(-3, -3, 3); // Position it diagonally below and to the left\n    directionalLight2.target.position.set(0, 0, 0); // Pointing towards the origin (scene center)\n    scene.add(directionalLight2);\n    scene.add(directionalLight2.target); // Add target for directional light\n\n    // Handle Mouse Move for Interactive Animations\n    const handleMouseMove = event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1; // Normalized X-axis (-1 to 1)\n\n      // GSAP animation for smooth movement\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\n\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\n      const radius = 1; // New smaller radius for the small sphere's orbit\n\n      // Calculate the new position based on the reduced radius\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\n\n      // Move the small sphere backwards in the Z-axis (negative Z value)\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\n\n      // Using GSAP to animate the small sphere's movement in a smooth manner\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        // Move in Z-axis to make it go backwards\n        duration: 0.5,\n        // Smooth transition duration\n        ease: 'power3.out' // Easing for smoothness\n      });\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    const renderPass = new RenderPass(scene, camera);\n    composer.addPass(renderPass);\n\n    // Film effect (for added texture and realism)\n    const filmPass = new FilmPass(0.35, 0.025, 648, false);\n    composer.addPass(filmPass);\n    composerRef.current = composer;\n\n    // Animation Loop (No rotation for big sphere anymore)\n    const animate = () => {\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"PQQqMr0DFQTW5vKSRBQfYl+2+4U=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","gsap","EffectComposer","RenderPass","FilmPass","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","textureLoader","TextureLoader","bigSphereTexture","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshStandardMaterial","map","metalness","roughness","envMapIntensity","bigSphere","Mesh","add","smallSphereTexture","smallSphereGeometry","smallSphereMaterial","smallSphere","set","directionalLight1","DirectionalLight","target","directionalLight2","handleMouseMove","event","mouseXPosition","clientX","angle","Math","PI","radius","targetX","cos","targetY","sin","targetZ","to","x","y","duration","ease","addEventListener","composer","renderPass","addPass","filmPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\nimport { gsap } from 'gsap';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const composerRef = useRef(null);  // Define composer reference\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, // left\r\n      2 * aspect,  // right\r\n      2,           // top\r\n      -2,          // bottom\r\n      0.1,          // near\r\n      1000          // far\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    camera.position.z = 5;\r\n\r\n    // Load HDR for lighting\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture;\r\n      scene.background = new THREE.Color(0x000000);\r\n    });\r\n\r\n    // Load Image Texture for Big Sphere\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const bigSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg'); // Replace with your image path\r\n\r\n    // Big Sphere (Stationary) with Smooth Matte Material and Subtle Shine\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\r\n      map: bigSphereTexture, // Apply the loaded texture\r\n      metalness: 0.1,  // Slightly metallic for subtle reflections\r\n      roughness: 0.85,  // High roughness for a smooth matte effect\r\n      envMapIntensity: 0.4, // Low intensity for the reflection, smooth and not too bright\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    scene.add(bigSphere);\r\n    bigSphereRef.current = bigSphere;\r\n\r\n    // Load Image Texture for Small Sphere\r\n    const smallSphereTexture = textureLoader.load('/assets/your-small-sphere-texture.jpg'); // Replace with your image path\r\n\r\n    // Small Sphere (Will rotate around Z-axis) with Smooth Matte Material and Subtle Shine\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\r\n      map: smallSphereTexture, // Apply the loaded texture\r\n      metalness: 0.1,  // Slightly metallic for subtle reflections\r\n      roughness: 0.85,  // High roughness for a smooth matte effect\r\n      envMapIntensity: 0.4, // Low intensity for the reflection, smooth and not too bright\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(2, 0, 0); // Initial position behind the big sphere\r\n    scene.add(smallSphere);\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Add Two Directional Lights to the scene\r\n\r\n    // First Directional Light (Soft)\r\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.1); // White light with moderate intensity\r\n    directionalLight1.position.set(3, 3, 3);  // Position it diagonally above and to the right\r\n    directionalLight1.target.position.set(0, 0, 0); // Pointing towards the origin (scene center)\r\n    scene.add(directionalLight1);\r\n    scene.add(directionalLight1.target);  // Add target for directional light\r\n\r\n    // Second Directional Light (Harder)\r\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5); // White light with lower intensity\r\n    directionalLight2.position.set(-3, -3, 3);  // Position it diagonally below and to the left\r\n    directionalLight2.target.position.set(0, 0, 0); // Pointing towards the origin (scene center)\r\n    scene.add(directionalLight2);\r\n    scene.add(directionalLight2.target);  // Add target for directional light\r\n\r\n    // Handle Mouse Move for Interactive Animations\r\n    const handleMouseMove = (event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1; // Normalized X-axis (-1 to 1)\r\n      \r\n      // GSAP animation for smooth movement\r\n      const angle = mouseXPosition * Math.PI; // Map mouseX to an angle (-π to π)\r\n      \r\n      // Reduced orbit distance (radius), change the value from 2 to a smaller value like 1\r\n      const radius = 1; // New smaller radius for the small sphere's orbit\r\n      \r\n      // Calculate the new position based on the reduced radius\r\n      const targetX = radius * Math.cos(angle); // Orbit distance 1 (adjust to your preference)\r\n      const targetY = radius * Math.sin(angle); // Orbit distance 1 (adjust to your preference)\r\n      \r\n      // Move the small sphere backwards in the Z-axis (negative Z value)\r\n      const targetZ = -1; // Adjust this to move it further back (in negative direction)\r\n      \r\n      // Using GSAP to animate the small sphere's movement in a smooth manner\r\n      gsap.to(smallSphere.position, {\r\n        x: targetX,\r\n        y: targetY,\r\n        z: targetZ, // Move in Z-axis to make it go backwards\r\n        duration: 0.5, // Smooth transition duration\r\n        ease: 'power3.out', // Easing for smoothness\r\n      });\r\n    };\r\n    \r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Post-processing setup\r\n    const composer = new EffectComposer(renderer);\r\n    const renderPass = new RenderPass(scene, camera);\r\n    composer.addPass(renderPass);\r\n\r\n    // Film effect (for added texture and realism)\r\n    const filmPass = new FilmPass(0.35, 0.025, 648, false);\r\n    composer.addPass(filmPass);\r\n\r\n    composerRef.current = composer;\r\n\r\n    // Animation Loop (No rotation for big sphere anymore)\r\n    const animate = () => {\r\n      composer.render();\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Resize Event Listener\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}