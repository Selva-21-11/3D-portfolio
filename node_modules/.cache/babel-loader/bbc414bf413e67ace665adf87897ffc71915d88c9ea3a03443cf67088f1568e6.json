{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { gsap } from 'gsap';\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Load HDR for lighting\n    const rgbeLoader = new RGBELoader();\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', texture => {\n      texture.mapping = THREE.EquirectangularReflectionMapping;\n      scene.environment = texture;\n      scene.background = new THREE.Color(0x000000);\n    });\n\n    // Textures and Materials\n    const textureLoader = new THREE.TextureLoader();\n    const bigSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\n    const smallSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\n      map: bigSphereTexture,\n      metalness: 0.1,\n      roughness: 0.85,\n      envMapIntensity: 0.4\n    });\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0xFF5349,\n      // Orange color\n      emissive: 0xFF6A00,\n      // Glow color\n      emissiveIntensity: 0.8,\n      metalness: 0.1,\n      roughness: 0.85,\n      envMapIntensity: 0.4\n    });\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(1, 0, 0);\n    scene.add(bigSphere, smallSphere);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Lights\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.1);\n    directionalLight1.position.set(3, 3, 3);\n    scene.add(directionalLight1);\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);\n    directionalLight2.position.set(-3, -3, 3);\n    scene.add(directionalLight2);\n\n    // Tilt Effect: Handle Mouse Move\n    const handleMouseMove = event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = -(event.clientY / window.innerHeight) * 2 + 1; // Inverted Y for correct direction\n\n      // Tilt Strength (adjust how much the objects rotate)\n      const tiltStrength = 0.1; // You can adjust this value to control the intensity of the tilt\n\n      // Apply rotation to the big sphere based on mouse position\n      gsap.to(bigSphere.rotation, {\n        x: mouseYPosition * tiltStrength,\n        y: mouseXPosition * tiltStrength,\n        duration: 0.3,\n        ease: 'power3.out'\n      });\n\n      // Apply rotation to the small sphere based on mouse position\n      gsap.to(smallSphere.rotation, {\n        x: mouseYPosition * tiltStrength,\n        y: mouseXPosition * tiltStrength,\n        duration: 0.3,\n        ease: 'power3.out'\n      });\n    };\n\n    // Listen for mouse move events\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Animation Loop\n    const animate = () => {\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize Event Listener\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      scene.clear();\n    };\n  }, []);\n  return null;\n};\n_s(TitleBG, \"P6dwjIPfWdVV0LEP/LCVnx1KMPk=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","RGBELoader","gsap","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","rgbeLoader","load","texture","mapping","EquirectangularReflectionMapping","environment","background","Color","textureLoader","TextureLoader","bigSphereTexture","smallSphereTexture","bigSphereMaterial","MeshStandardMaterial","map","metalness","roughness","envMapIntensity","smallSphereMaterial","color","emissive","emissiveIntensity","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","set","add","directionalLight1","DirectionalLight","directionalLight2","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","tiltStrength","to","rotation","x","y","duration","ease","addEventListener","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\nimport { gsap } from 'gsap';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const scene = new THREE.Scene();\r\n    const aspect = window.innerWidth / window.innerHeight;\r\n    const camera = new THREE.OrthographicCamera(\r\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    renderer.physicallyCorrectLights = true;\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n    camera.position.z = 5;\r\n  \r\n    // Load HDR for lighting\r\n    const rgbeLoader = new RGBELoader();\r\n    rgbeLoader.load('/assets/brown_photostudio_02_2k.hdr', (texture) => {\r\n      texture.mapping = THREE.EquirectangularReflectionMapping;\r\n      scene.environment = texture;\r\n      scene.background = new THREE.Color(0x000000);\r\n    });\r\n  \r\n    // Textures and Materials\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const bigSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\r\n    const smallSphereTexture = textureLoader.load('assets/Poliigon_MetalPaintedMatte_7037_BaseColor.jpg');\r\n  \r\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\r\n      map: bigSphereTexture, metalness: 0.1, roughness: 0.85, envMapIntensity: 0.4\r\n    });\r\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0xFF5349, // Orange color\r\n      emissive: 0xFF6A00, // Glow color\r\n      emissiveIntensity: 0.8,\r\n      metalness: 0.1,\r\n      roughness: 0.85,\r\n      envMapIntensity: 0.4\r\n    });\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n  \r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(1, 0, 0);\r\n    scene.add(bigSphere, smallSphere);\r\n    bigSphereRef.current = bigSphere;\r\n    smallSphereRef.current = smallSphere;\r\n  \r\n    // Lights\r\n    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.1);\r\n    directionalLight1.position.set(3, 3, 3);\r\n    scene.add(directionalLight1);\r\n  \r\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);\r\n    directionalLight2.position.set(-3, -3, 3);\r\n    scene.add(directionalLight2);\r\n  \r\n    // Tilt Effect: Handle Mouse Move\r\n    const handleMouseMove = (event) => {\r\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\r\n      const mouseYPosition = -(event.clientY / window.innerHeight) * 2 + 1; // Inverted Y for correct direction\r\n  \r\n      // Tilt Strength (adjust how much the objects rotate)\r\n      const tiltStrength = 0.1;  // You can adjust this value to control the intensity of the tilt\r\n  \r\n      // Apply rotation to the big sphere based on mouse position\r\n      gsap.to(bigSphere.rotation, {\r\n        x: mouseYPosition * tiltStrength,\r\n        y: mouseXPosition * tiltStrength,\r\n        duration: 0.3,\r\n        ease: 'power3.out',\r\n      });\r\n  \r\n      // Apply rotation to the small sphere based on mouse position\r\n      gsap.to(smallSphere.rotation, {\r\n        x: mouseYPosition * tiltStrength,\r\n        y: mouseXPosition * tiltStrength,\r\n        duration: 0.3,\r\n        ease: 'power3.out',\r\n      });\r\n    };\r\n  \r\n    // Listen for mouse move events\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n  \r\n    // Animation Loop\r\n    const animate = () => {\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n  \r\n    // Resize Event Listener\r\n    const onWindowResize = () => {\r\n      const aspect = window.innerWidth / window.innerHeight;\r\n      camera.left = -2 * aspect;\r\n      camera.right = 2 * aspect;\r\n      camera.top = 2;\r\n      camera.bottom = -2;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', onWindowResize);\r\n  \r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      renderer.dispose();\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n  \r\n\r\n  return null;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}