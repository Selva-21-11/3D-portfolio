{"ast":null,"code":"var _jsxFileName = \"F:\\\\Portfolio\\\\3D-portfolio\\\\src\\\\components\\\\TitleBG.js\",\n  _s2 = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = ({\n  onLoaded\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRendered, setIsRendered] = useState(false); // New state to prevent multiple renders\n\n  _s(useEffect(_s(() => {\n    _s();\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n    const [isLoading, setIsLoading] = useState(true);\n    const [isRendered, setIsRendered] = useState(false);\n    useEffect(() => {\n      if (isRendered) return; // Prevent the effect from running again after rendering\n\n      // Set up the loading manager\n      const loadingManager = new THREE.LoadingManager();\n      loadingManager.onStart = () => console.log(\"Loading started...\");\n      loadingManager.onLoad = () => {\n        if (!isRendered) {\n          // Check if it's already rendered\n          console.log(\"Loading complete!\");\n          setIsLoading(false);\n          onLoaded(); // Call the onLoaded prop when loading is complete\n\n          // Trigger popup animation after loading\n          gsap.fromTo(bigSphereRef.current.scale, {\n            x: 0,\n            y: 0,\n            z: 0\n          }, {\n            x: 1,\n            y: 1,\n            z: 1,\n            duration: 1,\n            ease: 'power3.out'\n          });\n          gsap.fromTo(smallSphereRef.current.scale, {\n            x: 0,\n            y: 0,\n            z: 0\n          }, {\n            x: 1,\n            y: 1,\n            z: 1,\n            duration: 1,\n            ease: 'power3.out'\n          });\n\n          // Set the render flag to true after loading\n          setIsRendered(true);\n        }\n      };\n    }, [isRendered]); // Only run this effect when isRendered changes\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matCapTexture\n    });\n\n    // Create sphere geometries\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Throttle mouse events to reduce load\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = event.clientY / window.innerHeight * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 20);\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (isRendered) {\n        // Check if rendering is required\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      scene.clear();\n    };\n  }, \"46g9UWpWCPt7f/OQDlGVSKB6ANs=\"), [isLoading, isRendered, onLoaded]), \"46g9UWpWCPt7f/OQDlGVSKB6ANs=\"); // Add `isRendered` state to the dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s2(TitleBG, \"Kkzgm/8nz5b8Mk/ds8uuBzvW6VE=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","gsap","throttle","EffectComposer","RenderPass","FilmPass","jsxDEV","_jsxDEV","TitleBG","onLoaded","_s2","_s","$RefreshSig$","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","isLoading","setIsLoading","isRendered","setIsRendered","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","LoadingManager","onStart","console","log","onLoad","fromTo","scale","x","y","duration","ease","textureLoader","TextureLoader","matCapTexture","load","matCapMaterial","MeshMatcapMaterial","matcap","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","sphereGroup","Group","add","ambientLight","AmbientLight","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","angleX","Math","PI","angleY","radius","targetX","cos","targetY","sin","targetZ","to","addEventListener","composer","addPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\n\nconst TitleBG = ({ onLoaded }) => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRendered, setIsRendered] = useState(false);  // New state to prevent multiple renders\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\nconst [isLoading, setIsLoading] = useState(true);\nconst [isRendered, setIsRendered] = useState(false);\n\nuseEffect(() => {\n  if (isRendered) return;  // Prevent the effect from running again after rendering\n\n  // Set up the loading manager\n  const loadingManager = new THREE.LoadingManager();\n  \n  loadingManager.onStart = () => console.log(\"Loading started...\");\n  \n  loadingManager.onLoad = () => {\n    if (!isRendered) {  // Check if it's already rendered\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n      onLoaded();  // Call the onLoaded prop when loading is complete\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      \n      // Set the render flag to true after loading\n      setIsRendered(true);\n    }\n  };\n\n}, [isRendered]);  // Only run this effect when isRendered changes\n\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({ matcap: matCapTexture });\n\n    // Create sphere geometries\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Throttle mouse events to reduce load\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: targetZ, duration: 0.5, ease: 'power3.out' });\n    }, 20);\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (isRendered) {  // Check if rendering is required\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      scene.clear();\n    };\n  }, [isLoading, isRendered, onLoaded]);  // Add `isRendered` state to the dependency array\n\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"loading-screen\">\n          <h3>Loading...</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitleBG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}