{"ast":null,"code":"var _jsxFileName = \"F:\\\\Portfolio\\\\3D-portfolio\\\\src\\\\components\\\\TitleBG.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n\n    // Restore the orthographic camera setup\n    const camera = new THREE.OrthographicCamera(-5 * aspect, 5 * aspect, 5, -5, 0.1, 1000); // Restoring previous camera settings, with a large frustum size to match grid size\n    cameraRef.current = camera;\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Trigger animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n      gsap.fromTo(smallSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n    };\n\n    // Texture loading\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Path to MatCap texture\n\n    // Materials and geometries\n    const matCapMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matCapTexture\n    });\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32); // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Lower segments\n\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Create a 2D grid plane\n    const gridSize = 20; // Grid size\n    const divisions = 20; // Number of divisions\n\n    const gridTexture = new THREE.TextureLoader().load('/assets/grid-texture.png'); // Path to grid texture\n    const planeGeometry = new THREE.PlaneGeometry(gridSize, gridSize);\n    const planeMaterial = new THREE.MeshBasicMaterial({\n      map: gridTexture,\n      side: THREE.DoubleSide,\n      transparent: true,\n      opacity: 0.5\n    });\n    const gridPlane = new THREE.Mesh(planeGeometry, planeMaterial);\n    gridPlane.rotation.x = Math.PI / 2; // Rotate to be horizontal\n    scene.add(gridPlane);\n\n    // Throttled mouse movement handling\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = event.clientY / window.innerHeight * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 50);\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.05, 648, false));\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (!isLoading) {\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -5 * aspect;\n      camera.right = 5 * aspect;\n      camera.top = 5;\n      camera.bottom = -5;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup function\n    const unload = () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Dispose of resources\n      matCapTexture.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n      composerRef.current && composerRef.current.dispose();\n      scene.clear();\n      renderer.dispose();\n    };\n    return () => {\n      unload();\n    };\n  }, [isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(TitleBG, \"bhGcFzZqcdM/+x5OKU2uwn5Q7fM=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","useState","THREE","gsap","throttle","EffectComposer","RenderPass","FilmPass","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","isLoading","setIsLoading","scene","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","current","renderer","WebGLRenderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","position","z","loadingManager","LoadingManager","onStart","console","log","onLoad","fromTo","scale","x","y","duration","ease","textureLoader","TextureLoader","matCapTexture","load","matCapMaterial","MeshMatcapMaterial","matcap","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","sphereGroup","Group","add","ambientLight","AmbientLight","gridSize","divisions","gridTexture","planeGeometry","PlaneGeometry","planeMaterial","MeshBasicMaterial","map","side","DoubleSide","transparent","opacity","gridPlane","rotation","Math","PI","handleMouseMove","event","mouseXPosition","clientX","mouseYPosition","clientY","angleX","angleY","radius","targetX","cos","targetY","sin","targetZ","to","addEventListener","composer","addPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","unload","removeEventListener","dispose","material","clear","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { throttle } from 'lodash';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass';\n\nconst TitleBG = () => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n\n    // Restore the orthographic camera setup\n    const camera = new THREE.OrthographicCamera(\n      -5 * aspect, 5 * aspect, 5, -5, 0.1, 1000\n    ); // Restoring previous camera settings, with a large frustum size to match grid size\n    cameraRef.current = camera;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    sceneRef.current = scene;\n\n    camera.position.z = 5;\n\n    // Loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n\n      // Trigger animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n    };\n\n    // Texture loading\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Path to MatCap texture\n\n    // Materials and geometries\n    const matCapMaterial = new THREE.MeshMatcapMaterial({ matcap: matCapTexture });\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);  // Lower segments\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);  // Lower segments\n\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic ambient light\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Create a 2D grid plane\n    const gridSize = 20;  // Grid size\n    const divisions = 20; // Number of divisions\n\n    const gridTexture = new THREE.TextureLoader().load('/assets/grid-texture.png'); // Path to grid texture\n    const planeGeometry = new THREE.PlaneGeometry(gridSize, gridSize);\n    const planeMaterial = new THREE.MeshBasicMaterial({\n      map: gridTexture,\n      side: THREE.DoubleSide,\n      transparent: true,\n      opacity: 0.5\n    });\n\n    const gridPlane = new THREE.Mesh(planeGeometry, planeMaterial);\n    gridPlane.rotation.x = Math.PI / 2;  // Rotate to be horizontal\n    scene.add(gridPlane);\n\n    // Throttled mouse movement handling\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: targetZ, duration: 0.5, ease: 'power3.out' });\n    }, 50);\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.05, 648, false));\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (!isLoading) {\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -5 * aspect;\n      camera.right = 5 * aspect;\n      camera.top = 5;\n      camera.bottom = -5;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup function\n    const unload = () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n\n      // Dispose of resources\n      matCapTexture.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      bigSphere.material.dispose();\n      smallSphere.material.dispose();\n      composerRef.current && composerRef.current.dispose();\n\n      scene.clear();\n      renderer.dispose();\n    };\n\n    return () => {\n      unload();\n    };\n  }, [isLoading]);\n\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"loading-screen\">\n          <h3>Loading...</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitleBG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}