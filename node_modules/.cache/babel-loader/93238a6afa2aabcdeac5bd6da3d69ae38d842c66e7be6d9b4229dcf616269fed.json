{"ast":null,"code":"import { AdditiveBlending, ShaderMaterial, UniformsUtils, Vector2, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4) {\n    super();\n\n    // render targets\n\n    this.renderTargetX = new WebGLRenderTarget(); // will be resized later\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(); // will be resized later\n    this.renderTargetY.texture.name = 'BloomPass.y';\n\n    // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n\n    // convolution material\n\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        'KERNEL_SIZE_FLOAT': kernelSize.toFixed(1),\n        'KERNEL_SIZE_INT': kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false);\n\n    // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n\n    // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n\n    // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n  setSize(width, height) {\n    this.renderTargetX.setSize(width, height);\n    this.renderTargetY.setSize(width, height);\n  }\n  dispose() {\n    this.renderTargetX.dispose();\n    this.renderTargetY.dispose();\n    this.materialCombine.dispose();\n    this.materialConvolution.dispose();\n    this.fsQuad.dispose();\n  }\n}\nconst CombineShader = {\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'strength': {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform float strength;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = strength * texel;\n\n\t\t}`\n};\nBloomPass.blurX = new Vector2(0.001953125, 0.0);\nBloomPass.blurY = new Vector2(0.0, 0.001953125);\nexport { BloomPass };","map":{"version":3,"names":["AdditiveBlending","ShaderMaterial","UniformsUtils","Vector2","WebGLRenderTarget","Pass","FullScreenQuad","ConvolutionShader","BloomPass","constructor","strength","kernelSize","sigma","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","value","materialCombine","vertexShader","fragmentShader","blending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","toFixed","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","setSize","width","height","dispose"],"sources":["F:/Portfolio/3D-portfolio/node_modules/three/examples/jsm/postprocessing/BloomPass.js"],"sourcesContent":["import {\r\n\tAdditiveBlending,\r\n\tShaderMaterial,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tWebGLRenderTarget\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\r\n\r\nclass BloomPass extends Pass {\r\n\r\n\tconstructor( strength = 1, kernelSize = 25, sigma = 4 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// render targets\r\n\r\n\t\tthis.renderTargetX = new WebGLRenderTarget(); // will be resized later\r\n\t\tthis.renderTargetX.texture.name = 'BloomPass.x';\r\n\t\tthis.renderTargetY = new WebGLRenderTarget(); // will be resized later\r\n\t\tthis.renderTargetY.texture.name = 'BloomPass.y';\r\n\r\n\t\t// combine material\r\n\r\n\t\tthis.combineUniforms = UniformsUtils.clone( CombineShader.uniforms );\r\n\r\n\t\tthis.combineUniforms[ 'strength' ].value = strength;\r\n\r\n\t\tthis.materialCombine = new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: this.combineUniforms,\r\n\t\t\tvertexShader: CombineShader.vertexShader,\r\n\t\t\tfragmentShader: CombineShader.fragmentShader,\r\n\t\t\tblending: AdditiveBlending,\r\n\t\t\ttransparent: true\r\n\r\n\t\t} );\r\n\r\n\t\t// convolution material\r\n\r\n\t\tconst convolutionShader = ConvolutionShader;\r\n\r\n\t\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\r\n\r\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\r\n\t\tthis.convolutionUniforms[ 'cKernel' ].value = ConvolutionShader.buildKernel( sigma );\r\n\r\n\t\tthis.materialConvolution = new ShaderMaterial( {\r\n\r\n\t\t\tuniforms: this.convolutionUniforms,\r\n\t\t\tvertexShader: convolutionShader.vertexShader,\r\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\r\n\t\t\tdefines: {\r\n\t\t\t\t'KERNEL_SIZE_FLOAT': kernelSize.toFixed( 1 ),\r\n\t\t\t\t'KERNEL_SIZE_INT': kernelSize.toFixed( 0 )\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tthis.needsSwap = false;\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( null );\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\r\n\r\n\t\t// Render quad with blured scene into texture (convolution pass 1)\r\n\r\n\t\tthis.fsQuad.material = this.materialConvolution;\r\n\r\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetX );\r\n\t\trenderer.clear();\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\r\n\t\t// Render quad with blured scene into texture (convolution pass 2)\r\n\r\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = this.renderTargetX.texture;\r\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurY;\r\n\r\n\t\trenderer.setRenderTarget( this.renderTargetY );\r\n\t\trenderer.clear();\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t// Render original scene with superimposed blur to texture\r\n\r\n\t\tthis.fsQuad.material = this.materialCombine;\r\n\r\n\t\tthis.combineUniforms[ 'tDiffuse' ].value = this.renderTargetY.texture;\r\n\r\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\r\n\r\n\t\trenderer.setRenderTarget( readBuffer );\r\n\t\tif ( this.clear ) renderer.clear();\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.renderTargetX.setSize( width, height );\r\n\t\tthis.renderTargetY.setSize( width, height );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.renderTargetX.dispose();\r\n\t\tthis.renderTargetY.dispose();\r\n\r\n\t\tthis.materialCombine.dispose();\r\n\t\tthis.materialConvolution.dispose();\r\n\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst CombineShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'strength': { value: 1.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform float strength;\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\t\t\tgl_FragColor = strength * texel;\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\r\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\r\n\r\nexport { BloomPass };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}