{"ast":null,"code":"var _jsxFileName = \"F:\\\\Portfolio\\\\3D-portfolio\\\\src\\\\components\\\\TitleBG.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = ({\n  onLoaded\n}) => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRendered, setIsRendered] = useState(false); // New state to prevent multiple renders\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(-2 * aspect, 2 * aspect, 2, -2, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Set up the loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n      onLoaded(); // Call the onLoaded prop when the loading is complete\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n      gsap.fromTo(smallSphereRef.current.scale, {\n        x: 0,\n        y: 0,\n        z: 0\n      }, {\n        x: 1,\n        y: 1,\n        z: 1,\n        duration: 1,\n        ease: 'power3.out'\n      });\n\n      // Set the render flag to true after loading\n      setIsRendered(true);\n    };\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({\n      matcap: matCapTexture\n    });\n\n    // Create sphere geometries\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Throttle mouse events to reduce load\n    const handleMouseMove = throttle(event => {\n      const mouseXPosition = event.clientX / window.innerWidth * 2 - 1;\n      const mouseYPosition = event.clientY / window.innerHeight * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n      gsap.to(smallSphere.position, {\n        x: targetX,\n        y: targetY,\n        z: targetZ,\n        duration: 0.5,\n        ease: 'power3.out'\n      });\n    }, 20);\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (isRendered) {\n        // Check if rendering is required\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      scene.clear();\n    };\n  }, [isLoading, isRendered, onLoaded]); // Add `isRendered` state to the dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(TitleBG, \"Kkzgm/8nz5b8Mk/ds8uuBzvW6VE=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["TitleBG","onLoaded","_s","sceneRef","useRef","rendererRef","cameraRef","bigSphereRef","smallSphereRef","composerRef","isLoading","setIsLoading","useState","isRendered","setIsRendered","useEffect","scene","THREE","Scene","aspect","window","innerWidth","innerHeight","camera","OrthographicCamera","renderer","WebGLRenderer","antialias","preserveDrawingBuffer","setSize","outputEncoding","sRGBEncoding","physicallyCorrectLights","document","getElementById","appendChild","domElement","current","position","z","loadingManager","LoadingManager","onStart","console","log","onLoad","gsap","fromTo","scale","x","y","duration","ease","textureLoader","TextureLoader","matCapTexture","load","matCapMaterial","MeshMatcapMaterial","matcap","bigSphereGeometry","SphereGeometry","smallSphereGeometry","bigSphere","Mesh","smallSphere","sphereGroup","Group","add","ambientLight","AmbientLight","handleMouseMove","throttle","event","mouseXPosition","clientX","mouseYPosition","clientY","angleX","Math","PI","angleY","radius","targetX","cos","targetY","sin","targetZ","to","addEventListener","composer","EffectComposer","addPass","RenderPass","FilmPass","animate","render","requestAnimationFrame","onWindowResize","left","right","top","bottom","updateProjectionMatrix","removeEventListener","dispose","clear","_jsxDEV","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["\n\nconst TitleBG = ({ onLoaded }) => {\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const composerRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRendered, setIsRendered] = useState(false);  // New state to prevent multiple renders\n  \n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n    const aspect = window.innerWidth / window.innerHeight;\n    const camera = new THREE.OrthographicCamera(\n      -2 * aspect, 2 * aspect, 2, -2, 0.1, 1000\n    );\n    const renderer = new THREE.WebGLRenderer({ antialias: true, preserveDrawingBuffer: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.physicallyCorrectLights = true;\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n    camera.position.z = 5;\n\n    // Set up the loading manager\n    const loadingManager = new THREE.LoadingManager();\n    loadingManager.onStart = () => console.log(\"Loading started...\");\n    loadingManager.onLoad = () => {\n      console.log(\"Loading complete!\");\n      setIsLoading(false);\n      onLoaded();  // Call the onLoaded prop when the loading is complete\n\n      // Trigger popup animation after loading\n      gsap.fromTo(bigSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      gsap.fromTo(smallSphereRef.current.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 1, ease: 'power3.out' });\n      \n      // Set the render flag to true after loading\n      setIsRendered(true);\n    };\n\n    // Load MatCap texture\n    const textureLoader = new THREE.TextureLoader(loadingManager);\n    const matCapTexture = textureLoader.load('/assets/mattext.png'); // Replace with the path to your MatCap PNG file\n\n    // Create materials using MatCap texture\n    const matCapMaterial = new THREE.MeshMatcapMaterial({ matcap: matCapTexture });\n\n    // Create sphere geometries\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n\n    // Create meshes with MatCap material\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, matCapMaterial);\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, matCapMaterial);\n\n    // Group the spheres for easier management\n    const sphereGroup = new THREE.Group();\n    sphereGroup.add(bigSphere);\n    sphereGroup.add(smallSphere);\n    scene.add(sphereGroup);\n\n    bigSphereRef.current = bigSphere;\n    smallSphereRef.current = smallSphere;\n\n    // Basic lights (not necessary for MatCap material, but kept for completeness)\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Throttle mouse events to reduce load\n    const handleMouseMove = throttle((event) => {\n      const mouseXPosition = (event.clientX / window.innerWidth) * 2 - 1;\n      const mouseYPosition = (event.clientY / window.innerHeight) * 2 - 1;\n      const angleX = mouseXPosition * Math.PI;\n      const angleY = mouseYPosition * Math.PI;\n      const radius = 1;\n\n      const targetX = radius * Math.cos(angleX);\n      const targetY = radius * Math.sin(angleY);\n      const targetZ = -1;\n\n      gsap.to(smallSphere.position, { x: targetX, y: targetY, z: targetZ, duration: 0.5, ease: 'power3.out' });\n    }, 20);\n\n    window.addEventListener('mousemove', handleMouseMove);\n\n    // Post-processing setup\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    composer.addPass(new FilmPass(0.2, 0.025, 648, false)); // Lower effect strength\n    composerRef.current = composer;\n\n    // Animation loop\n    const animate = () => {\n      if (isRendered) {  // Check if rendering is required\n        composer.render();\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Resize handling\n    const onWindowResize = () => {\n      const aspect = window.innerWidth / window.innerHeight;\n      camera.left = -2 * aspect;\n      camera.right = 2 * aspect;\n      camera.top = 2;\n      camera.bottom = -2;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', onWindowResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      renderer.dispose();\n      bigSphereGeometry.dispose();\n      smallSphereGeometry.dispose();\n      scene.clear();\n    };\n  }, [isLoading, isRendered, onLoaded]);  // Add `isRendered` state to the dependency array\n\n  return (\n    <div>\n      {isLoading && (\n        <div className=\"loading-screen\">\n          <h3>Loading...</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TitleBG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}