{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TitleBG = () => {\n  _s();\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const bigSphereRef = useRef(null);\n  const smallSphereRef = useRef(null);\n  const cameraRef = useRef(null);\n  const composerRef = useRef(null);\n  useEffect(() => {\n    // Set up scene, camera, and renderer\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('hero').appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n    sceneRef.current = scene;\n\n    // Add HDRI environment map for realistic lighting\n    const loader = new RGBELoader();\n    loader.load('', texture => {\n      texture.mapping = THREE.EquirectangularRefractionMapping;\n      scene.background = texture;\n      scene.environment = texture;\n    });\n\n    // Create big sphere\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0x0077ff,\n      metalness: 0.6,\n      roughness: 0.3\n    });\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\n    bigSphere.position.set(0, 0, 0);\n    scene.add(bigSphere);\n    bigSphereRef.current = bigSphere;\n\n    // Create small sphere\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\n      color: 0xff7700,\n      metalness: 0.8,\n      roughness: 0.2\n    });\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\n    smallSphere.position.set(2, 0, 0); // Initial position relative to the big sphere\n    scene.add(smallSphere);\n    smallSphereRef.current = smallSphere;\n\n    // Set up camera position\n    camera.position.z = 5;\n\n    // Add ambient and directional lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 1); // Soft ambient light\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(1, 1, 1).normalize();\n    scene.add(directionalLight);\n\n    // Set up post-processing with bloom effect\n    const composer = new EffectComposer(renderer);\n    composer.addPass(new RenderPass(scene, camera));\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5,\n    // Strength of bloom\n    0.4,\n    // Radius of bloom\n    0.85 // Threshold for bloom\n    );\n    composer.addPass(bloomPass);\n    composerRef.current = composer;\n\n    // Resize handling\n    window.addEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      composer.setSize(window.innerWidth, window.innerHeight);\n    });\n\n    // Animation loop: Rotate small sphere around the big sphere\n    const rotationRadius = 2; // Distance from the big sphere\n    let angle = 0;\n    const rotationSpeed = 0.02; // Adjust rotation speed\n\n    const animate = () => {\n      if (smallSphereRef.current) {\n        angle += rotationSpeed;\n        smallSphereRef.current.position.x = bigSphere.position.x + rotationRadius * Math.cos(angle);\n        smallSphereRef.current.position.z = bigSphere.position.z + rotationRadius * Math.sin(angle);\n      }\n      composer.render();\n      requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Clean up on unmount\n    return () => {\n      renderer.dispose();\n      composer.dispose();\n      bigSphereGeometry.dispose();\n      bigSphereMaterial.dispose();\n      smallSphereGeometry.dispose();\n      smallSphereMaterial.dispose();\n      scene.remove(bigSphereRef.current);\n      scene.remove(smallSphereRef.current);\n      bigSphereRef.current = null;\n      smallSphereRef.current = null;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(TitleBG, \"Yqccq7RET/CUnl4qvSA+JHOuBMg=\");\n_c = TitleBG;\nexport default TitleBG;\nvar _c;\n$RefreshReg$(_c, \"TitleBG\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","EffectComposer","RenderPass","UnrealBloomPass","RGBELoader","Fragment","_Fragment","jsxDEV","_jsxDEV","TitleBG","_s","sceneRef","rendererRef","bigSphereRef","smallSphereRef","cameraRef","composerRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","document","getElementById","appendChild","domElement","current","loader","load","texture","mapping","EquirectangularRefractionMapping","background","environment","bigSphereGeometry","SphereGeometry","bigSphereMaterial","MeshStandardMaterial","color","metalness","roughness","bigSphere","Mesh","position","set","add","smallSphereGeometry","smallSphereMaterial","smallSphere","z","ambientLight","AmbientLight","directionalLight","DirectionalLight","normalize","composer","addPass","bloomPass","Vector2","addEventListener","aspect","updateProjectionMatrix","rotationRadius","angle","rotationSpeed","animate","x","Math","cos","sin","render","requestAnimationFrame","dispose","remove","_c","$RefreshReg$"],"sources":["F:/Portfolio/3D-portfolio/src/components/TitleBG.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\r\n\r\nconst TitleBG = () => {\r\n  const sceneRef = useRef(null);\r\n  const rendererRef = useRef(null);\r\n  const bigSphereRef = useRef(null);\r\n  const smallSphereRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const composerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up scene, camera, and renderer\r\n    const scene = new THREE.Scene();\r\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById('hero').appendChild(renderer.domElement);\r\n    rendererRef.current = renderer;\r\n    cameraRef.current = camera;\r\n    sceneRef.current = scene;\r\n\r\n    // Add HDRI environment map for realistic lighting\r\n    const loader = new RGBELoader();\r\n    loader.load('', (texture) => {\r\n      texture.mapping = THREE.EquirectangularRefractionMapping;\r\n      scene.background = texture;\r\n      scene.environment = texture;\r\n    });\r\n\r\n    // Create big sphere\r\n    const bigSphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n    const bigSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x0077ff,\r\n      metalness: 0.6,\r\n      roughness: 0.3,\r\n    });\r\n    const bigSphere = new THREE.Mesh(bigSphereGeometry, bigSphereMaterial);\r\n    bigSphere.position.set(0, 0, 0);\r\n    scene.add(bigSphere);\r\n    bigSphereRef.current = bigSphere;\r\n\r\n    // Create small sphere\r\n    const smallSphereGeometry = new THREE.SphereGeometry(0.3, 32, 32);\r\n    const smallSphereMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0xff7700,\r\n      metalness: 0.8,\r\n      roughness: 0.2,\r\n    });\r\n    const smallSphere = new THREE.Mesh(smallSphereGeometry, smallSphereMaterial);\r\n    smallSphere.position.set(2, 0, 0); // Initial position relative to the big sphere\r\n    scene.add(smallSphere);\r\n    smallSphereRef.current = smallSphere;\r\n\r\n    // Set up camera position\r\n    camera.position.z = 5;\r\n\r\n    // Add ambient and directional lighting\r\n    const ambientLight = new THREE.AmbientLight(0x404040, 1); // Soft ambient light\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    directionalLight.position.set(1, 1, 1).normalize();\r\n    scene.add(directionalLight);\r\n\r\n    // Set up post-processing with bloom effect\r\n    const composer = new EffectComposer(renderer);\r\n    composer.addPass(new RenderPass(scene, camera));\r\n    const bloomPass = new UnrealBloomPass(\r\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n      1.5, // Strength of bloom\r\n      0.4, // Radius of bloom\r\n      0.85  // Threshold for bloom\r\n    );\r\n    composer.addPass(bloomPass);\r\n    composerRef.current = composer;\r\n\r\n    // Resize handling\r\n    window.addEventListener('resize', () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      composer.setSize(window.innerWidth, window.innerHeight);\r\n    });\r\n\r\n    // Animation loop: Rotate small sphere around the big sphere\r\n    const rotationRadius = 2; // Distance from the big sphere\r\n    let angle = 0;\r\n    const rotationSpeed = 0.02; // Adjust rotation speed\r\n\r\n    const animate = () => {\r\n      if (smallSphereRef.current) {\r\n        angle += rotationSpeed;\r\n        smallSphereRef.current.position.x = bigSphere.position.x + rotationRadius * Math.cos(angle);\r\n        smallSphereRef.current.position.z = bigSphere.position.z + rotationRadius * Math.sin(angle);\r\n      }\r\n      composer.render();\r\n      requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      renderer.dispose();\r\n      composer.dispose();\r\n      bigSphereGeometry.dispose();\r\n      bigSphereMaterial.dispose();\r\n      smallSphereGeometry.dispose();\r\n      smallSphereMaterial.dispose();\r\n      scene.remove(bigSphereRef.current);\r\n      scene.remove(smallSphereRef.current);\r\n      bigSphereRef.current = null;\r\n      smallSphereRef.current = null;\r\n    };\r\n  }, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default TitleBG;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}